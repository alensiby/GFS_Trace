{"ast":null,"code":"var _jsxFileName = \"D:\\\\GFS_Trace\\\\src\\\\components\\\\pages\\\\Inventory\\\\GrainInventory\\\\Tables\\\\Total.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport CreateIcon from '@mui/icons-material/Create';\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Export from './export.png';\nimport { total_data } from './Tabledatas';\nimport { Checkbox } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Total() {\n  _s();\n\n  const [selected, toggleselected] = React.useState(false);\n  const [data, setData] = React.useState(total_data);\n  const columns = [{\n    title: 'Cultivar',\n    field: 'cultivar'\n  }, {\n    title: 'Capacity',\n    field: 'capacity'\n  }, {\n    title: 'Contents',\n    field: 'contents'\n  }, {\n    title: 'Free',\n    field: 'free'\n  }, {\n    title: 'Contracted',\n    field: 'contracted'\n  }, {\n    title: 'Delivered',\n    field: 'delivered'\n  }, {\n    title: 'Remaining',\n    field: 'remaining'\n  }];\n  const columns_archived = [{\n    title: 'Cultivar',\n    field: 'cultivar'\n  }, {\n    title: 'Capacity',\n    field: 'capacity'\n  }, {\n    title: 'Contents',\n    field: 'contents'\n  }, {\n    title: 'Free',\n    field: 'free'\n  }, {\n    title: 'Contracted',\n    field: 'contracted'\n  }, {\n    title: 'Delivered',\n    field: 'delivered'\n  }, {\n    title: 'Remaining',\n    field: 'remaining'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n      title: \"TOTAL\",\n      data: data,\n      columns: selected ? columns_archived : columns,\n      editable: {\n        onRowAdd: newRow => new Promise((resolve, reject) => {}),\n        onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            const dataUpdate = [...data];\n            const index = oldData.tableData.id;\n            dataUpdate[index] = newData;\n            setData([...dataUpdate]);\n            resolve();\n          }, 1000);\n        }),\n        onRowDelete: oldData => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            const dataDelete = [...data];\n            const index = oldData.tableData.id;\n            dataDelete.splice(index, 1);\n            setData([...dataDelete]);\n            resolve();\n          }, 1000);\n        })\n      },\n      options: {\n        actionsColumnIndex: -1,\n        paging: true,\n        pageSizeOptions: [2, 5, 10, 15, 20],\n        paginationType: \"stepped\",\n        showFirstLastPageButtons: false,\n        exportButton: true\n      },\n      components: {\n        Toolbar: props => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(MTableToolbar, { ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toggle-switch\",\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              toggle: true,\n              onClick: () => toggleselected(!selected),\n              checked: selected,\n              label: \"Show Archived\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)\n      },\n      icons: {\n        Add: () => /*#__PURE__*/_jsxDEV(AddCircleRoundedIcon, {\n          fontSize: \"large\",\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 30\n        }, this),\n        Edit: () => /*#__PURE__*/_jsxDEV(CreateIcon, {\n          color: \"action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 31\n        }, this),\n        Export: () => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Export\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 33\n        }, this),\n        Delete: () => /*#__PURE__*/_jsxDEV(DeleteIcon, {\n          color: \"action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 33\n        }, this)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Total, \"liWqzLjUr5J96vAHoAawdU3u+EU=\");\n\n_c = Total;\n\nvar _c;\n\n$RefreshReg$(_c, \"Total\");","map":{"version":3,"sources":["D:/GFS_Trace/src/components/pages/Inventory/GrainInventory/Tables/Total.js"],"names":["React","MaterialTable","MTableToolbar","CreateIcon","AddCircleRoundedIcon","DeleteIcon","Export","total_data","Checkbox","Total","selected","toggleselected","useState","data","setData","columns","title","field","columns_archived","onRowAdd","newRow","Promise","resolve","reject","onRowUpdate","newData","oldData","setTimeout","dataUpdate","index","tableData","id","onRowDelete","dataDelete","splice","actionsColumnIndex","paging","pageSizeOptions","paginationType","showFirstLastPageButtons","exportButton","Toolbar","props","Add","Edit","Delete"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { total_data } from './Tabledatas';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nexport default function Total() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(total_data)\r\n    const columns = [\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',\r\n    }, {\r\n        title: 'Capacity', field: 'capacity',\r\n    },\r\n    {\r\n        title: 'Contents', field: 'contents',\r\n    },\r\n    {\r\n        title: 'Free', field: 'free',\r\n    },\r\n    {\r\n        title: 'Contracted', field: 'contracted',\r\n    },\r\n    {\r\n        title: 'Delivered', field: 'delivered',\r\n    },\r\n    {\r\n        title: 'Remaining', field: 'remaining',\r\n    }\r\n  ]\r\n    const columns_archived = [\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',\r\n    }, {\r\n        title: 'Capacity', field: 'capacity',\r\n    },\r\n    {\r\n        title: 'Contents', field: 'contents',\r\n    },\r\n    {\r\n        title: 'Free', field: 'free',\r\n    },\r\n    {\r\n        title: 'Contracted', field: 'contracted',\r\n    },\r\n    {\r\n        title: 'Delivered', field: 'delivered',\r\n    },\r\n    {\r\n        title: 'Remaining', field: 'remaining',\r\n    }\r\n  ]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"TOTAL\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                  Toolbar: (props) => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\">\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n               \r\n                icons={{\r\n                  Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                  Edit: () => <CreateIcon color=\"action\" />,\r\n                  Export: () => <img src={Export}></img>,\r\n                  Delete: () => <DeleteIcon color=\"action\" />\r\n                 \r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}