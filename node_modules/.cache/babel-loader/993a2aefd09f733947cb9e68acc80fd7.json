{"ast":null,"code":"var _jsxFileName = \"/Users/alen/Documents/GFS_Trace/src/components/pages/Inventory/GrainInventory/Tables/Transfer.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport CreateIcon from '@mui/icons-material/Create';\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Export from './export.png';\nimport { Checkbox } from 'semantic-ui-react';\nimport { transfer_data } from './Tabledatas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Transfer() {\n  _s();\n\n  const [selected, toggleselected] = React.useState(false);\n  const [data, setData] = React.useState(transfer_data);\n  const columns = [{\n    title: 'ID',\n    field: 'id'\n  }, {\n    title: 'Silos',\n    field: 'silos'\n  }, {\n    title: 'Date/Time',\n    field: 'dateTime'\n  }, {\n    title: 'Operators',\n    field: 'operators'\n  }, {\n    title: 'Cultivar',\n    field: 'cultivar'\n  }, {\n    title: 'Amount',\n    field: 'amount'\n  }, {\n    title: 'Traits',\n    field: 'traits'\n  }, {\n    title: 'Notes',\n    field: 'notes'\n  }];\n  const columns_archived = [{\n    title: 'ID',\n    field: 'id'\n  }, {\n    title: 'Silos',\n    field: 'silos'\n  }, {\n    title: 'Date/Time',\n    field: 'dateTime'\n  }, {\n    title: 'Operators',\n    field: 'operators'\n  }, {\n    title: 'Cultivar',\n    field: 'cultivar'\n  }, {\n    title: 'Amount',\n    field: 'amount'\n  }, {\n    title: 'Traits',\n    field: 'traits'\n  }, {\n    title: 'Notes',\n    field: 'notes'\n  }, {\n    title: 'Archived',\n    field: 'archived'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n      title: \"TRANSFER\",\n      data: data,\n      columns: selected ? columns_archived : columns,\n      editable: {\n        onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            const dataUpdate = [...data];\n            const index = oldData.tableData.id;\n            dataUpdate[index] = newData;\n            setData([...dataUpdate]);\n            resolve();\n          }, 1000);\n        }),\n        onRowDelete: oldData => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            const dataDelete = [...data];\n            const index = oldData.tableData.id;\n            dataDelete.splice(index, 1);\n            setData([...dataDelete]);\n            resolve();\n          }, 1000);\n        })\n      },\n      options: {\n        actionsColumnIndex: -1,\n        paging: true,\n        pageSizeOptions: [2, 5, 10, 15, 20],\n        paginationType: \"stepped\",\n        showFirstLastPageButtons: false,\n        exportButton: true\n      },\n      components: {\n        Toolbar: props => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(MTableToolbar, { ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toggle-switch\",\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              toggle: true,\n              onClick: () => toggleselected(!selected),\n              checked: selected,\n              label: \"Show Archived\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 27\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 23\n        }, this)\n      },\n      icons: {\n        Add: () => /*#__PURE__*/_jsxDEV(AddCircleRoundedIcon, {\n          fontSize: \"large\",\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 32\n        }, this),\n        Edit: () => /*#__PURE__*/_jsxDEV(CreateIcon, {\n          color: \"action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 33\n        }, this),\n        Export: () => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Export\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 35\n        }, this),\n        Delete: () => /*#__PURE__*/_jsxDEV(DeleteIcon, {\n          color: \"action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 35\n        }, this)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Transfer, \"0WFwLsAxn+phQtKQtPS6G2VXZHA=\");\n\n_c = Transfer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transfer\");","map":{"version":3,"sources":["/Users/alen/Documents/GFS_Trace/src/components/pages/Inventory/GrainInventory/Tables/Transfer.js"],"names":["React","MaterialTable","MTableToolbar","CreateIcon","AddCircleRoundedIcon","DeleteIcon","Export","Checkbox","transfer_data","Transfer","selected","toggleselected","useState","data","setData","columns","title","field","columns_archived","onRowUpdate","newData","oldData","Promise","resolve","reject","setTimeout","dataUpdate","index","tableData","id","onRowDelete","dataDelete","splice","actionsColumnIndex","paging","pageSizeOptions","paginationType","showFirstLastPageButtons","exportButton","Toolbar","props","Add","Edit","Delete"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nimport { transfer_data } from './Tabledatas';\r\nexport default function Transfer() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(transfer_data)\r\n        \r\n        const columns = [{\r\n        title: 'ID', field: 'id'\r\n    },\r\n    {\r\n        title: 'Silos', field: 'silos',\r\n    },\r\n    {\r\n        title: 'Date/Time', field: 'dateTime',\r\n    }, {\r\n        title: 'Operators', field: 'operators',\r\n    },\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',\r\n    },\r\n    \r\n    {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    \r\n    {\r\n        title: 'Traits', field: 'traits',\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',\r\n    },\r\n    \r\n    \r\n  ]\r\n    const columns_archived = [{\r\n        title: 'ID', field: 'id'\r\n    },\r\n    {\r\n        title: 'Silos', field: 'silos',\r\n    },\r\n    {\r\n        title: 'Date/Time', field: 'dateTime',\r\n    }, {\r\n        title: 'Operators', field: 'operators',\r\n    },\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',\r\n    },\r\n    \r\n    {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    \r\n    {\r\n        title: 'Traits', field: 'traits',\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',\r\n    },\r\n    {\r\n        title: 'Archived', field: 'archived',\r\n    },\r\n    \r\n  ]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"TRANSFER\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                 \r\n                  icons={{\r\n                    Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Export: () => <img src={Export}></img>,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                   \r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}