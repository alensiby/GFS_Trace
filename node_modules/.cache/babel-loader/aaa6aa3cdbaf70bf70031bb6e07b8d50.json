{"ast":null,"code":"var _jsxFileName = \"D:\\\\GFS_Trace\\\\src\\\\components\\\\pages\\\\Inventory\\\\InventoryChemical\\\\Tables\\\\Outgoing.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport CreateIcon from '@mui/icons-material/Create';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\nimport Export from '../../../export.png';\nimport { outgoing_data } from '../../../../../Data/InventoryChemicalData';\nimport { Checkbox } from \"semantic-ui-react\";\nimport './archived.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Outgoing() {\n  _s();\n\n  const [selected, toggleselected] = React.useState(false);\n  const [data, setData] = React.useState(outgoing_data);\n  const columns = [{\n    title: 'Job Type',\n    field: 'type'\n  }, {\n    title: 'Job Description',\n    field: 'description'\n  }, {\n    title: 'Date',\n    field: 'date'\n  }, {\n    title: 'Operator',\n    field: 'operator'\n  }, {\n    title: 'Chemicals',\n    field: 'chemicals'\n  }, {\n    title: 'Notes',\n    field: 'notes'\n  }];\n  const columns_archived = [{\n    title: 'Job Type',\n    field: 'type'\n  }, {\n    title: 'Job Description',\n    field: 'description'\n  }, {\n    title: 'Date',\n    field: 'date'\n  }, {\n    title: 'Operator',\n    field: 'operator'\n  }, {\n    title: 'Chemicals',\n    field: 'chemicals'\n  }, {\n    title: 'Notes',\n    field: 'notes'\n  }, {\n    title: \"Archived\",\n    field: \"archived\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n      title: \"OUTGOING\",\n      data: data,\n      columns: selected ? columns_archived : columns,\n      editable: {\n        onRowAdd: newRow => new Promise((resolve, reject) => {}),\n        onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            const dataUpdate = [...data];\n            const index = oldData.tableData.id;\n            dataUpdate[index] = newData;\n            setData([...dataUpdate]);\n            resolve();\n          }, 1000);\n        }),\n        onRowDelete: oldData => new Promise((resolve, reject) => {\n          setTimeout(() => {\n            const dataDelete = [...data];\n            const index = oldData.tableData.id;\n            dataDelete.splice(index, 1);\n            setData([...dataDelete]);\n            resolve();\n          }, 1000);\n        })\n      },\n      components: {\n        Toolbar: props => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(MTableToolbar, { ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toggle-switch\",\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              toggle: true,\n              onClick: () => toggleselected(!selected),\n              checked: selected,\n              label: \"Show Archived Tickets\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      },\n      options: {\n        actionsColumnIndex: -1,\n        paging: true,\n        pageSizeOptions: [2, 5, 10, 15, 20],\n        paginationType: \"stepped\",\n        showFirstLastPageButtons: false,\n        exportButton: true\n      },\n      icons: {\n        Add: () => /*#__PURE__*/_jsxDEV(AddCircleRoundedIcon, {\n          fontSize: \"large\",\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 22\n        }, this),\n        Edit: () => /*#__PURE__*/_jsxDEV(CreateIcon, {\n          color: \"action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 23\n        }, this),\n        Export: () => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Export\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this),\n        Delete: () => /*#__PURE__*/_jsxDEV(DeleteIcon, {\n          color: \"action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Outgoing, \"OUqjWkzPmUNsqqf7mstBRordCYs=\");\n\n_c = Outgoing;\n\nvar _c;\n\n$RefreshReg$(_c, \"Outgoing\");","map":{"version":3,"sources":["D:/GFS_Trace/src/components/pages/Inventory/InventoryChemical/Tables/Outgoing.js"],"names":["React","MaterialTable","MTableToolbar","CreateIcon","DeleteIcon","AddCircleRoundedIcon","Export","outgoing_data","Checkbox","Outgoing","selected","toggleselected","useState","data","setData","columns","title","field","columns_archived","onRowAdd","newRow","Promise","resolve","reject","onRowUpdate","newData","oldData","setTimeout","dataUpdate","index","tableData","id","onRowDelete","dataDelete","splice","Toolbar","props","actionsColumnIndex","paging","pageSizeOptions","paginationType","showFirstLastPageButtons","exportButton","Add","Edit","Delete"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,IAAwBC,aAAxB,QAA6C,gBAA7C;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,oBAAP,MAAiC,sCAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,aAAT,QAA8B,2CAA9B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAO,gBAAP;;AACA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,cAAX,IAA6BX,KAAK,CAACY,QAAN,CAAe,KAAf,CAAnC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,KAAK,CAACY,QAAN,CAAeL,aAAf,CAAxB;AACA,QAAMQ,OAAO,GAAG,CAAC;AACfC,IAAAA,KAAK,EAAE,UADQ;AACIC,IAAAA,KAAK,EAAE;AADX,GAAD,EAGhB;AACED,IAAAA,KAAK,EAAE,iBADT;AAC4BC,IAAAA,KAAK,EAAE;AADnC,GAHgB,EAMhB;AACED,IAAAA,KAAK,EAAE,MADT;AACiBC,IAAAA,KAAK,EAAE;AADxB,GANgB,EAQb;AACDD,IAAAA,KAAK,EAAE,UADN;AACkBC,IAAAA,KAAK,EAAE;AADzB,GARa,EAWhB;AACED,IAAAA,KAAK,EAAE,WADT;AACsBC,IAAAA,KAAK,EAAE;AAD7B,GAXgB,EAchB;AACED,IAAAA,KAAK,EAAE,OADT;AACkBC,IAAAA,KAAK,EAAE;AADzB,GAdgB,CAAhB;AAiBA,QAAMC,gBAAgB,GAAG,CAAC;AACxBF,IAAAA,KAAK,EAAE,UADiB;AACLC,IAAAA,KAAK,EAAE;AADF,GAAD,EAGzB;AACED,IAAAA,KAAK,EAAE,iBADT;AAC4BC,IAAAA,KAAK,EAAE;AADnC,GAHyB,EAMzB;AACED,IAAAA,KAAK,EAAE,MADT;AACiBC,IAAAA,KAAK,EAAE;AADxB,GANyB,EAQtB;AACDD,IAAAA,KAAK,EAAE,UADN;AACkBC,IAAAA,KAAK,EAAE;AADzB,GARsB,EAWzB;AACED,IAAAA,KAAK,EAAE,WADT;AACsBC,IAAAA,KAAK,EAAE;AAD7B,GAXyB,EAczB;AACED,IAAAA,KAAK,EAAE,OADT;AACkBC,IAAAA,KAAK,EAAE;AADzB,GAdyB,EAiBzB;AACED,IAAAA,KAAK,EAAE,UADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GAjByB,CAAzB;AAqBA,sBACE;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAC,UAArB;AACE,MAAA,IAAI,EAAEJ,IADR;AAEE,MAAA,OAAO,EAAEH,QAAQ,GAAGQ,gBAAH,GAAsBH,OAFzC;AAGE,MAAA,QAAQ,EAAE;AACRI,QAAAA,QAAQ,EAAEC,MAAD,IAAW,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB,CAAE,CAAhC,CADZ;AAERC,QAAAA,WAAW,EAAE,CAACC,OAAD,EAAUC,OAAV,KACX,IAAIL,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BI,UAAAA,UAAU,CAAC,MAAM;AACf,kBAAMC,UAAU,GAAG,CAAC,GAAGf,IAAJ,CAAnB;AACA,kBAAMgB,KAAK,GAAGH,OAAO,CAACI,SAAR,CAAkBC,EAAhC;AACAH,YAAAA,UAAU,CAACC,KAAD,CAAV,GAAoBJ,OAApB;AACAX,YAAAA,OAAO,CAAC,CAAC,GAAGc,UAAJ,CAAD,CAAP;AAEAN,YAAAA,OAAO;AACR,WAPS,EAOP,IAPO,CAAV;AAQD,SATD,CAHM;AAaRU,QAAAA,WAAW,EAAEN,OAAO,IAClB,IAAIL,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BI,UAAAA,UAAU,CAAC,MAAM;AACf,kBAAMM,UAAU,GAAG,CAAC,GAAGpB,IAAJ,CAAnB;AACA,kBAAMgB,KAAK,GAAGH,OAAO,CAACI,SAAR,CAAkBC,EAAhC;AACAE,YAAAA,UAAU,CAACC,MAAX,CAAkBL,KAAlB,EAAyB,CAAzB;AACAf,YAAAA,OAAO,CAAC,CAAC,GAAGmB,UAAJ,CAAD,CAAP;AAEAX,YAAAA,OAAO;AACR,WAPS,EAOP,IAPO,CAAV;AAQD,SATD;AAdM,OAHZ;AA4BE,MAAA,UAAU,EAAE;AACVa,QAAAA,OAAO,EAAEC,KAAK,iBACZ;AAAA,kCACE,QAAC,aAAD,OAAmBA;AAAnB;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,SAAS,EAAC,eAAf;AAAA,mCACE,QAAC,QAAD;AACE,cAAA,MAAM,MADR;AAEE,cAAA,OAAO,EAAE,MAAMzB,cAAc,CAAC,CAACD,QAAF,CAF/B;AAGE,cAAA,OAAO,EAAEA,QAHX;AAIE,cAAA,KAAK,EAAC;AAJR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFQ,OA5Bd;AA2CE,MAAA,OAAO,EAAE;AACP2B,QAAAA,kBAAkB,EAAE,CAAC,CADd;AAEPC,QAAAA,MAAM,EAAE,IAFD;AAGPC,QAAAA,eAAe,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,EAAf,CAHV;AAIPC,QAAAA,cAAc,EAAE,SAJT;AAKPC,QAAAA,wBAAwB,EAAE,KALnB;AAMPC,QAAAA,YAAY,EAAE;AANP,OA3CX;AAmDE,MAAA,KAAK,EAAE;AACLC,QAAAA,GAAG,EAAE,mBAAM,QAAC,oBAAD;AAAsB,UAAA,QAAQ,EAAC,OAA/B;AAAuC,UAAA,KAAK,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA,gBADN;AAELC,QAAAA,IAAI,EAAE,mBAAM,QAAC,UAAD;AAAY,UAAA,KAAK,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,gBAFP;AAGLtC,QAAAA,MAAM,EAAE,mBAAM;AAAK,UAAA,GAAG,EAAEA;AAAV;AAAA;AAAA;AAAA;AAAA,gBAHT;AAILuC,QAAAA,MAAM,EAAE,mBAAM,QAAC,UAAD;AAAY,UAAA,KAAK,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA;AAJT;AAnDT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA+DD;;GAxGuBpC,Q;;KAAAA,Q","sourcesContent":["import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport Export from '../../../export.png';\r\nimport { outgoing_data } from '../../../../../Data/InventoryChemicalData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport './archived.css';\r\nexport default function Outgoing() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [data, setData] = React.useState(outgoing_data)\r\n  const columns = [{\r\n    title: 'Job Type', field: 'type'\r\n  },\r\n  {\r\n    title: 'Job Description', field: 'description',\r\n  },\r\n  {\r\n    title: 'Date', field: 'date',\r\n  }, {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Chemicals', field: 'chemicals',\r\n  },\r\n  {\r\n    title: 'Notes', field: 'notes',\r\n  }]\r\n  const columns_archived = [{\r\n    title: 'Job Type', field: 'type'\r\n  },\r\n  {\r\n    title: 'Job Description', field: 'description',\r\n  },\r\n  {\r\n    title: 'Date', field: 'date',\r\n  }, {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Chemicals', field: 'chemicals',\r\n  },\r\n  {\r\n    title: 'Notes', field: 'notes',\r\n  },\r\n  {\r\n    title: \"Archived\",\r\n    field: \"archived\",\r\n  },]\r\n  return (\r\n    <div>\r\n      <MaterialTable title=\"OUTGOING\"\r\n        data={data}\r\n        columns={selected ? columns_archived : columns}\r\n        editable={{\r\n          onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = newData;\r\n                setData([...dataUpdate]);\r\n\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                setData([...dataDelete]);\r\n\r\n                resolve()\r\n              }, 1000)\r\n            }),\r\n        }}\r\n        components={{\r\n          Toolbar: props => (\r\n            <div>\r\n              <MTableToolbar {...props} />\r\n              <div className=\"toggle-switch\">\r\n                <Checkbox\r\n                  toggle\r\n                  onClick={() => toggleselected(!selected)}\r\n                  checked={selected}\r\n                  label=\"Show Archived Tickets\"\r\n                />\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          paging: true,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n          Edit: () => <CreateIcon color=\"action\" />,\r\n          Export: () => <img src={Export}></img>,\r\n          Delete: () => <DeleteIcon color=\"action\" />\r\n         \r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}