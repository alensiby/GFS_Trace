[{"D:\\GFS_Trace\\src\\index.js":"1","D:\\GFS_Trace\\src\\i18nextInit.js":"2","D:\\GFS_Trace\\src\\App.js":"3","D:\\GFS_Trace\\src\\reportWebVitals.js":"4","D:\\GFS_Trace\\src\\components\\pages\\Dashboard\\Dashboard.js":"5","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\farms.js":"6","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Custom.js":"7","D:\\GFS_Trace\\src\\components\\Layout\\Structure.js":"8","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Chemicals\\Chemical.js":"9","D:\\GFS_Trace\\src\\components\\pages\\Job\\job.js":"10","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Fertiliser\\FertiliserTable.js":"11","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Livestock\\LiveStock.js":"12","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Equipments\\Equipments.js":"13","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Nozzles\\Nozzles.js":"14","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Spraylogs\\Spraylogs.js":"15","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\WaterLicence\\WaterLicence.js":"16","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Users\\Users.js":"17","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Spreading\\Spreading.js":"18","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Irrigation\\Irrigation.js":"19","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Planting\\Planting.js":"20","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Grazing\\Grazing.js":"21","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\InventoryChemical.js":"22","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Harvest\\Harvest.js":"23","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Maintenance\\Maintenance.js":"24","D:\\GFS_Trace\\src\\components\\pages\\Activities\\VetTreatment\\VetTreatment.js":"25","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\InventoryWater.js":"26","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryReport\\Inventoryreport.js":"27","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\farmTable.js":"28","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\ReportTableDetails.js":"29","D:\\GFS_Trace\\src\\components\\pages\\Job\\Useform.js":"30","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\InventoryWaterTable.js":"31","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\InventoryChemicalTable.js":"32","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\FarmListPopup\\farmpopup.js":"33","D:\\GFS_Trace\\src\\Data\\farmData.js":"34","D:\\GFS_Trace\\src\\Data\\ChemicalData.js":"35","D:\\GFS_Trace\\src\\Data\\MaintenanceData.js":"36","D:\\GFS_Trace\\src\\Data\\VetTreatmentData.js":"37","D:\\GFS_Trace\\src\\Data\\JobData.js":"38","D:\\GFS_Trace\\src\\Data\\HarvestData.js":"39","D:\\GFS_Trace\\src\\Data\\GrazingData.js":"40","D:\\GFS_Trace\\src\\components\\HeaderFooter\\Header.js":"41","D:\\GFS_Trace\\src\\components\\pages\\Job\\controls\\Select.js":"42","D:\\GFS_Trace\\src\\components\\HeaderFooter\\footer.js":"43","D:\\GFS_Trace\\src\\components\\Sidebar\\Navbar.js":"44","D:\\GFS_Trace\\src\\components\\pages\\Job\\controls\\MyDatePicker.js":"45","D:\\GFS_Trace\\src\\components\\pages\\Job\\controls\\Category.js":"46","D:\\GFS_Trace\\src\\components\\pages\\Job\\controls\\SelectCheck.js":"47","D:\\GFS_Trace\\src\\components\\pages\\Job\\services\\JobAssign.js":"48","D:\\GFS_Trace\\src\\Data\\PlantingData.js":"49","D:\\GFS_Trace\\src\\Data\\IrrigationData.js":"50","D:\\GFS_Trace\\src\\Data\\SpreadingData.js":"51","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Nozzles\\NTable.js":"52","D:\\GFS_Trace\\src\\Data\\UserData.js":"53","D:\\GFS_Trace\\src\\Data\\SpraylogsData.js":"54","D:\\GFS_Trace\\src\\Data\\EquipmentData.js":"55","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\tableDetails.js":"56","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tabledetails.js":"57","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\FarmReport.js":"58","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\FertiliserReport.js":"59","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\ChemicalReport.js":"60","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\FuelReport.js":"61","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\EquipmentReport.js":"62","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\GrainReport.js":"63","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tabledetails.js":"64","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\PaddockReport.js":"65","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Livestock\\LsTable.js":"66","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\WaterStorageTable.js":"67","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\ReportTableData.js":"68","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\SiloTable.js":"69","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\FueltankTable.js":"70","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\PaddockTable.js":"71","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\Outgoing.js":"72","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\StockTake.js":"73","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\Ingoing.js":"74","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\Chemicals.js":"75","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tables\\Ingoing.js":"76","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tables\\Outgoing.js":"77","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tables\\Storages.js":"78","D:\\GFS_Trace\\src\\Data\\WaterStorageData.js":"79","D:\\GFS_Trace\\src\\Data\\SiloData.js":"80","D:\\GFS_Trace\\src\\Data\\FuelTankData.js":"81","D:\\GFS_Trace\\src\\Data\\PaddockData.js":"82","D:\\GFS_Trace\\src\\Data\\InventoryWaterData.js":"83","D:\\GFS_Trace\\src\\Data\\InventoryChemicalData.js":"84","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\InventoryFertilizer.js":"85","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\FertiliserTable.js":"86","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tabledetails.js":"87","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Outgoing.js":"88","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Fertilisers.js":"89","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Ingoing.js":"90","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\StockTake.js":"91","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Tabledatas.js":"92","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\GrainsTable.js":"93","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tabledetails.js":"94","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Contracts.js":"95","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Total.js":"96","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Ingoing.js":"97","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Silos.js":"98","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Outgoing.js":"99","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Transfer.js":"100","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Tabledatas.js":"101","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Chart.js":"102","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\BarChart.js":"103","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\FuelTable.js":"104","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tabledetails.js":"105","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Total.js":"106","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Outgoing.js":"107","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\StockTake.js":"108","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Ingoing.js":"109","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\FuelTank.js":"110","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Tabledatas.js":"111","D:\\GFS_Trace\\src\\components\\pages\\Login\\Loggedin.js":"112","D:\\GFS_Trace\\src\\components\\pages\\Login\\SignUp.js":"113","D:\\GFS_Trace\\src\\components\\pages\\Login\\SignIn.js":"114","D:\\GFS_Trace\\src\\components\\pages\\Login\\Forget.js":"115"},{"size":651,"mtime":1652352653311,"results":"116","hashOfConfig":"117"},{"size":625,"mtime":1652352653255,"results":"118","hashOfConfig":"117"},{"size":4583,"mtime":1652938150806,"results":"119","hashOfConfig":"117"},{"size":375,"mtime":1652352653312,"results":"120","hashOfConfig":"117"},{"size":218,"mtime":1652352653190,"results":"121","hashOfConfig":"117"},{"size":2155,"mtime":1652352653190,"results":"122","hashOfConfig":"117"},{"size":2424,"mtime":1652870847753,"results":"123","hashOfConfig":"117"},{"size":1198,"mtime":1652352653174,"results":"124","hashOfConfig":"117"},{"size":2783,"mtime":1652352653190,"results":"125","hashOfConfig":"117"},{"size":15156,"mtime":1652463526605,"results":"126","hashOfConfig":"117"},{"size":3142,"mtime":1652871151414,"results":"127","hashOfConfig":"117"},{"size":415,"mtime":1652352653190,"results":"128","hashOfConfig":"117"},{"size":2906,"mtime":1652352653190,"results":"129","hashOfConfig":"117"},{"size":405,"mtime":1652352653190,"results":"130","hashOfConfig":"117"},{"size":3450,"mtime":1652108045055,"results":"131","hashOfConfig":"117"},{"size":2831,"mtime":1652352653190,"results":"132","hashOfConfig":"117"},{"size":10254,"mtime":1652352653190,"results":"133","hashOfConfig":"117"},{"size":3462,"mtime":1652108700383,"results":"134","hashOfConfig":"117"},{"size":3441,"mtime":1652108928987,"results":"135","hashOfConfig":"117"},{"size":3427,"mtime":1652109018452,"results":"136","hashOfConfig":"117"},{"size":3654,"mtime":1652108821041,"results":"137","hashOfConfig":"117"},{"size":469,"mtime":1652352653207,"results":"138","hashOfConfig":"117"},{"size":3423,"mtime":1652109677665,"results":"139","hashOfConfig":"117"},{"size":3616,"mtime":1652108966561,"results":"140","hashOfConfig":"117"},{"size":3734,"mtime":1652109026817,"results":"141","hashOfConfig":"117"},{"size":454,"mtime":1652352653212,"results":"142","hashOfConfig":"117"},{"size":614,"mtime":1652352653211,"results":"143","hashOfConfig":"117"},{"size":1237,"mtime":1652352653190,"results":"144","hashOfConfig":"117"},{"size":939,"mtime":1652352653190,"results":"145","hashOfConfig":"117"},{"size":658,"mtime":1652444231750,"results":"146","hashOfConfig":"117"},{"size":1154,"mtime":1652352653212,"results":"147","hashOfConfig":"117"},{"size":1367,"mtime":1652352653207,"results":"148","hashOfConfig":"117"},{"size":5325,"mtime":1652352653190,"results":"149","hashOfConfig":"117"},{"size":136,"mtime":1652352653174,"results":"150","hashOfConfig":"117"},{"size":623,"mtime":1652352653174,"results":"151","hashOfConfig":"117"},{"size":1593,"mtime":1652352653174,"results":"152","hashOfConfig":"117"},{"size":1674,"mtime":1652352653174,"results":"153","hashOfConfig":"117"},{"size":1569,"mtime":1652352653174,"results":"154","hashOfConfig":"117"},{"size":1458,"mtime":1652352653174,"results":"155","hashOfConfig":"117"},{"size":1502,"mtime":1652352653174,"results":"156","hashOfConfig":"117"},{"size":636,"mtime":1652352653174,"results":"157","hashOfConfig":"117"},{"size":1539,"mtime":1652459609983,"results":"158","hashOfConfig":"117"},{"size":1951,"mtime":1652352653174,"results":"159","hashOfConfig":"117"},{"size":8024,"mtime":1652937458342,"results":"160","hashOfConfig":"117"},{"size":917,"mtime":1652352653227,"results":"161","hashOfConfig":"117"},{"size":6574,"mtime":1652352653226,"results":"162","hashOfConfig":"117"},{"size":1624,"mtime":1652453135532,"results":"163","hashOfConfig":"117"},{"size":1861,"mtime":1652352653231,"results":"164","hashOfConfig":"117"},{"size":1460,"mtime":1652352653174,"results":"165","hashOfConfig":"117"},{"size":1464,"mtime":1652352653174,"results":"166","hashOfConfig":"117"},{"size":1462,"mtime":1652352653174,"results":"167","hashOfConfig":"117"},{"size":2970,"mtime":1652352653190,"results":"168","hashOfConfig":"117"},{"size":1555,"mtime":1652352653174,"results":"169","hashOfConfig":"117"},{"size":1408,"mtime":1652352653174,"results":"170","hashOfConfig":"117"},{"size":1174,"mtime":1652352653174,"results":"171","hashOfConfig":"117"},{"size":621,"mtime":1652352653190,"results":"172","hashOfConfig":"117"},{"size":720,"mtime":1652352653207,"results":"173","hashOfConfig":"117"},{"size":5814,"mtime":1652352653190,"results":"174","hashOfConfig":"117"},{"size":918,"mtime":1652352653190,"results":"175","hashOfConfig":"117"},{"size":893,"mtime":1652352653190,"results":"176","hashOfConfig":"117"},{"size":924,"mtime":1652352653190,"results":"177","hashOfConfig":"117"},{"size":2215,"mtime":1652352653190,"results":"178","hashOfConfig":"117"},{"size":939,"mtime":1652352653190,"results":"179","hashOfConfig":"117"},{"size":591,"mtime":1652352653212,"results":"180","hashOfConfig":"117"},{"size":3799,"mtime":1652352653190,"results":"181","hashOfConfig":"117"},{"size":3173,"mtime":1652352653190,"results":"182","hashOfConfig":"117"},{"size":2250,"mtime":1652352653190,"results":"183","hashOfConfig":"117"},{"size":2647,"mtime":1652352653190,"results":"184","hashOfConfig":"117"},{"size":2022,"mtime":1652352653190,"results":"185","hashOfConfig":"117"},{"size":1849,"mtime":1652352653190,"results":"186","hashOfConfig":"117"},{"size":2126,"mtime":1652352653190,"results":"187","hashOfConfig":"117"},{"size":3371,"mtime":1652869991595,"results":"188","hashOfConfig":"117"},{"size":3772,"mtime":1652870039222,"results":"189","hashOfConfig":"117"},{"size":3937,"mtime":1652869929460,"results":"190","hashOfConfig":"117"},{"size":3029,"mtime":1652869801468,"results":"191","hashOfConfig":"117"},{"size":3937,"mtime":1652420533455,"results":"192","hashOfConfig":"117"},{"size":3489,"mtime":1652420789604,"results":"193","hashOfConfig":"117"},{"size":3036,"mtime":1652420700964,"results":"194","hashOfConfig":"117"},{"size":626,"mtime":1652352653174,"results":"195","hashOfConfig":"117"},{"size":416,"mtime":1652352653174,"results":"196","hashOfConfig":"117"},{"size":379,"mtime":1652352653174,"results":"197","hashOfConfig":"117"},{"size":490,"mtime":1652352653174,"results":"198","hashOfConfig":"117"},{"size":255,"mtime":1652352653174,"results":"199","hashOfConfig":"117"},{"size":1581,"mtime":1652352653174,"results":"200","hashOfConfig":"117"},{"size":441,"mtime":1652352653190,"results":"201","hashOfConfig":"117"},{"size":1372,"mtime":1652352653190,"results":"202","hashOfConfig":"117"},{"size":728,"mtime":1652352653190,"results":"203","hashOfConfig":"117"},{"size":2993,"mtime":1652352653205,"results":"204","hashOfConfig":"117"},{"size":2004,"mtime":1652352653190,"results":"205","hashOfConfig":"117"},{"size":3514,"mtime":1652352653205,"results":"206","hashOfConfig":"117"},{"size":3366,"mtime":1652352653206,"results":"207","hashOfConfig":"117"},{"size":1621,"mtime":1652352653206,"results":"208","hashOfConfig":"117"},{"size":1933,"mtime":1652871258857,"results":"209","hashOfConfig":"117"},{"size":936,"mtime":1638611160000,"results":"210","hashOfConfig":"117"},{"size":4493,"mtime":1641100110000,"results":"211","hashOfConfig":"117"},{"size":4038,"mtime":1652872466870,"results":"212","hashOfConfig":"117"},{"size":5471,"mtime":1652872452305,"results":"213","hashOfConfig":"117"},{"size":3443,"mtime":1652872437131,"results":"214","hashOfConfig":"117"},{"size":5654,"mtime":1652872445459,"results":"215","hashOfConfig":"117"},{"size":4194,"mtime":1652872461339,"results":"216","hashOfConfig":"117"},{"size":3319,"mtime":1652815390000,"results":"217","hashOfConfig":"117"},{"size":1506,"mtime":1639201024000,"results":"218","hashOfConfig":"117"},{"size":739,"mtime":1639254392000,"results":"219","hashOfConfig":"117"},{"size":1548,"mtime":1652871319845,"results":"220","hashOfConfig":"117"},{"size":845,"mtime":1641017494000,"results":"221","hashOfConfig":"117"},{"size":4661,"mtime":1641013580000,"results":"222","hashOfConfig":"117"},{"size":4756,"mtime":1652421876000,"results":"223","hashOfConfig":"117"},{"size":4193,"mtime":1641013742000,"results":"224","hashOfConfig":"117"},{"size":4503,"mtime":1652421862000,"results":"225","hashOfConfig":"117"},{"size":3357,"mtime":1652815276000,"results":"226","hashOfConfig":"117"},{"size":1809,"mtime":1652815170000,"results":"227","hashOfConfig":"117"},{"size":179,"mtime":1632278924000,"results":"228","hashOfConfig":"117"},{"size":918,"mtime":1652865194000,"results":"229","hashOfConfig":"117"},{"size":1773,"mtime":1652879538923,"results":"230","hashOfConfig":"117"},{"size":878,"mtime":1652865318000,"results":"231","hashOfConfig":"117"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},"1v1fsp0",{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"234"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"234"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"234"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"234"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"234"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"234"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"234"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"234"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"234"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"234"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"234"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"234"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"234"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"234"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"234"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"234"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"234"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"234"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"234"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"234"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"234"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"234"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"234"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"234"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"234"},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"234"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"234"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"234"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"234"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"234"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"234"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"445","messages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"447","messages":"448","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"234"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"234"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"234"},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"234"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"234"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"234"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"234"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"234"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"234"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"234"},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"234"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"234"},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"234"},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"234"},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497","usedDeprecatedRules":"234"},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500","usedDeprecatedRules":"234"},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"234"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"234"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},"D:\\GFS_Trace\\src\\index.js",[],["513","514"],"D:\\GFS_Trace\\src\\i18nextInit.js",[],"D:\\GFS_Trace\\src\\App.js",["515","516","517","518"],"D:\\GFS_Trace\\src\\reportWebVitals.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Dashboard\\Dashboard.js",[],["519","520"],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\farms.js",[],"D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Custom.js",["521","522","523","524","525","526","527","528"],"import React from 'react'\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DateRangePicker from '@mui/lab/DateRangePicker';\r\nimport Box from '@mui/material/Box';\r\nimport ReportTableDetails from './ReportTableDetails';\r\nimport { Grid } from '@mui/material';\r\n\r\nfunction Custom() {\r\n  const [field, setfield] = React.useState(\"\");\r\n  const [value, setValue] = React.useState([null, null]);\r\n  const handleChange = (event) => {\r\n    setfield(event.target.value);\r\n  };\r\n  return (\r\n    <div>\r\n      <Grid container>\r\n        <Grid item xs={3}>\r\n          <h1 style={{paddingLeft: \"30px\", paddingTop: \"20px\"}}>Custom Reports</h1>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <br />\r\n          <select class=\"ui dropdown\" style={{ width: 200, backgroundColor: 'lightgreen', color: 'black' }} onChange={handleChange}>\r\n            <option value=\"\" >Farms</option>\r\n            <option value={2} >Paddocks</option>\r\n            <option value={3} >Equipment</option>\r\n            <option value={4} >Grain</option>\r\n            <option value={5}>Chemicals</option>\r\n            <option value={6} >Fuel</option>\r\n            <option value={7}>Fertilisers</option>\r\n          </select>\r\n        </Grid>\r\n\r\n        {/* <Grid item xs={5}>\r\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <div>\r\n              <Typography sx={{ mt: 2, mb: 1 }}>Date Range </Typography>\r\n              <DateRangePicker\r\n                calendars={1}\r\n                value={value}\r\n                onChange={(newValue) => {\r\n                  setValue(newValue);\r\n                }}\r\n                renderInput={(startProps, endProps) => (\r\n                  <React.Fragment>\r\n                    <TextField variant=\"standard\" {...startProps}/>\r\n                    <Box sx={{ mx: 2 }}> ~ </Box>\r\n                    <TextField variant=\"standard\" {...endProps} />\r\n                  </React.Fragment>\r\n                )}\r\n\r\n              />\r\n            </div>\r\n          </LocalizationProvider>\r\n        </Grid> */}\r\n      </Grid>\r\n      <br />\r\n      <br />\r\n      {/* <Segment attached='bottom'> */}\r\n      <div><ReportTableDetails dataValue={field} /></div>\r\n      {/* </Segment> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Custom\r\n","D:\\GFS_Trace\\src\\components\\Layout\\Structure.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Chemicals\\Chemical.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Job\\job.js",["529","530","531","532","533","534","535"],"import React, { useState } from \"react\";\r\nimport MaterialTable, { MTableCell }  from \"material-table\";\r\nimport { Checkbox, Modal, Icon, Form, Button, Input } from \"semantic-ui-react\";\r\nimport \"./job.css\";\r\nimport '../Pages.css';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport {useTranslation,Trans} from 'react-i18next';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Useform} from './Useform';\r\nimport Select from './controls/Select';\r\nimport SelectCheck from './controls/SelectCheck';\r\nimport *as jobAssign from './services/JobAssign';\r\nimport Category from './controls/Category';\r\nimport MyDatePicker from './controls/MyDatePicker';\r\nimport { Grid,TextField, Fade, FormControl, InputLabel, MenuItem, Select as MuiSelect } from '@material-ui/core';\r\nimport './destxt.css'\r\nimport { TextareaAutosize } from '@mui/material';\r\n\r\nimport {\r\n  jobData_withoutcomplete,\r\n  jobData_withcomplete,\r\n} from \"../../../Data/JobData\";\r\n\r\nconst initialValues = {\r\n    creator: '',\r\n    assigned: '',\r\n    category: '',\r\n    dueDate: new Date(),\r\n    priority: '',\r\n    started: '',\r\n    completed: '',\r\n    restartjob: '',\r\n    description: \"\",\r\n    notes: \"\",\r\n}\r\n\r\nexport default function Job() {\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n   \r\n\r\n  const [selected, toggleselected] = useState(false);\r\n  const [rowdatas, setrowdatas] = React.useState({});\r\n  const [newedit, setnewedit] = React.useState(true);\r\n  const {t} =useTranslation();\r\n  \r\n  const columns = [\r\n    {\r\n\r\n      title: t('jobs.status',\"Status\"),\r\n      field: \"status\",\r\n     \r\n     \r\n      lookup: { '0': <Trans i18nKey=\"jobs.raised\">Raised</Trans>,\r\n      '1': t('jobs.raisedandassigned','Raised And Assigned'),\r\n      '2': t('jobs.inprogress','In Progress'),\r\n      '3': t('jobs.onhold','On Hold'),\r\n      '4': t('jobs.completed','Completed'),\r\n\r\n      } ,\r\n      render: rowData => {\r\n        return <Tooltip title={rowData.status} placement=\"bottom-start\" arrow>\r\n           </Tooltip>            \r\n     },\r\n      render: rowData => {\r\n        switch (rowData.status) {\r\n        case '0':\r\n                return <Icon name='blue circle outline' size='large'/>\r\n        case '4':\r\n                return <Icon name='green circle' size='large'/>\r\n        case '1':\r\n                return <Icon name='blue circle'size='large'/>\r\n        case '3':\r\n               return <Icon name='red circle'size='large'/>\r\n        case '2':\r\n               return <Icon name='orange circle'size='large'/>\r\n      default:\r\n        return <></>\r\n          }\r\n        }\r\n\r\n  \r\n},\r\n\r\n    { title: t('jobs.priority','Priority'), field: \"priority\" ,\r\n    lookup: { '0': t('jobs.low','Low'), \r\n    '1': t('jobs.normal','Normal'), \r\n    '2': t('jobs.high','High'), \r\n    '3': t('jobs.safety','Safety')},\r\n\r\n    render: rowData => {\r\n      switch (rowData.priority) {\r\n        case '0':\r\n           return <Icon name='angle down'size='large'/>\r\n        case '1':\r\n           return <Icon name='blue angle up'size='large'/>\r\n        case '2':\r\n           return <Icon name='red angle double up'size='large'/>\r\n   \r\n        case '3':\r\n           return <Icon name='orange exclamation triangle'size='large'/>\r\n    default:\r\n      return <></>\r\n    }}\r\n  },\r\n\r\n    { title: t('jobs.description','Description'), field: \"description\" },\r\n    { title: t('jobs.category','Category'), field: \"category\" ,\r\n    lookup: { '0': 'None', '1': 'Equipment', '2': 'Paddock', '3': 'Fuel Tank', '4': 'Silo', '5': 'Livestock'},},\r\n    { title: t('jobs.asset','Asset'), field: \"asset\" },\r\n    { title: t('jobs.duedate','Due Date'), field: \"duedate\", type:\"date\", filtering: false },\r\n    { title: t('jobs.lastupdate','Last Update'), field: \"lastupdate\", type:\"date\", filtering: false },\r\n\r\n    \r\n  ];\r\n \r\n  const {\r\n    values,\r\n    setValues,\r\n    handleInputChange\r\n} = Useform(initialValues);\r\n\r\nconst [bool, setbool] = React.useState(false);\r\nconst [status, setstatus] = React.useState(1);\r\nconst [startdate, setstartdate] = React.useState('None');\r\nconst [starttime, setstarttime] = React.useState('');\r\nconst [enddate, setenddate] = React.useState('None');\r\nconst [endtime, setendtime] = React.useState('');\r\nconst [img, setimg] = React.useState(<Icon name='blue circle outline' size='large'/>);\r\nconst date = \"\";\r\nvar d = 3;\r\nconst [checked, setChecked] = React.useState(false);\r\n\r\nconst handleChange = (event) => {\r\n    setstatus(event.target.value);\r\n    d = event.target.value;\r\n    setimg(jobAssign.getStatus()[d - 1].icon);\r\n    if (d == 3 || (status <= 2 && d > 3)) {\r\n        const current = new Date();\r\n        const date = current.toLocaleDateString('en-GB',\r\n            {\r\n                day: '2-digit', month: 'long', year: 'numeric'\r\n            }).replace(/ /g, ' ');\r\n        setstartdate(date);\r\n        setstarttime(current.toLocaleTimeString(\"en-US\",\r\n            {\r\n                hour: \"2-digit\",\r\n                minute: \"2-digit\",\r\n            }));\r\n    }\r\n    if (d == 5) {\r\n        const current = new Date();\r\n        setChecked(true);\r\n        setbool(true);\r\n        const date = current.toLocaleDateString('en-GB',\r\n            {\r\n                day: '2-digit', month: 'long', year: 'numeric'\r\n            }).replace(/ /g, ' ');\r\n        setenddate(date);\r\n        setendtime(current.toLocaleTimeString(\"en-US\",\r\n            {\r\n                hour: \"2-digit\",\r\n                minute: \"2-digit\",\r\n            }));\r\n\r\n    }\r\n\r\n};\r\n\r\nconst handleClick = (e) => {\r\n    setChecked(false);\r\n    setbool(false);\r\n    setenddate('None');\r\n    setendtime('');\r\n    setstatus(3);\r\n    setimg(jobAssign.getStatus()[2].icon);\r\n}\r\n\r\n\r\n  return (\r\n    <div  className= \"table-size\">\r\n    \r\n    <div className= \"subheader\">\r\n             \r\n\r\n        <h1 style={{\"color\": \"black\", \"margin-bottom\":\"0px\"}}><Trans i18nKey=\"jobs.heading\">Jobs</Trans> </h1><span>&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n\r\n      \r\n        <div className=\"toggle-switch\">\r\n          <Checkbox\r\n            toggle\r\n            onClick={() => toggleselected(!selected)}\r\n            checked={selected}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"completed\"><Trans i18nKey=\"general.showcompleted\">Show Completed</Trans></div>\r\n\r\n      </div>\r\n      <Modal onClose={() => setOpen(false)} open={open} as={Form}  size='small'>\r\n        <Modal.Header>\r\n          {newedit === true ? \"New Job\" : \"Edit Job\"}\r\n        </Modal.Header>\r\n        <Modal.Content>\r\n        \r\n        <Form>\r\n             <InputLabel>CREATOR</InputLabel>\r\n                <FormControl fullWidth>\r\n                    <TextField                    \r\n                        name=\"creator\"\r\n                        value=\"JESTEENA JOSE\"\r\n                        variant=\"standard\"\r\n                        fluid\r\n                        InputProps={{\r\n                            readOnly: true,\r\n                          }}\r\n                        onChange={handleInputChange}\r\n                        defaultValue=\"\"\r\n                    />\r\n                </FormControl>\r\n                    <br/><br/>\r\n                   \r\n                    <SelectCheck\r\n                        name=\"assigned\"\r\n                        label=\"ASSIGNED\"\r\n                        value={values.assigned}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <br /><br />\r\n                    <Category\r\n                        name=\"category\"\r\n                        label=\"Category\"\r\n                        value={values.category}\r\n                        onChange={handleInputChange}\r\n                        options={jobAssign.getCategory()}\r\n                        \r\n                    />\r\n                    <br /><br />\r\n                  \r\n                    <InputLabel>DUE DATE</InputLabel>\r\n                   \r\n                            <MyDatePicker\r\n                                name=\"dueDate\"\r\n                                \r\n                                value={values.dueDate}\r\n                                onChange={handleInputChange}\r\n                                defaultValue={rowdatas.duedate}\r\n                            />\r\n                      <br /><br /> <br />\r\n                        \r\n                            <Select\r\n                                name=\"priority\"\r\n                                label=\"PRIORITY\"\r\n                                value={values.priority}\r\n                                \r\n                                onChange={handleInputChange}\r\n                                options={jobAssign.getPriority()}\r\n                                \r\n                            />    \r\n                    <br /> <br />\r\n                    <Grid container >\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={6} sm={6}>\r\n                                <InputLabel>STARTED</InputLabel>\r\n                                <p>{startdate}</p>\r\n                                <p>{starttime}</p>\r\n                            </Grid>\r\n                            \r\n                            <Grid item xs={6} sm={6}>\r\n                                <InputLabel>COMPLETED</InputLabel>\r\n                                <p>{enddate}</p>\r\n                                <p>{endtime}</p>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <br /><br />  <br /><br />\r\n                        <Grid container spacing={0} alignItems=\"center\">\r\n                            <Grid item xs={0} sm={0} md={0}>\r\n                                <br />\r\n                                {img}\r\n                            </Grid>\r\n                            <Grid item xs={30} md={4}>\r\n                                <FormControl fullWidth\r\n                                    variant=\"standard\">\r\n                                    <InputLabel>STATUS</InputLabel>\r\n                                    <MuiSelect\r\n                                        label=\"STATUS\"\r\n                                        name=\"status\"\r\n                                        value={status}\r\n                                        onChange={handleChange}\r\n                                        inputProps={{ readOnly: bool }}>\r\n                                        {\r\n                                            jobAssign.getStatus().map(\r\n                                                item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>)\r\n                                            )\r\n                                        }\r\n                                    </MuiSelect>\r\n                                </FormControl>\r\n                                </Grid>\r\n                            <Grid item xs={30} md={5}>\r\n                                <Fade in={checked}>\r\n                                    <p style={{cursor:'pointer', paddingLeft:'95px', color:'green'}} onClick={handleClick}>RE-START JOB</p>\r\n                                </Fade>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid >\r\n                    <br />\r\n                    <div className=\"des\">\r\n                        <label>DESCRIPTION</label>\r\n                    </div>\r\n                    <br />\r\n                    <TextareaAutosize style={{border:\"none\",outline:\"none\",width:650, height:200}}/>\r\n                    <div className=\"des\">\r\n                        <label>NOTES</label>\r\n                    </div>\r\n                    <br />\r\n                    <TextareaAutosize style={{border:\"none\",outline:\"none\",width:650, height:200}}/>\r\n        </Form>\r\n            </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button type=\"submit\" color=\"black\" onClick={() => setOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            content=\"Save\"\r\n            labelPosition=\"right\"\r\n            icon=\"checkmark\"\r\n            onClick={() => {\r\n              setOpen(false);\r\n             \r\n            }}\r\n            positive\r\n          />\r\n        </Modal.Actions>\r\n      </Modal>\r\n      <div className=\"equipment-table\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={selected ? jobData_withcomplete : jobData_withoutcomplete}\r\n          \r\n          localization={{\r\n            toolbar:{\r\n              searchTooltip:t('materialtable.searchtooltip','Search'),\r\n              searchPlaceholder:t('materialtable.searchplaceholder','Search')\r\n            },\r\n            header:{\r\n              actions:t('materialtable.headeractions','Actions')\r\n\r\n            },\r\n            body:{\r\n              addTooltip:t('materialtable.bodyaddtooltip','Add'),\r\n              deleteTooltip:t('materialtable.bodydeletetooltip','Delete'),\r\n              editTooltip:t('materialtable.edittooltip','Edit'),\r\n              emptyDataSourceMessage:t('materialtable.emptydatasourcemessage','No records to diplay'),\r\n              editRow:{\r\n                deleteText:t('materialtable.deletetext','Are you sure u want to delete?'),\r\n                cancelTooltip:t('materialtable.editrowcanceltip','Cancel'),\r\n                saveTooltip:t('materialtable.editrowsavetooltip','Save')\r\n              },\r\n              filterRow:{\r\n                filterTooltip:t('materialtable.feltertooltip','Filter')\r\n              }\r\n            },\r\n            pagination:{\r\n              previousTooltip:t('materialtable.previoustooltip','Previous Page'),\r\n              nextTooltip:t('materialtable.nexttooltip','Next Page'),\r\n              labelRowsSelect:t('materialtable.labelrowselect','rows')\r\n              \r\n            }\r\n          }}\r\n\r\n          options={{\r\n            showTitle: false,\r\n            paging: true,\r\n            pageSizeOptions: [2, 5, 10, 15, 20],\r\n            paginationType: \"stepped\",\r\n            showFirstLastPageButtons: false,\r\n            filtering: true,\r\n            actionsColumnIndex:-1\r\n          }}\r\n           components={{\r\n          Cell: (props) => (\r\n            <Tooltip placement=\"bottom\" title={props.value ? props.value : ''}>\r\n              <MTableCell {...props} />\r\n            </Tooltip>       /// Add translation for tooltip also\r\n          ),\r\n        }}\r\n          actions={[\r\n          {\r\n            icon: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n            isFreeAction: true,\r\n            onClick: () => {\r\n                setnewedit(true);\r\n                setrowdatas({});\r\n                setOpen(true);\r\n              },\r\n          },\r\n          {\r\n            icon: () => <CreateIcon color=\"action\" />,\r\n           \r\n            onClick: (rowData, e) => {\r\n                setnewedit(false);\r\n                setrowdatas(e);\r\n                setOpen(true);\r\n              },\r\n          },\r\n          {\r\n            icon: () => <DeleteIcon color=\"action\" />\r\n          }\r\n          ]}\r\n        ></MaterialTable>        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Fertiliser\\FertiliserTable.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Livestock\\LiveStock.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Equipments\\Equipments.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Nozzles\\Nozzles.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\Spraylogs\\Spraylogs.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\WaterLicence\\WaterLicence.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Users\\Users.js",["536"],"import React from \"react\";\r\nimport MaterialTable, { Column } from \"material-table\";\r\nimport \"../../Pages.css\";\r\nimport CreateIcon from \"@mui/icons-material/Create\";\r\nimport AddCircleRoundedIcon from \"@mui/icons-material/AddCircleRounded\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport UserData from \"../../../../Data/UserData\";\r\nimport { Modal, Button, Dropdown, Form } from \"semantic-ui-react\";\r\n\r\nconst options = [\r\n  { key: \"payroll\", text: \"Payroll\", value: \"Payroll\" },\r\n  { key: \"add/editusers\", text: \"Add/Edit Users\", value: \"Add/Edit Users\" },\r\n  { key: \"graininventory\", text: \"Grain Inventory\", value: \"Grain Inventory\" },\r\n  { key: \"graincontracts\", text: \"Grain Contracts\", value: \"Grain Contracts\" },\r\n  {\r\n    key: \"chemicalinventory\",\r\n    text: \"Chemical Inventory\",\r\n    value: \"Chemical Inventory\",\r\n  },\r\n  {\r\n    key: \"fertiliserinventory\",\r\n    text: \"Fertiliser Inventory\",\r\n    value: \"Fertiliser Inventory\",\r\n  },\r\n  { key: \"fuelinventory\", text: \"Fuel Inventory\", value: \"Fuel Inventory\" },\r\n  { key: \"waterinventory\", text: \"Water Inventory\", value: \"Water Inventory\" },\r\n  { key: \"spraylogs\", text: \"Spray Logs\", value: \"Spray Logs\" },\r\n  {\r\n    key: \"spraylogapproval\",\r\n    text: \"Spray Log Approval\",\r\n    value: \"Spray Log Approval\",\r\n  },\r\n  { key: \"plantings\", text: \"Plantings\", value: \"Plantings\" },\r\n  { key: \"spreadings\", text: \"Spreadings\", value: \"Spreadings\" },\r\n  { key: \"harvests\", text: \"Harvests\", value: \"Harvests\" },\r\n  {\r\n    key: \"paddockmiantainance\",\r\n    text: \"Paddock Miantainances\",\r\n    value: \"Paddock Maintainances\",\r\n  },\r\n  { key: \"irigation\", text: \"Irrigation\", value: \"Irrigation\" },\r\n  { key: \"grazing\", text: \"Grazing\", value: \"Grazing\" },\r\n];\r\nconst roles = [\r\n  { key: \"User\", text: \"User\", value: \"User\" },\r\n  { key: \"admin\", text: \"Admin\", value: \"Admin\" },\r\n];\r\n\r\nvar chipcolor = \"\";\r\n\r\nexport default function Users() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [confopen, setconfOpen] = React.useState(false);\r\n  const [rowdatas, setrowdatas] = React.useState({});\r\n  const [newedit, setnewedit] = React.useState(true);\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      render: (rowData) => rowData.first_name + \" \" + rowData.last_name,\r\n    },\r\n    {\r\n      title: \"User Role\",\r\n      field: \"user_role\",\r\n      render(rowdata) {\r\n        function Switches(rowdata) {\r\n          if (rowdata.user_role === \"Owner\") {\r\n            chipcolor = \"error\";\r\n          } else if (rowdata.user_role === \"User\") {\r\n            chipcolor = \"primary\";\r\n          } else {\r\n            chipcolor = \"warning\";\r\n          }\r\n\r\n          return (\r\n            <div>\r\n              <Chip color={chipcolor} label={rowdata.user_role} />\r\n            </div>\r\n          );\r\n        }\r\n        return Switches(rowdata);\r\n      },\r\n    },\r\n    {\r\n      title: \"Permissions\",\r\n      field: \"permissions\",\r\n    },\r\n    {\r\n      title: \"Phone\",\r\n      field: \"Phone\",\r\n    },\r\n    {\r\n      title: \"Email\",\r\n      field: \"email\",\r\n    },\r\n    {\r\n      title: \"Address\",\r\n\r\n      render: (rowData) =>\r\n        rowData.address_line1 +\r\n        \" \" +\r\n        rowData.address_line2 +\r\n        \" \" +\r\n        rowData.town +\r\n        \" \" +\r\n        rowData.state +\r\n        \" \" +\r\n        rowData.pin_code +\r\n        \" \" +\r\n        rowData.country,\r\n    },\r\n  ];\r\n  return (\r\n    <div className=\"table-size\">\r\n      <div className=\"subheader\">\r\n        <h1 style={{ color: \"black\", \"margin-bottom\": \"0px\" }}>Users </h1>\r\n        <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n      </div>\r\n      <Modal onClose={() => setOpen(false)} open={open} as={Form}>\r\n        <Modal.Header>\r\n          {newedit === true ? \"New User\" : \"Edit User\"}\r\n        </Modal.Header>\r\n        <Modal.Content>\r\n          <Form>\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Input\r\n                fluid\r\n                required\r\n                label=\"First name \"\r\n                placeholder=\"First name\"\r\n                id=\"form-input-first-name\"\r\n                defaultValue={rowdatas.first_name}\r\n              />\r\n              <Form.Input\r\n                required\r\n                fluid\r\n                label=\"Last name \"\r\n                placeholder=\"Last name\"\r\n                id=\"form-input-last-name\"\r\n                defaultValue={rowdatas.last_name}\r\n              />\r\n            </Form.Group>\r\n            {rowdatas.user_role === \"Owner\" ? (\r\n              \"\"\r\n            ) : (\r\n              <Form.Group inline>\r\n                <Form.Field required>\r\n                  <label>User Roles</label>\r\n                  <Dropdown\r\n                    widths={5}\r\n                    fluid\r\n                    clearable\r\n                    selection\r\n                    options={roles}\r\n                    defaultValue={(roles.value = rowdatas.user_role)}\r\n                  />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <label>User Permissions</label>\r\n                  <Dropdown\r\n                    multiple\r\n                    fluid\r\n                    selection\r\n                    options={options}\r\n                    defaultValue={(options.values = rowdatas.permissions)}\r\n                  />\r\n                </Form.Field>\r\n              </Form.Group>\r\n            )}\r\n\r\n            <Form.Input\r\n              fluid\r\n              width={6}\r\n              label=\"Phone Number\"\r\n              placeholder=\"Ph No\"\r\n              id=\"form-input-phone\"\r\n              defaultValue={rowdatas.Phone}\r\n            />\r\n            <Form.Input\r\n              fluid\r\n              width={6}\r\n              label=\"Email Address\"\r\n              placeholder=\"Email\"\r\n              id=\"form-input-email\"\r\n              defaultValue={rowdatas.email}\r\n            />\r\n            <Form.Input\r\n              fluid\r\n              width={6}\r\n              label=\"Address line 1\"\r\n              placeholder=\"line1\"\r\n              id=\"form-input-address-line1\"\r\n              defaultValue={rowdatas.address_line1}\r\n            />\r\n            <Form.Input\r\n              fluid\r\n              width={6}\r\n              label=\"Address line 2\"\r\n              placeholder=\"line2\"\r\n              id=\"form-input-address-line2\"\r\n              defaultValue={rowdatas.address_line2}\r\n            />\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Input\r\n                fluid\r\n                label=\"Town\"\r\n                placeholder=\"town\"\r\n                id=\"form-input-town\"\r\n                defaultValue={rowdatas.town}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                label=\"State\"\r\n                placeholder=\"state\"\r\n                id=\"form-input-state\"\r\n                defaultValue={rowdatas.state}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Input\r\n                fluid\r\n                label=\"Pin Code\"\r\n                placeholder=\"Pin\"\r\n                id=\"form-input-pincode\"\r\n                defaultValue={rowdatas.pin_code}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                label=\"Country\"\r\n                placeholder=\"country\"\r\n                id=\"form-input-Country\"\r\n                defaultValue={rowdatas.country}\r\n              />\r\n            </Form.Group>\r\n            <Form.Field>\r\n              <label>* indicates required fields</label>\r\n            </Form.Field>\r\n          </Form>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button type=\"submit\" color=\"black\" onClick={() => setOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            content=\"Save\"\r\n            labelPosition=\"right\"\r\n            icon=\"checkmark\"\r\n            onClick={() => {\r\n              setOpen(false);\r\n              setconfOpen(true);\r\n            }}\r\n            positive\r\n          />\r\n        </Modal.Actions>\r\n      </Modal>\r\n\r\n      <Modal size=\"tiny\" onClose={() => setconfOpen(false)} open={confopen}>\r\n        <Modal.Header>Confirm Login</Modal.Header>\r\n        <Modal.Content>\r\n          <Form>\r\n            <Form.Field>\r\n              <label>Email</label>\r\n              <input placeholder=\"Username\" />\r\n            </Form.Field>\r\n            <Form.Field>\r\n              <label>Password</label>\r\n              <input placeholder=\"password\" type=\"password\" />\r\n            </Form.Field>\r\n          </Form>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button color=\"black\" onClick={() => setOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            content=\"Login\"\r\n            labelPosition=\"right\"\r\n            icon=\"checkmark\"\r\n            onClick={() => setconfOpen(false)}\r\n            positive\r\n          />\r\n        </Modal.Actions>\r\n      </Modal>\r\n      <div className=\"equipment-table\"></div>\r\n      <MaterialTable\r\n        columns={columns}\r\n        data={UserData}\r\n        editable={{\r\n          onRowDelete: (selectedRow) => new Promise(() => {}),\r\n        }}\r\n        options={{\r\n          showTitle: false,\r\n          paging: true,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n          exportButton: false,\r\n          actionsColumnIndex: -1,\r\n        }}\r\n        actions={[\r\n          {\r\n            icon: () => <CreateIcon color=\"action\" />,\r\n            onClick: (rowData, e) => {\r\n              setnewedit(false);\r\n              setrowdatas(e);\r\n              setOpen(true);\r\n            },\r\n          },\r\n          {\r\n            icon: () => (\r\n              <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />\r\n            ),\r\n            tooltip: \"Add User\",\r\n            isFreeAction: true,\r\n            onClick: () => {\r\n              setnewedit(true);\r\n              setrowdatas({});\r\n              setOpen(true);\r\n            },\r\n          },\r\n        ]}\r\n        icons={{\r\n          Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n          Edit: () => <CreateIcon color=\"action\" />,\r\n          Delete: () => <DeleteIcon color=\"action\" />,\r\n        }}\r\n      ></MaterialTable>\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Spreading\\Spreading.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\Irrigation\\Irrigation.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\Planting\\Planting.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\Grazing\\Grazing.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\InventoryChemical.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\Harvest\\Harvest.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\Maintenance\\Maintenance.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\VetTreatment\\VetTreatment.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\InventoryWater.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryReport\\Inventoryreport.js",["537"],"import React from \"react\";\r\nimport \"../../Pages.css\";\r\nimport { FaFilter } from \"react-icons/fa\";\r\nimport GearIcon from \"mdi-react/GearIcon\";\r\n\r\nexport default function Inventoryreport() {\r\n  return (\r\n    <div className=\"table-size\">\r\n      <div className=\"subheader\">\r\n        <h1 style={{ color: \"black\" }}>Inventory Reports </h1>\r\n        <span>&nbsp;&nbsp;</span>\r\n        <div className=\"icon-align\">\r\n          <GearIcon\r\n            style={{ cursor: \"pointer\", color: \"black\" }}\r\n            onClick={console.log(\"modal opened\")}\r\n          ></GearIcon>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\farmTable.js",[],"D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\ReportTableDetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Job\\Useform.js",["538","539"],"import React,{useState} from 'react'\r\nimport {makeStyles} from '@material-ui/core';\r\n\r\n\r\nfunction Useform(initialValues) {\r\n\r\n    const [values, setValues] = useState(initialValues);\r\n    \r\n    const handleInputChange = e => {\r\n        const {name, value} = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n    }\r\n    return {\r\n        values,\r\n        setValues,\r\n        handleInputChange\r\n\r\n    }\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        '& .MuiFormControl-root': {\r\n            width: '100%',\r\n            margin: theme.spacing(1)\r\n        }\r\n    }\r\n}))\r\n\r\n\r\n\r\nexport {Useform}\r\n\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\InventoryWaterTable.js",["540"],"import React, {useState} from 'react'\r\nimport { Segment } from 'semantic-ui-react';\r\nimport {Menu} from 'semantic-ui-react';\r\nimport TableDetails from './Tabledetails'\r\nimport \"./Water.css\"\r\n\r\n\r\nexport default function InventoryWaterTable()  {\r\n    const [state, setState] = React.useState(\"STORAGES\"); \r\n\r\n      return (\r\n        <div className=\"water\">\r\n          <Menu pointing>\r\n            <Menu.Item\r\n              name='STORAGES'\r\n              active={state === 'STORAGES'}\r\n             color=\"green\"\r\n             onClick={() => setState(\"STORAGES\")}\r\n            />\r\n            <Menu.Item\r\n              name='INGOING'\r\n              active={state === 'INGOING'}\r\n              onClick={() => setState(\"INGOING\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='OUTGOING'\r\n              active={state === 'OUTGOING'}\r\n              onClick={() => setState(\"OUTGOING\")}\r\n              color=\"green\"\r\n            />\r\n          \r\n           \r\n          </Menu>\r\n          <Segment attached='bottom'>\r\n         <TableDetails dataValue={state}/>\r\n        </Segment>\r\n         \r\n        </div>\r\n    );\r\n  }","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\InventoryChemicalTable.js",["541"],"import React, {useState} from 'react'\r\nimport { Segment } from 'semantic-ui-react';\r\nimport {Menu} from 'semantic-ui-react';\r\nimport TableDetails from './Tabledetails'\r\nimport \"./Chemical.css\"\r\n\r\n\r\nexport default function InventoryChemicalTable()  {\r\n    const [state, setState] = React.useState(\"CHEMICALS\"); \r\n\r\n      return (\r\n        <div className=\"chemical\">\r\n          <Menu pointing>\r\n            <Menu.Item\r\n              name='CHEMICALS'\r\n              active={state === 'CHEMICALS'}\r\n             color=\"green\"\r\n             onClick={() => setState(\"CHEMICALS\")}\r\n            />\r\n            <Menu.Item\r\n              name='INGOING'\r\n              active={state === 'INGOING'}\r\n              onClick={() => setState(\"INGOING\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='OUTGOING'\r\n              active={state === 'OUTGOING'}\r\n              onClick={() => setState(\"OUTGOING\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='STOCKTAKE'\r\n              active={state === 'STOCKTAKE'}\r\n              onClick={() => setState(\"STOCKTAKE\")}\r\n              color=\"green\"\r\n            />\r\n          \r\n           \r\n          </Menu>\r\n          <Segment attached='bottom'>\r\n         <TableDetails dataValue={state}/>\r\n        </Segment>\r\n         \r\n        </div>\r\n    );\r\n  }","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\FarmListPopup\\farmpopup.js",[],"D:\\GFS_Trace\\src\\Data\\farmData.js",[],"D:\\GFS_Trace\\src\\Data\\ChemicalData.js",[],"D:\\GFS_Trace\\src\\Data\\MaintenanceData.js",[],"D:\\GFS_Trace\\src\\Data\\VetTreatmentData.js",[],"D:\\GFS_Trace\\src\\Data\\JobData.js",[],"D:\\GFS_Trace\\src\\Data\\HarvestData.js",[],"D:\\GFS_Trace\\src\\Data\\GrazingData.js",[],"D:\\GFS_Trace\\src\\components\\HeaderFooter\\Header.js",["542"],"import React from \"react\";\r\nimport farmsimple from \"../../images/logo.jpg\";\r\nimport \"./header.css\";\r\nimport {Trans} from 'react-i18next';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <img className=\"main-logo\" src={farmsimple} width=\"50\" height=\"50\" />\r\n      <div class=\"logoName\" style={{ color: \"rgb(79, 79, 79)\" }}>\r\n        <b>GFS</b> Trace\r\n      </div>\r\n      <div className=\"spacer\"></div>\r\n      <span className=\"userDetails\">Align Agith </span> |\r\n      \r\n     \r\n      <button className=\"logout\"><Trans i18nKey=\"header.logout\"> Logout\r\n        </Trans></button>\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Job\\controls\\Select.js",["543","544"],"import { FormControl, Grid, InputLabel, MenuItem, Select as MuiSelect } from '@material-ui/core';\r\nimport React from 'react'\r\nimport {Icon} from \"semantic-ui-react\";\r\n\r\nexport default function Select(props) {\r\n\r\n    const { name, label, value, onChange, options,restart } = props;\r\n    const [img, setimg] = React.useState(<Icon name='blue angle up'size='large'/>);\r\n    const [status, setstatus] = React.useState(2);\r\n    var d = 3;\r\n\r\n    const handleChange = (event) => {\r\n        setstatus(event.target.value);\r\n        d = event.target.value;\r\n        setimg(options[d - 1].icon);\r\n    }\r\n    return (\r\n        <Grid container spacing={0} alignItems=\"center\">\r\n            <Grid item>\r\n                <br />\r\n                {img}\r\n            </Grid>\r\n            <Grid item xs={30} md={4}>\r\n                <FormControl fullWidth\r\n                    variant=\"standard\">\r\n                    <InputLabel>{label}</InputLabel>\r\n                    <MuiSelect\r\n                        label={label}\r\n                        name={name}\r\n                        value={status}\r\n                        onChange={handleChange}\r\n                        inputProps={{ readOnly:restart }}>\r\n                        {\r\n                            options.map(\r\n                                item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>)\r\n                            )\r\n                        }\r\n                    </MuiSelect>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\HeaderFooter\\footer.js",["545","546","547"],"\r\nimport {React,useState} from 'react';\r\nimport YoutubeIcon from 'mdi-react/YoutubeIcon';\r\nimport \"./footer.css\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport FacebookIcon from 'mdi-react/FacebookIcon';\r\nimport TwitterIcon from 'mdi-react/TwitterIcon';\r\nimport { Dropdown } from 'semantic-ui-react';\r\n//import EyeIcon from 'mdi-react/EyeIcon';\r\n\r\nconst languageOptions =[\r\n  {key:'English',text:'English',value:'en'},\r\n  {key:'Malayalam',text:'മലയാളം',value:'ml'},\r\n  {key:'Tamil',text:'தமிழ்',value:'tm'}\r\n]\r\n\r\nexport default function Footer() {\r\n  const [language, setlanguage] = useState(\"en\")\r\n  const {i18n}=useTranslation();\r\n  const handleDropdown=(event,lang)=>{\r\n    setlanguage(lang.value)\r\n    i18n.changeLanguage(lang.value)\r\n   \r\n  }\r\n  return(\r\n       \r\n       \r\n      <div className='footer-main'>\r\n        <div><Dropdown\r\n        upward\r\n        selection\r\n        onChange={handleDropdown}\r\n        button\r\n        className=\"icon\"\r\n        labeled\r\n        icon=\"world\"\r\n        value={language}\r\n        scrolling\r\n        options={languageOptions}\r\n        placeholder=\"Language\"\r\n        /></div>\r\n    \r\n      \r\n     <a href=\"#\" className=\"margin-one footer-button footer-button-icon footer-button-round button-color button-size-small\"><span className=\"footer-icon\"><FacebookIcon size={24} /></span></a>\r\n      \r\n      <a href=\"#\" className=\"margin-one footer-button footer-button-icon footer-button-round button-color button-size-small\"><span className=\"footer-icon\"><TwitterIcon size={24} /></span></a>\r\n      \r\n      <a href=\"#\" className=\"margin-one footer-button footer-button-icon footer-button-round button-color button-size-small\"><span className=\"footer-icon\"><YoutubeIcon size={24} /></span></a>\r\n      \r\n      <span style={{\"margin-left\": \"10px\", \"align-items\": \"center\", \"color\": \"rgb(79, 79, 79)\", \"top\": \"0\"}}> © 2021 \r\n    \r\n      </span>\r\n    </div>\r\n  \r\n     \r\n      );\r\n}\r\n\r\n","D:\\GFS_Trace\\src\\components\\Sidebar\\Navbar.js",["548","549","550","551","552"],"D:\\GFS_Trace\\src\\components\\pages\\Job\\controls\\MyDatePicker.js",["553"],"import React from 'react'\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider ,MobileDatePicker} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\"\r\n\r\nexport default function MyDatePicker(props) {\r\n\r\n    const { name, label, value, onChange,restart } = props\r\n\r\n    const convertToDefEventPara=(name,value)=>({\r\n        target:{\r\n            name,value\r\n        }\r\n    })\r\n\r\n    return (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker disableToolbar variant=\"dialog\" inputVariant=\"standard\" autoOk=\"true\" clearable=\"true\"\r\n                label={label}\r\n                format=\"dd/MM/yyyy\"\r\n                name={name}\r\n                value={value}\r\n                onChange={date => onChange(convertToDefEventPara(name,date))}\r\n                inputProps={{ readOnly:restart }}\r\n            />\r\n\r\n\r\n        </MuiPickersUtilsProvider>\r\n    )\r\n}\r\n\r\n","D:\\GFS_Trace\\src\\components\\pages\\Job\\controls\\Category.js",["554","555","556","557","558","559","560","561","562","563"],"import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { InputLabel, MenuItem, Grid, Select as MuiSelect } from '@material-ui/core';\r\nimport question from './question mark.png'\r\n\r\nexport default function Category(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [category, setcategory] = React.useState(\"\");\r\n    const [cat, setcat] = React.useState({});\r\n    const [img, setimg] = React.useState(question);\r\n    const [img1, setimg1] = React.useState(question);\r\n    var changeCategory = 0;\r\n    var flag=0;\r\n    const arr = {};\r\n    const [field, setfield] = React.useState(\"CATEGORY\")\r\n    const [fieldfarm, setfieldfarm] = React.useState(\"\")\r\n    const [subfield, setSubfield] = React.useState('NONE');\r\n    const [fieldval, setfieldval] = React.useState(\"CATEGORY\")\r\n    const [subfieldval, setSubfieldval] = React.useState('NONE');\r\n    const [c, setc] = React.useState({});\r\n\r\n    const handleChange = (event, value) => {\r\n        setcategory(event.target.value);\r\n        changeCategory = event.target.value;\r\n        setfieldval(value.props.children)\r\n        setcat({})\r\n        flag=0;\r\n        const arr = options.filter(\r\n            a => (a.id === changeCategory)\r\n        )\r\n        if (changeCategory != \"\") {\r\n            setc(arr[0].data);\r\n            setSubfieldval(\"\");\r\n            setfieldfarm(\"\");\r\n            setimg1(options[changeCategory - 1].icon);\r\n        }\r\n        else{\r\n            setc({});\r\n            setfieldval(\"CATEGORY\")\r\n            setSubfieldval(\"None\");\r\n            setfieldfarm(\"\");\r\n            setimg1(question);\r\n        }\r\n    };\r\n\r\n    const handleChange1 = (event) => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n        setcat(values => ({ ...values, [name]: value }))\r\n        console.log(cat);\r\n        if (name == \"Farm\") {\r\n            setfieldfarm(value + \" : \");\r\n            flag=1;\r\n        }\r\n        else {\r\n            setSubfieldval(value);\r\n        }\r\n    }\r\n    const handleClickOpen = () => {\r\n        if (!restart) {\r\n            setOpen(true);\r\n        }\r\n    };\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason !== 'backdropClick') {\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleOk = (event, reason) => {\r\n        if (reason !== 'backdropClick') {\r\n            if (subfieldval==\"\") {\r\n                alert(\"No \"+fieldval+\" Selected\")\r\n            }\r\n            else{\r\n                if(fieldfarm!=\"\"){\r\n                    setfield(fieldval);\r\n                    setSubfield(fieldfarm + subfieldval);\r\n                    setimg(img1)\r\n                    setOpen(false);\r\n                }\r\n                else{\r\n                    if(category==1 ||category==5){\r\n                        setfield(fieldval);\r\n                        setSubfield(fieldfarm + subfieldval);\r\n                        setimg(img1)\r\n                        setOpen(false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const { name, label, value, onChange, options, restart } = props;\r\n    return (\r\n        <div>\r\n            <Button color=\"inherit\" onClick={handleClickOpen} size=\"large\" fullWidth=\"true\">\r\n                <Grid container spacing={0}>\r\n                    <Grid item xs={0} sm={0} md={0}>\r\n                        <img src={img} className=\"img\" alt=\"tractor\"></img>\r\n                    </Grid>\r\n                    <Grid item xs={6} md={3}>\r\n                        <InputLabel>{field}</InputLabel>\r\n                        <p>{subfield}</p>\r\n                    </Grid>\r\n                </Grid>\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>Job Category</DialogTitle>\r\n                <DialogContent >\r\n                    <Box component=\"form\" sx={{ display: 'grid' }}>\r\n                        <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 420 }}>\r\n                            <InputLabel>{label}</InputLabel>\r\n                            <MuiSelect\r\n                                label={label}\r\n                                name={name}\r\n                                value={category}\r\n                                onChange={handleChange}\r\n                                displayEmpty>\r\n                                <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                {\r\n                                    options.map(\r\n                                        item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>)\r\n                                    )\r\n                                }\r\n                            </MuiSelect>\r\n                        </FormControl>\r\n                        {\r\n                            Object.entries(c).map(\r\n                                ([key, val]) => (\r\n                                    <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 420 }}>\r\n                                        <InputLabel>{key}</InputLabel>\r\n                                        <MuiSelect\r\n                                            name={key}\r\n                                            label={key}\r\n                                            value={cat[key]}\r\n                                            onChange={handleChange1}\r\n                                        >\r\n                                            {\r\n                                                val.map(\r\n                                                    (item, index) => (<MenuItem key={index} value={item}>{item}</MenuItem>)\r\n                                                )\r\n                                            }\r\n                                        </MuiSelect>\r\n                                    </FormControl>)\r\n                            )\r\n                        }\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>CANCEL</Button>\r\n                    <Button onClick={handleOk}>SAVE</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Job\\controls\\SelectCheck.js",["564"],"import React from 'react'\r\nimport { FormControl, InputLabel, MenuItem, Select as MuiSelect } from '@material-ui/core';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nconst names = [\r\n  'Oliver Hansen',\r\n  'Van Henry',\r\n  'April Tucker',\r\n  'Ralph Hubbard',\r\n  'Omar Alexander',\r\n  'Kelly Snyder',\r\n];\r\n\r\nexport default function SelectCheck(props) {\r\n  const { name, label, value,restart} = props;\r\n  const [personName, setPersonName] = React.useState([]);\r\n\r\n  const handleChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setPersonName(\r\n      // On autofill we get a the stringified value.\r\n      typeof value === 'string' ? value.split(',') : value,\r\n    );\r\n  };\r\n  return (\r\n    <FormControl fullWidth\r\n      variant=\"standard\">\r\n      <InputLabel>{label}</InputLabel>\r\n      <MuiSelect\r\n        label={label}\r\n        multiple\r\n        name={name}\r\n        value={personName}\r\n        onChange={handleChange}\r\n        renderValue={(selected) => selected.join(', ')}\r\n        MenuProps={MenuProps}\r\n        inputProps={{ readOnly:restart }}\r\n      >\r\n        {names.map((name) => (\r\n          <MenuItem key={name} value={name}>\r\n            <Checkbox checked={personName.indexOf(name) > -1} />\r\n            <ListItemText primary={name} />\r\n          </MenuItem>\r\n        ))}\r\n      </MuiSelect>\r\n    </FormControl>\r\n  )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Job\\services\\JobAssign.js",[],"D:\\GFS_Trace\\src\\Data\\PlantingData.js",[],"D:\\GFS_Trace\\src\\Data\\IrrigationData.js",[],"D:\\GFS_Trace\\src\\Data\\SpreadingData.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Nozzles\\NTable.js",[],"D:\\GFS_Trace\\src\\Data\\UserData.js",[],"D:\\GFS_Trace\\src\\Data\\SpraylogsData.js",[],"D:\\GFS_Trace\\src\\Data\\EquipmentData.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\tableDetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tabledetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\FarmReport.js",["565","566","567","568","569","570","571","572","573","574","575","576","577"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { farmreport_data } from './ReportTableData';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Grid } from '@mui/material';\r\nimport { Dropdown } from 'semantic-ui-react'\r\nimport Export from './export.png';\r\nfunction FarmReport() {\r\n  const [data, setData] = React.useState(farmreport_data);\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [activity, setactivity] = React.useState(false);\r\n  let farms = null;\r\n  let column=null;\r\n  const type = [\"fa1\", \"fa2\", \"fa3\"];\r\n  const [field, setfield] = React.useState(\"\");\r\n  const options = [\r\n    { key: 'Approved', text: 'Approved', value: 'Approved' },\r\n    { key: 'Not Approved', text: 'Not Approved', value: 'Not Approved' },\r\n    { key: 'Charged Out', text: 'Charged Out', value: 'Charged Out' },\r\n    { key: 'Not Charged Out', text: 'Not Charged Out', value: 'Not Charged Out' },]\r\n  const handleChange = (event) => {\r\n    setfield(event.target.value);\r\n  };\r\n  const columns_all = [{\r\n    title: 'Date', field: 'date',\r\n  },\r\n  {\r\n    title: 'Status', field: 'status',\r\n  },\r\n  {\r\n    title: \"Contract\", field: \"contract\",\r\n  },\r\n  {\r\n    title: 'Activity', field: 'activity',\r\n  },\r\n  {\r\n    title: 'Description', field: 'description',\r\n  },\r\n  {\r\n    title: \"Farms\", field: \"farms\",\r\n  },\r\n  {\r\n    title: 'Paddocks', field: 'paddocks',\r\n  },\r\n  {\r\n    title: 'Area', field: 'area',\r\n  },\r\n  {\r\n    title: 'Completed', field: 'completed',\r\n  },\r\n  ]\r\n  const columns_all_activity = [{\r\n    title: 'Date', field: 'date',\r\n  },\r\n  {\r\n    title: 'Status', field: 'status',\r\n  },\r\n  {\r\n    title: \"Contract\", field: \"contract\",\r\n  },\r\n  {\r\n    title: 'Description', field: 'description',\r\n  },\r\n  {\r\n    title: \"Farms\", field: \"farms\",\r\n  },\r\n  {\r\n    title: 'Paddocks', field: 'paddocks',\r\n  },\r\n  {\r\n    title: 'Area', field: 'area',\r\n  },\r\n  {\r\n    title: 'Completed', field: 'completed',\r\n  },\r\n  ]\r\n  const columns = [{\r\n    title: 'Date', field: 'date',\r\n  },\r\n  {\r\n    title: 'Status', field: 'status',\r\n  },\r\n  {\r\n    title: \"Contract\", field: \"contract\",\r\n  },\r\n  {\r\n    title: 'Activity', field: 'activity',\r\n  },\r\n  {\r\n    title: 'Description', field: 'description',\r\n  },\r\n  {\r\n    title: 'Paddocks', field: 'paddocks',\r\n  },\r\n  {\r\n    title: 'Area', field: 'area',\r\n  },\r\n  {\r\n    title: 'Completed', field: 'completed',\r\n  },\r\n  ]\r\n  const columns_activity = [{\r\n    title: 'Date', field: 'date',\r\n  },\r\n  {\r\n    title: 'Status', field: 'status',\r\n  },\r\n  {\r\n    title: \"Contract\", field: \"contract\",\r\n  },\r\n  {\r\n    title: 'Description', field: 'description',\r\n  },\r\n  {\r\n    title: 'Paddocks', field: 'paddocks',\r\n  },\r\n  {\r\n    title: 'Area', field: 'area',\r\n  },\r\n  {\r\n    title: 'Completed', field: 'completed',\r\n  },\r\n  ]\r\n  if (selected == true) {\r\n    farms = <div><select class=\"ui dropdown\" style={{ width: 200 }}>{type.map((el) => <option key={el}>{el}</option>)}</select></div>;\r\n  }\r\n  if (selected == false && activity == false){\r\n      column=columns_all\r\n  }\r\n  else if(selected==false && activity==true){\r\n    column=columns_all_activity\r\n  }\r\n  else if(selected == true && activity == false){\r\n    column=columns\r\n  }\r\n  else if(selected == true && activity == true){\r\n    column=columns_activity\r\n  }\r\n  return (\r\n    <div>\r\n      <Grid container rowSpacing={1} columnSpacing={{ xs: 2, sm: 3, md: 4 }}>\r\n        <Grid item xs={2}>\r\n          <select class=\"ui dropdown\" style={{ width: 200 }} onChange={() => toggleselected(!selected)}>\r\n            <option value=\"\" >Activities - All Farms</option>\r\n            <option value={2} >Activities - Selective</option>\r\n          </select>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          {farms}\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <select class=\"ui dropdown\" style={{ width: 200 }} onChange={(event)=>{if (event.target.value==\"\") {\r\n            setactivity(false)\r\n          }\r\n          else{\r\n            setactivity(true)\r\n          }}}>\r\n            <option value=\"\" >All</option>\r\n            <option value={1} >Spray Logs</option>\r\n            <option value={2} >Spreading</option>\r\n            <option value={3} >Planting</option>\r\n            <option value={4} >Maintenance</option>\r\n            <option value={5}>Harvest</option>\r\n          </select>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n        <Dropdown multiple selection show options={options}/>\r\n        </Grid>\r\n        </Grid>\r\n        <br/><br/><br/><br/>\r\n      <MaterialTable title=\"Farms\"\r\n        data={data}\r\n        columns={column}\r\n        editable={{\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = newData;\r\n                setData([...dataUpdate]);\r\n\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                setData([...dataDelete]);\r\n\r\n                resolve()\r\n              }, 1000)\r\n            }),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          search: false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n          Edit: () => <CreateIcon color=\"action\" />,\r\n          Delete: () => <DeleteIcon color=\"action\" />\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FarmReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\FertiliserReport.js",["578","579"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { fertiliserreport_data } from './ReportTableData';\r\nimport Export from './export.png';\r\nfunction FertiliserReport() {\r\n    const [data, setData] = React.useState(fertiliserreport_data)\r\n    const columns = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: \"Category\", field: \"category\",\r\n      },\r\n      {\r\n        title: 'Fertilisers', field: 'fertilisers',\r\n      },\r\n      {\r\n        title: 'Operator', field: 'operator',\r\n      },\r\n      ]\r\n    return (\r\n        <div>\r\n      <MaterialTable title=\"Fertiliser\"\r\n        data={data}\r\n        columns={columns}\r\n        options={{\r\n            search:false,\r\n            exportButton: true,\r\n          }}\r\n          icons={{\r\n            Export: () => <img src={Export}></img>,\r\n          }}\r\n      />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default FertiliserReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\ChemicalReport.js",["580","581"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { chemicalreport_data } from './ReportTableData';\r\nimport Export from './export.png';\r\nfunction ChemicalReport() {\r\n    const [data, setData] = React.useState(chemicalreport_data)\r\n    const columns = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: \"Category\", field: \"category\",\r\n      },\r\n      {\r\n        title: 'Chemicals', field: 'chemicals',\r\n      },\r\n      {\r\n        title: 'Operator', field: 'operator',\r\n      },\r\n      ]\r\n    return (\r\n        <div>\r\n      <MaterialTable title=\"Chemicals\"\r\n        data={data}\r\n        columns={columns}\r\n        options={{\r\n          search:false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n        }}\r\n      />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ChemicalReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\FuelReport.js",["582","583"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { fuelreport_data } from './ReportTableData';\r\nimport Export from './export.png';\r\nfunction FuelReport() {\r\n    const [data, setData] = React.useState(fuelreport_data)\r\n    const columns = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: \"Category\", field: \"category\",\r\n      },\r\n      {\r\n        title: 'Fuel', field: 'fuel',\r\n      },\r\n      {\r\n        title: 'Amount', field: 'amount',\r\n      },\r\n      {\r\n        title: 'Operator', field: 'operator',\r\n      },\r\n      ]\r\n    return (\r\n        <div>\r\n      <MaterialTable title=\"Fuel\"\r\n        data={data}\r\n        columns={columns}\r\n        options={{\r\n          search:false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n        }}\r\n      />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default FuelReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\EquipmentReport.js",["584","585","586"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { equipmentreport_data } from './ReportTableData';\r\nimport { Grid } from '@mui/material';\r\nimport Export from './export.png';\r\nfunction EquipmentReport() {\r\n  const [data, setData] = React.useState(equipmentreport_data);\r\n  const [selected, toggleselected] = React.useState(false);\r\n  let options = null;\r\n  const type = [\"cat1\", \"cat2\", \"cat3\"];\r\n  if (selected == true) {\r\n    options = <div><div class=\"default text\">Equipment</div> <select class=\"ui dropdown\" style={{ width: 200 }}>{type.map((el) => <option key={el}>{el}</option>)}</select></div>;\r\n  }\r\n  const columns = [{\r\n    title: 'Date', field: 'date',\r\n  },\r\n  {\r\n    title: 'Amount', field: 'amount',\r\n  },\r\n  {\r\n    title: 'Type', field: 'type',\r\n  },\r\n  {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Task Category', field: 'category',\r\n  },\r\n  {\r\n    title: 'Task Description', field: 'description',\r\n  },\r\n  ]\r\n  const columns_all = [{\r\n    title: 'Date', field: 'date',\r\n  },\r\n  {\r\n    title: \"Equipment\", field: \"equipment\",\r\n  },\r\n  {\r\n    title: 'Amount', field: 'amount',\r\n  },\r\n  {\r\n    title: 'Type', field: 'type',\r\n  },\r\n  {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Task Category', field: 'category',\r\n  },\r\n  {\r\n    title: 'Task Description', field: 'description',\r\n  },\r\n  ]\r\n  return (\r\n    <div>\r\n      <Grid container rowSpacing={2} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\r\n        <Grid item xs={2}>\r\n          <br />\r\n          <select class=\"ui dropdown\" style={{ width: 200 }} onChange={() => toggleselected(!selected)}>\r\n            <option value=\"\" >Fuel Tickets - All</option>\r\n            <option value={2} >Fuel Ticket</option>\r\n          </select>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          {options}\r\n        </Grid>\r\n      </Grid>\r\n      <MaterialTable title=\"Equipment\"\r\n        data={data}\r\n        columns={selected ? columns : columns_all}\r\n        options={{\r\n          search: false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EquipmentReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\GrainReport.js",["587","588"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { grainreport_data } from './ReportTableData';\r\nimport Export from './export.png';\r\nfunction GrainReport() {\r\n    const [data, setData] = React.useState(grainreport_data)\r\n    const columns = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: \"Category\", field: \"category\",\r\n      },\r\n      {\r\n        title: 'Cultivar', field: 'cultivar',\r\n      },\r\n      {\r\n        title: 'Amount', field: 'amount',\r\n      },\r\n      {\r\n        title: 'Operators', field: 'operators',\r\n      },\r\n      ]\r\n    return (\r\n        <div>\r\n      <MaterialTable title=\"Grain\"\r\n        data={data}\r\n        columns={columns}\r\n        options={{\r\n          search:false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n        }}\r\n      />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default GrainReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tabledetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\PaddockReport.js",["589","590","591","592","593","594","595"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { paddockreport_data } from './ReportTableData';\r\nimport { Grid } from '@mui/material';\r\nimport Export from './export.png';\r\nfunction PaddockReport() {\r\n    const [data, setData] = React.useState(paddockreport_data)\r\n    const [field,setfield]=React.useState(\"\");\r\n    const [attribute,setattribute]=React.useState(\"\");\r\n    let columns=null;\r\n    const handleChange = (event) => {\r\n      setfield(event.target.value);\r\n    };\r\n    const columns_spray = [{\r\n      title: 'Date', field: 'date',\r\n    },\r\n    {\r\n        title: 'Status', field: 'status',\r\n      },\r\n      {\r\n        title: \"Contract\", field: \"contract\",\r\n      },\r\n      {\r\n        title: 'Description', field: 'description',\r\n      },\r\n      {\r\n        title: 'Chemicals', field: 'chemicals',\r\n      },\r\n      {\r\n        title: 'Completed', field: 'completed',\r\n      },\r\n      ]\r\n      const columns_spreading = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: 'Status', field: 'status',\r\n      },\r\n      {\r\n        title: \"Contract\", field: \"contract\",\r\n      },\r\n      {\r\n        title: 'Description', field: 'description',\r\n      },\r\n      {\r\n        title: 'Fertilisers', field: 'fertilisers',\r\n      },\r\n      {\r\n        title: 'Completed', field: 'completed',\r\n      },\r\n      ]\r\n      const columns_maintainance = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: 'Status', field: 'status',\r\n      },\r\n      {\r\n        title: \"Contract\", field: \"contract\",\r\n      },\r\n      {\r\n        title: 'Description', field: 'description',\r\n      },\r\n      {\r\n        title: 'Category', field: 'category',\r\n      },\r\n      {\r\n        title: 'Completed', field: 'completed',\r\n      },\r\n      ]\r\n      const columns_harvest = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: 'Status', field: 'status',\r\n      },\r\n      {\r\n        title: \"Contract\", field: \"contract\",\r\n      },\r\n      {\r\n        title: 'Description', field: 'description',\r\n      },\r\n      {\r\n        title: 'Completed', field: 'completed',\r\n      },\r\n      ]\r\n      if(attribute==\"\"){\r\n        columns=columns_spray\r\n      }\r\n      else if(attribute==\"3\" || attribute==\"2\"){\r\n        columns=columns_spreading\r\n      }\r\n      else if(attribute==\"4\"){\r\n        columns=columns_maintainance\r\n      }\r\n      else{\r\n        columns=columns_harvest\r\n      }\r\n    return (\r\n        <div>\r\n           <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\r\n           <Grid item xs={2}>\r\n        <select class=\"ui dropdown\" style={{ width: 200}} onChange={(e)=>setattribute(e.target.value)}>\r\n            <option value=\"\" >Spray Logs</option>\r\n            <option value={2} >Spreading</option>\r\n            <option value={3} >Planting</option>\r\n            <option value={4} >Maintenance</option>\r\n            <option value={5}>Harvest</option>\r\n          </select>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n        <select class=\"ui dropdown\" style={{ width: 200}} onChange={handleChange}>\r\n            <option value=\"\" >abc</option>\r\n            <option value={2} >pqr</option>\r\n          </select>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n        <select class=\"ui dropdown\" style={{ width: 200}} onChange={handleChange}>\r\n            <option value=\"\" >xyz</option>\r\n            <option value={2} >wxy</option>\r\n          </select>\r\n        </Grid>\r\n        </Grid>\r\n      <MaterialTable title=\"Paddocks\"\r\n        data={data}\r\n        columns={columns}\r\n        options={{\r\n          search:false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n        }}\r\n      />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default PaddockReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Livestock\\LsTable.js",["596"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\nexport default function LsTable() {\r\n  const [type, setType] = useState({});\r\n\r\n  const lsType = [\r\n    { id: 1, title: \"Cattle\" },\r\n    { id: 2, title: \"Bulls\" },\r\n    { id: 3, title: \"Sheep\" },\r\n    { id: 4, title: \"Horses\" },\r\n    { id: 5, title: \"Chickens\" },\r\n    { id: 6, title: \"Pigs\" },\r\n    { id: 7, title: \"Deer\" },\r\n    { id: 8, title: \"Goats\" },\r\n    { id: 9, title: \"Llamas\" },\r\n    { id: 10, title: \"Bees\" },\r\n  ];\r\n\r\n  const [data, setData] = useState([\r\n    {\r\n      type: \"1\",\r\n      names: \"abc\",\r\n\r\n      number: \"123\",\r\n      notes: \"xyz\",\r\n    },\r\n    {\r\n      type: \"2\",\r\n\r\n      names: \"pqrs\",\r\n\r\n      number: \"16343\",\r\n      notes: \"xykfz\",\r\n    },\r\n  ]);\r\n  const columns = [\r\n    {\r\n      title: \"Type\",\r\n      field: \"type\",\r\n      lookup: type,\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      field: \"names\",\r\n      validate: (rowData) => {\r\n        if (rowData.names === undefined || rowData.names === \"\") {\r\n          return \"Required\";\r\n        } else if (rowData.names.length < 3) {\r\n          return \"Name Should Contain Atleast 3 chars\";\r\n        }\r\n        return true;\r\n      },\r\n    },\r\n\r\n    {\r\n      title: \"Number\",\r\n      field: \"number\",\r\n    },\r\n    {\r\n      title: \"Notes\",\r\n      field: \"notes\",\r\n    },\r\n  ];\r\n  useEffect(() => {\r\n    const type = {};\r\n    lsType.map((row) => (type[row.id] = row.title));\r\n    setType(type);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"Livestock\"\r\n        data={data}\r\n        columns={columns}\r\n        editable={{\r\n          onRowAdd: (newRow) =>\r\n            new Promise((resolve, reject) => {\r\n              setData([...data, newRow]);\r\n              setTimeout(() => resolve(), 500);\r\n            }),\r\n          onRowUpdate: (newRow, oldRow) =>\r\n            new Promise((resolve, reject) => {\r\n              const updatedData = [...data];\r\n              updatedData[(oldRow, data.id)] = newRow;\r\n              setData(updatedData);\r\n              setTimeout(() => resolve(), 500);\r\n            }),\r\n          onRowDelete: (oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                setData([...dataDelete]);\r\n\r\n                resolve();\r\n              }, 1000);\r\n            }),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          showTitle: false,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n        }}\r\n        icons={{\r\n         \r\n          Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n          Edit: () => <CreateIcon color=\"action\" />,\r\n          Delete: () => <DeleteIcon color=\"action\" />\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\WaterStorageTable.js",[],"D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\ReportTableData.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\SiloTable.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\FueltankTable.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\PaddockTable.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\Outgoing.js",["597"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport Export from '../../../export.png';\r\nimport { outgoing_data } from '../../../../../Data/InventoryChemicalData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport './archived.css';\r\nexport default function Outgoing() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [data, setData] = React.useState(outgoing_data)\r\n  const columns = [{\r\n    title: 'Job Type', field: 'type'\r\n  },\r\n  {\r\n    title: 'Job Description', field: 'description',\r\n  },\r\n  {\r\n    title: 'Date', field: 'date',\r\n  }, {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Chemicals', field: 'chemicals',\r\n  },\r\n  {\r\n    title: 'Notes', field: 'notes',\r\n  }]\r\n  const columns_archived = [{\r\n    title: 'Job Type', field: 'type'\r\n  },\r\n  {\r\n    title: 'Job Description', field: 'description',\r\n  },\r\n  {\r\n    title: 'Date', field: 'date',\r\n  }, {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Chemicals', field: 'chemicals',\r\n  },\r\n  {\r\n    title: 'Notes', field: 'notes',\r\n  },\r\n  {\r\n    title: \"Archived\",\r\n    field: \"archived\",\r\n  },]\r\n  return (\r\n    <div>\r\n      <MaterialTable title=\"OUTGOING\"\r\n        data={data}\r\n        columns={selected ? columns_archived : columns}\r\n        editable={{\r\n          onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = newData;\r\n                setData([...dataUpdate]);\r\n\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                setData([...dataDelete]);\r\n\r\n                resolve()\r\n              }, 1000)\r\n            }),\r\n        }}\r\n        components={{\r\n          Toolbar: props => (\r\n            <div>\r\n              <MTableToolbar {...props} />\r\n              <div className=\"toggle-switch\">\r\n                <Checkbox\r\n                  toggle\r\n                  onClick={() => toggleselected(!selected)}\r\n                  checked={selected}\r\n                  label=\"Show Archived Tickets\"\r\n                />\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          paging: true,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n          Edit: () => <CreateIcon color=\"action\" />,\r\n          Export: () => <img src={Export}></img>,\r\n          Delete: () => <DeleteIcon color=\"action\" />\r\n         \r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\StockTake.js",["598"],"import React from 'react'\r\nimport MaterialTable,{ MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from '../../../export.png';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport { stocktake_data } from '../../../../../Data/InventoryChemicalData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nexport default function StockTake() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(stocktake_data)\r\n    const columns = [\r\n    {\r\n        title: 'Date', field: 'date',\r\n    }, {\r\n        title: 'Operator', field: 'operator',\r\n    },\r\n    {\r\n        title: 'Chemicals', field: 'chemicals',\r\n    },\r\n    {\r\n        title: 'Reported', field: 'report',\r\n    }]\r\n    const columns_archived = [\r\n      {\r\n          title: 'Date', field: 'date',\r\n      }, {\r\n          title: 'Operator', field: 'operator',\r\n      },\r\n      {\r\n          title: 'Chemicals', field: 'chemicals',\r\n      },\r\n      {\r\n          title: 'Reported', field: 'report',\r\n      },\r\n      {\r\n        title: \"Archived\",\r\n        field: \"archived\",\r\n      },]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"STOCKTAKE\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                  Toolbar: props => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\">\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n                icons={{\r\n                  Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                  Edit: () => <CreateIcon color=\"action\" />,\r\n                  Export: () => <img src={Export}></img>,\r\n                  Delete: () => <DeleteIcon color=\"action\" />\r\n                 \r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\Ingoing.js",["599"],"import React from 'react'\r\nimport MaterialTable,{ MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from '../../../export.png';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport { ingoing_data } from '../../../../../Data/InventoryChemicalData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nexport default function Ingoing() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(ingoing_data)\r\n    const columns = [{\r\n        title: 'Supplier', field: 'supplier'\r\n    },\r\n    {\r\n        title: 'Docket No.', field: 'docket',\r\n    },\r\n    {\r\n        title: 'Date', field: 'date',\r\n    }, {\r\n        title: 'Operator', field: 'operator',\r\n    },\r\n    {\r\n        title: 'Chemicals', field: 'chemicals',\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',\r\n    }]\r\n    const columns_archived = [{\r\n      title: 'Supplier', field: 'supplier'\r\n  },\r\n  {\r\n      title: 'Docket No.', field: 'docket',\r\n  },\r\n  {\r\n      title: 'Date', field: 'date',\r\n  }, {\r\n      title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n      title: 'Chemicals', field: 'chemicals',\r\n  },\r\n  {\r\n      title: 'Notes', field: 'notes',\r\n  },\r\n  {\r\n    title: \"Archived\",\r\n    field: \"archived\",\r\n  },]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"INGOING\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                  Toolbar: props => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\">\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n               \r\n                icons={{\r\n                  Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                  Edit: () => <CreateIcon color=\"action\" />,\r\n                  Export: () => <img src={Export}></img>,\r\n                  Delete: () => <DeleteIcon color=\"action\" />\r\n                 \r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\Chemicals.js",["600","601"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport Export from '../../../export.png';\r\nimport { chemicals_data } from '../../../../../Data/InventoryChemicalData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport './archived.css';\r\nexport default function Chemicals() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(chemicals_data)\r\n    const columns = [{\r\n        title: 'Name', field: 'name'\r\n    },\r\n    {\r\n        title: 'Resistance Group', field: 'resistancegrp',\r\n    },\r\n    {\r\n        title: 'Actives', field: 'actives',\r\n    }, {\r\n        title: 'Amount', field: 'amount',\r\n    }]\r\n    const columns_archived = [{\r\n        title: 'Name', field: 'name'\r\n    },\r\n    {\r\n        title: 'Resistance Group', field: 'resistancegrp',\r\n    },\r\n    {\r\n        title: 'Actives', field: 'actives',\r\n    }, {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    {\r\n        title: \"Archived\",\r\n        field: \"archived\",\r\n      },]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"CHEMICALS\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n\r\n                options={{\r\n                    \r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    filtering: true,\r\n                    actionsColumnIndex:-1\r\n                  }}\r\n                components={{\r\n                    Toolbar: props => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived Chemicals\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                  editable={{\r\n                    onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                    onRowUpdate:(newRow,oldRow)=> new Promise(()=>{}),\r\n                    onRowDelete:(selectedRow)=> new Promise(()=>{})\r\n                  }}\r\n                  icons={{\r\n                    Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Export: () => <img src={Export}></img>,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                   \r\n                  }}\r\n                \r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tables\\Ingoing.js",["602"],"import React from 'react'\r\nimport MaterialTable,{ MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\nimport Export from '../../../export.png';\r\nimport { ingoing_data } from '../../../../../Data/InventoryWaterData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport './archived.css';\r\nexport default function Ingoing() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(ingoing_data)\r\n    const columns = [{\r\n        title: 'Water Storage', field: 'water_storage'\r\n    },\r\n    {\r\n        title: 'Date/Time', field: 'date',\r\n    }, {\r\n        title: 'Operator', field: 'operator',\r\n    },\r\n    {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',\r\n    }]\r\n    const columns_archived = [{\r\n      title: 'Water Storage', field: 'water_storage'\r\n  },\r\n  {\r\n      title: 'Date/Time', field: 'date',\r\n  }, {\r\n      title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n      title: 'Amount', field: 'amount',\r\n  },\r\n  {\r\n    title: 'Notes', field: 'notes',\r\n},\r\n \r\n  {\r\n    title: \"Archived\",\r\n    field: \"archived\",\r\n  },]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"INGOING\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                  Toolbar: props => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\" style={{padding: '0px 20px'}}>\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n                icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    \r\n                      Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                      Edit: () => <CreateIcon color=\"action\" />,\r\n                      Delete: () => <DeleteIcon color=\"action\" />\r\n                     \r\n                   \r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tables\\Outgoing.js",["603"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from '../../../export.png';\r\nimport { outgoing_data } from '../../../../../Data/InventoryWaterData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport './archived.css';\r\nexport default function Outgoing() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [data, setData] = React.useState(outgoing_data)\r\n  const columns = [{\r\n    \r\n    title: 'Water Storage', field: 'water_storage'\r\n  },\r\n  {\r\n    title: 'Job Type', field: 'type'\r\n  },\r\n  {\r\n    title: 'Job Description', field: 'description',\r\n  },\r\n  {\r\n    title: 'Date/Time', field: 'date',\r\n  }, {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Amount', field: 'amount',\r\n  },\r\n  {\r\n    title: 'Notes', field: 'notes',\r\n  }]\r\n  const columns_archived = [{\r\n    title: 'Job Type', field: 'type'\r\n  },\r\n  {\r\n    title: 'Job Description', field: 'description',\r\n  },\r\n  {\r\n    title: 'Date', field: 'date',\r\n  }, {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Chemicals', field: 'chemicals',\r\n  },\r\n  {\r\n    title: 'Notes', field: 'notes',\r\n  },\r\n  {\r\n    title: \"Archived\",\r\n    field: \"archived\",\r\n  },]\r\n  return (\r\n    <div>\r\n      <MaterialTable title=\"OUTGOING\"\r\n        data={data}\r\n        columns={selected ? columns_archived : columns}\r\n        editable={{\r\n          onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = newData;\r\n                setData([...dataUpdate]);\r\n\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                setData([...dataDelete]);\r\n\r\n                resolve()\r\n              }, 1000)\r\n            }),\r\n        }}\r\n        components={{\r\n          Toolbar: props => (\r\n            <div>\r\n              <MTableToolbar {...props} />\r\n              <div className=\"toggle-switch\" style={{padding: '0px 20px'}}>\r\n                <Checkbox\r\n                  toggle\r\n                  onClick={() => toggleselected(!selected)}\r\n                  checked={selected}\r\n                  label=\"Show Archived\"\r\n                />\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          paging: true,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n          \r\n            Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n            Edit: () => <CreateIcon color=\"action\" />,\r\n            Delete: () => <DeleteIcon color=\"action\" />\r\n           \r\n         \r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tables\\Storages.js",["604"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport Export from '../../../export.png';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { storages_data } from '../../../../../Data/InventoryWaterData'\r\n\r\nexport default function Storages() {\r\n    const [data, setData] = React.useState(storages_data)\r\n    const columns = [{\r\n        title: 'Farms', field: 'farm'\r\n    },\r\n    {\r\n        title: 'Name', field: 'name',\r\n    },\r\n    {\r\n        title: 'Capacity', field: 'capacity',\r\n    }, {\r\n        title: 'Contents', field: 'contents',\r\n    }]\r\n    \r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"STORAGES\"\r\n                data={data}\r\n                columns={ columns}\r\n                editable={{\r\n                    onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                      onRowUpdate: (newData, oldData) =>\r\n                        new Promise((resolve, reject) => {\r\n                          setTimeout(() => {\r\n                            const dataUpdate = [...data];\r\n                            const index = oldData.tableData.id;\r\n                            dataUpdate[index] = newData;\r\n                            setData([...dataUpdate]);\r\n            \r\n                            resolve();\r\n                          }, 1000)\r\n                        }),\r\n                      onRowDelete: oldData =>\r\n                        new Promise((resolve, reject) => {\r\n                          setTimeout(() => {\r\n                            const dataDelete = [...data];\r\n                            const index = oldData.tableData.id;\r\n                            dataDelete.splice(index, 1);\r\n                            setData([...dataDelete]);\r\n            \r\n                            resolve()\r\n                          }, 1000)\r\n                        }),\r\n                    }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                    Toolbar: props => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                  icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    \r\n                      Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                      Edit: () => <CreateIcon color=\"action\" />,\r\n                      Delete: () => <DeleteIcon color=\"action\" />\r\n                     \r\n                   \r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\Data\\WaterStorageData.js",[],"D:\\GFS_Trace\\src\\Data\\SiloData.js",[],"D:\\GFS_Trace\\src\\Data\\FuelTankData.js",[],"D:\\GFS_Trace\\src\\Data\\PaddockData.js",[],"D:\\GFS_Trace\\src\\Data\\InventoryWaterData.js",["605","606","607","608"],"export const storages_data=[\r\n    {\r\n        farm:'abcdef',name:'asdwef',capacity:'5000L',contents:'Empty',\r\n        farm:'farm2',name:'d12ad',capacity:'50000L',contents:'Empty'\r\n    }\r\n];\r\n\r\nexport const ingoing_data=[];\r\n\r\nexport const outgoing_data=[];","D:\\GFS_Trace\\src\\Data\\InventoryChemicalData.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\InventoryFertilizer.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\FertiliserTable.js",["609"],"import React, {useState} from 'react'\r\nimport { Segment } from 'semantic-ui-react';\r\nimport {Menu} from 'semantic-ui-react';\r\nimport TableDetails from './Tabledetails'\r\nimport \"./Fertiliser.css\"\r\n\r\n\r\nexport default function FertiliserTable()  {\r\n    const [state, setState] = React.useState(\"FERTILISERS\"); \r\n\r\n      return (\r\n        <div className=\"fertiliser\">\r\n          <Menu pointing>\r\n            <Menu.Item\r\n              name='FERTILISERS'\r\n              active={state === 'FERTILISERS'}\r\n             color=\"green\"\r\n             onClick={() => setState(\"FERTILISERS\")}\r\n            />\r\n            <Menu.Item\r\n              name='INGOING'\r\n              active={state === 'INGOING'}\r\n              onClick={() => setState(\"INGOING\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='OUTGOING'\r\n              active={state === 'OUTGOING'}\r\n              onClick={() => setState(\"OUTGOING\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='STOKETAKE'\r\n              active={state === 'STOCKTAKE'}\r\n              onClick={() => setState(\"STOCKTAKE\")}\r\n              color=\"green\"\r\n            />\r\n          \r\n           \r\n          </Menu>\r\n          <Segment attached='bottom'>\r\n         <TableDetails dataValue={state}/>\r\n        </Segment>\r\n         \r\n        </div>\r\n    );\r\n  }","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tabledetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Outgoing.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Fertilisers.js",["610"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport { fertiliser_data } from './Tabledatas';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport './archived.css';\r\nexport default function Fertilisers() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(fertiliser_data)\r\n    const columns = [{\r\n        title: 'Name', field: 'name'\r\n    },\r\n    {\r\n        title: 'Form', field: 'form',\r\n    },\r\n    {\r\n        title: 'Nutrients', field: 'nutrients',\r\n    }, {\r\n        title: 'Amount', field: 'amount',\r\n    }]\r\n    const columns_archived = [{\r\n        title: 'Name', field: 'name'\r\n    },\r\n    {\r\n        title: 'Form', field: 'form',\r\n    },\r\n    {\r\n        title: 'Nutrients', field: 'nutrients',\r\n    }, {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    {\r\n        title: \"Archived\",\r\n        field: \"archived\",\r\n      },]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"FERTILISERS\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n\r\n                options={{\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                }}\r\n                components={{\r\n                    Toolbar: props => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived Fertilisers\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Ingoing.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\StockTake.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Tabledatas.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\GrainsTable.js",["611"],"import React, {useState} from 'react'\r\nimport { Segment } from 'semantic-ui-react';\r\nimport {Menu} from 'semantic-ui-react';\r\nimport TableDetails from './Tabledetails'\r\nimport \"./Grains.css\"\r\n\r\n\r\nexport default function GrainsTable()  {\r\n    const [state, setState] = React.useState(\"SILOS\"); \r\n\r\n      return (\r\n        <div  className= \"table-size\">\r\n    \r\n    <div className= \"subheader\">  \r\n   \r\n        <h1 style={{\"color\": \"black\"}}>Grain Inventory </h1><span>&nbsp;&nbsp;</span>\r\n  \r\n    </div>\r\n        <div className=\"chemical\">\r\n          <Menu pointing>\r\n            <Menu.Item\r\n              name='SILOS'\r\n              active={state === 'SILOS'}\r\n             color=\"green\"\r\n             onClick={() => setState(\"SILOS\")}\r\n            />\r\n            <Menu.Item\r\n              name='INGOING'\r\n              active={state === 'INGOING'}\r\n              onClick={() => setState(\"INGOING\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='OUTGOING'\r\n              active={state === 'OUTGOING'}\r\n              onClick={() => setState(\"OUTGOING\")}\r\n              color=\"green\"\r\n            />\r\n            \r\n            <Menu.Item\r\n              name='TRANSFER'\r\n              active={state === 'TRANSFER'}\r\n              onClick={() => setState(\"TRANSFER\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='CONTRACTS'\r\n              active={state === 'CONTRACTS'}\r\n              onClick={() => setState(\"CONTRACTS\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='TOTAL'\r\n              active={state === 'TOTAL'}\r\n              onClick={() => setState(\"TOTAL\")}\r\n              color=\"green\"\r\n            />\r\n          \r\n           \r\n          </Menu>\r\n          <Segment attached='bottom'>\r\n         <TableDetails dataValue={state}/>\r\n        </Segment>\r\n         </div>\r\n        </div>\r\n    );\r\n  }","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tabledetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Contracts.js",["612","613"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { Checkbox } from 'semantic-ui-react';\r\n\r\nexport default function Contracts() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState([\r\n        {status:\"asd\",contractNo:\"asd\",startDate:\"20/10/2021\",endDate:\"30/11/2021\",buyer:\"asd\",destination:\"asd\",commodity:\"asd\",fulfilled:\"asd\",quantity:\"asd\",grade:\"asd\",tolerence:\"asd\",notes:\"asd\"}\r\n    ])\r\n    const columns = [{\r\n        title: 'Status', field: 'status',\r\n    },\r\n    {\r\n        title: 'Contract No', field: 'contractNo',\r\n    },\r\n    {\r\n        title: 'Start Date', field: 'startDate',\r\n    }, {\r\n        title: 'End Date', field: 'endDate',\r\n    },\r\n    {\r\n        title: 'Buyer', field: 'buyer',\r\n    },\r\n    \r\n    {\r\n        title: 'Destination', field: 'destination',\r\n    },\r\n    {\r\n        title: 'Commodity', field: 'commodity',\r\n    },\r\n    {\r\n        title: 'Fulfilled', field: 'fulfilled',\r\n    },\r\n    {\r\n        title: 'Quantity', field: 'quantity',\r\n    },\r\n    {\r\n        title: 'Grade', field: 'grade',\r\n    },\r\n    {\r\n        title: 'Tolerence', field: 'tolerence',\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',\r\n    },\r\n    \r\n  ]\r\n  const columns_archived = [{\r\n    title: 'Status', field: 'status',\r\n},\r\n{\r\n    title: 'Contract No', field: 'contractNo',\r\n},\r\n{\r\n    title: 'Start Date', field: 'startDate',\r\n}, {\r\n    title: 'End Date', field: 'endDate',\r\n},\r\n{\r\n    title: 'Buyer', field: 'buyer',\r\n},\r\n\r\n{\r\n    title: 'Destination', field: 'destination',\r\n},\r\n{\r\n    title: 'Commodity', field: 'commodity',\r\n},\r\n{\r\n    title: 'Fulfilled', field: 'fulfilled',\r\n},\r\n{\r\n    title: 'Quantity', field: 'quantity',\r\n},\r\n{\r\n    title: 'Grade', field: 'grade',\r\n},\r\n{\r\n    title: 'Tolerence', field: 'tolerence',\r\n},\r\n{\r\n    title: 'Notes', field: 'notes',\r\n},\r\n{\r\n    title:\"Archived\",field:\"archived\",\r\n}\r\n]\r\n\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"CONTRACTS\"\r\n                data={data}\r\n                columns={columns}\r\n                editable={{\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                    \r\n                }}\r\n\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n\r\n                icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Total.js",["614"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { total_data } from './Tabledatas';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nexport default function Total() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(total_data)\r\n    const columns = [\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',\r\n    }, {\r\n        title: 'Capacity', field: 'capacity',\r\n    },\r\n    {\r\n        title: 'Contents', field: 'contents',\r\n    },\r\n    {\r\n        title: 'Free', field: 'free',\r\n    },\r\n    {\r\n        title: 'Contracted', field: 'contracted',\r\n    },\r\n    {\r\n        title: 'Delivered', field: 'delivered',\r\n    },\r\n    {\r\n        title: 'Remaining', field: 'remaining',\r\n    }\r\n  ]\r\n    const columns_archived = [\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',\r\n    }, {\r\n        title: 'Capacity', field: 'capacity',\r\n    },\r\n    {\r\n        title: 'Contents', field: 'contents',\r\n    },\r\n    {\r\n        title: 'Free', field: 'free',\r\n    },\r\n    {\r\n        title: 'Contracted', field: 'contracted',\r\n    },\r\n    {\r\n        title: 'Delivered', field: 'delivered',\r\n    },\r\n    {\r\n        title: 'Remaining', field: 'remaining',\r\n    }\r\n  ]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"TOTAL\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                  Toolbar: (props) => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\">\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n               \r\n                icons={{\r\n                  Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                  Edit: () => <CreateIcon color=\"action\" />,\r\n                  Export: () => <img src={Export}></img>,\r\n                  Delete: () => <DeleteIcon color=\"action\" />\r\n                 \r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Ingoing.js",["615","616"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { ingoing_data } from './Tabledatas';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport Export from './export.png';\r\nimport { DisabledByDefault } from '@mui/icons-material';\r\nexport default function Ingoing() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(ingoing_data)\r\n    const columns = [{\r\n        title: 'ID', field: 'id',filtering:false,\r\n    },\r\n    {\r\n        title: 'Silos', field: 'silos',\r\n    },\r\n    {\r\n        title: 'Date/Time', field: 'dateTime',filtering:false,\r\n    }, {\r\n        title: 'Operators', field: 'operators',filtering:false,\r\n    },\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',filtering:false,\r\n    },\r\n    {\r\n        title: 'Transport', field: 'transport',filtering:false,\r\n    },\r\n    {\r\n        title: 'Driver', field: 'driver',filtering:false,\r\n    },\r\n    {\r\n        title: 'Rego', field: 'rego',filtering:false,\r\n    },\r\n    {\r\n        title: 'Tare Weight', field: 'tareWeight',filtering:false,\r\n    },\r\n    {\r\n        title: 'Gross Weight', field: 'grossWeight',filtering:false,\r\n    },\r\n    {\r\n        title: 'Amount', field: 'amount',filtering:false,\r\n    },\r\n    {\r\n        title: 'Paddocks', field: 'paddocks',filtering:false,\r\n    },\r\n    {\r\n        title: 'Traits', field: 'traits',filtering:false,\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',filtering:false,\r\n    },\r\n    \r\n    \r\n  ]\r\n  const columns_archived = [{\r\n    title: 'ID', field: 'id',filtering:false,\r\n},\r\n{\r\n    title: 'Silos', field: 'silos',\r\n},\r\n{\r\n    title: 'Date/Time', field: 'dateTime',filtering:false,\r\n}, {\r\n    title: 'Operators', field: 'operators',filtering:false,\r\n},\r\n{\r\n    title: 'Cultivar', field: 'cultivar',filtering:false,\r\n},\r\n{\r\n    title: 'Transport', field: 'transport',filtering:false,\r\n},\r\n{\r\n    title: 'Driver', field: 'driver',filtering:false,\r\n},\r\n{\r\n    title: 'Rego', field: 'rego',filtering:false,\r\n},\r\n{\r\n    title: 'Tare Weight', field: 'tareWeight',filtering:false,\r\n},\r\n{\r\n    title: 'Gross Weight', field: 'grossWeight',filtering:false,\r\n},\r\n{\r\n    title: 'Amount', field: 'amount',filtering:false,\r\n},\r\n{\r\n    title: 'Paddocks', field: 'paddocks',filtering:false,\r\n},\r\n{\r\n    title: 'Traits', field: 'traits',filtering:false,\r\n},\r\n{\r\n    title: 'Notes', field: 'notes',filtering:false,\r\n},\r\n{\r\n    title: 'Archived', field: 'archived',filtering:false,\r\n},\r\n  ]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"INGOING\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                    onRowAdd: (newRow) =>\r\n            new Promise((resolve, reject) => {\r\n              setData([...data, newRow]);\r\n              setTimeout(() => resolve(), 500);\r\n            }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                    filtering:true,\r\n                    \r\n                }}\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                 \r\n                  icons={{\r\n                    Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Export: () => <img src={Export}></img>,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                   \r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Silos.js",["617","618"],"import React from \"react\";\r\nimport MaterialTable,{ MTableToolbar } from \"material-table\";\r\nimport { Progress } from \"semantic-ui-react\";\r\nimport {Checkbox} from \"semantic-ui-react\";\r\nimport {silos_data} from \"./Tabledatas\";\r\nimport Chart from \"./Chart\";\r\nimport \"../Grains.css\";\r\nimport \"./archived.css\";\r\nimport Export from \"./export.png\";\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\n\r\nexport default function Silos() {\r\n  const [selected, toggleselected] = React.useState(false);\r\nconst [data, setData] = React.useState(silos_data );\r\n  const columns = [\r\n    {\r\n      title: \"Farm\",\r\n      field: \"farm\",\r\n    },\r\n    {\r\n      title: \"Silo\",\r\n      field: \"silo\",\r\n    },\r\n    {\r\n      title: \"Cultivar\",\r\n      field: \"cultivar\",\r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",\r\n    },\r\n\r\n    {\r\n      title: \"Capacity\",\r\n      field: \"capacity\",\r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",\r\n      render: rowData => {\r\n        return <Progress percent={rowData.contents} progress color=\"rgb(68, 63, 63)\" />\r\n      }\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      field: \"status\",\r\n    },\r\n  ]\r\n  const columns_archived = [\r\n    {\r\n      title: \"Farm\",\r\n      field: \"farm\",\r\n    },\r\n    {\r\n      title: \"Silo\",\r\n      field: \"silo\",\r\n    },\r\n    {\r\n      title: \"Cultivar\",\r\n      field: \"cultivar\",\r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",\r\n    },\r\n\r\n    {\r\n      title: \"Capacity\",\r\n      field: \"capacity\",\r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",\r\n      render: rowData => {\r\n        return <Progress percent={rowData.contents} progress color=\"rgb(68, 63, 63)\" />\r\n      }\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      field: \"status\",\r\n    },\r\n    {\r\n      title: \"Archived\",\r\n      field: \"archived\",\r\n    },\r\n  ]\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"SILOS\"\r\n        data={data}\r\n        columns={selected ? columns_archived : columns}\r\n        // columns={columns}\r\n        detailPanel={(rowData) => {\r\n          return <Chart />;\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          paging: true,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n          exportButton: true,\r\n        }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div>\r\n              <MTableToolbar {...props} />\r\n              <div className=\"toggle-switch\">\r\n                <Checkbox\r\n                  toggle\r\n                  onClick={() => toggleselected(!selected)}\r\n                  checked={selected}\r\n                  label=\"Show Archived\"\r\n                />\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}  editable={{\r\n          onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n          onRowUpdate:(newRow,oldRow)=> new Promise(()=>{}),\r\n          onRowDelete:(selectedRow)=> new Promise(()=>{})\r\n        }}\r\n        icons={{\r\n          Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n          Edit: () => <CreateIcon color=\"action\" />,\r\n          Export: () => <img src={Export}></img>,\r\n          Delete: () => <DeleteIcon color=\"action\" />\r\n         \r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Outgoing.js",["619"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { outgoing_data } from './Tabledatas';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nexport default function Outgoing() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(outgoing_data)\r\n    const columns = [{\r\n      title: 'ID', field: 'id',filtering:false,\r\n  },\r\n  {\r\n      title: 'Silos', field: 'silos',\r\n  },\r\n  {\r\n      title: 'Date/Time', field: 'dateTime',filtering:false,\r\n  }, {\r\n      title: 'Operators', field: 'operators',filtering:false,\r\n  },\r\n   {\r\n      title: 'Contract', field: 'contract',\r\n  },\r\n  {\r\n      title: 'Cultivar', field: 'cultivar',filtering:false,\r\n  },\r\n  {\r\n      title: 'Transport', field: 'transport',filtering:false,\r\n  },\r\n  {\r\n      title: 'Driver', field: 'driver',filtering:false,\r\n  },\r\n  {\r\n      title: 'Rego', field: 'rego',filtering:false,\r\n  },\r\n  {\r\n      title: 'Tare Weight', field: 'tareWeight',filtering:false,\r\n  },\r\n  {\r\n      title: 'Gross Weight', field: 'grossWeight',filtering:false,\r\n  },\r\n  {\r\n      title: 'Amount', field: 'amount',filtering:false,\r\n  },\r\n  {\r\n      title: 'End Point Amount', field: 'endPointAmount',filtering:false,\r\n  },\r\n  {\r\n      title: 'Paddocks', field: 'paddocks',filtering:false,\r\n  },\r\n  {\r\n      title: 'Traits', field: 'traits',filtering:false,\r\n  },\r\n  {\r\n      title: 'Notes', field: 'notes',filtering:false,\r\n  },\r\n  ]\r\n    const columns_archived = [{\r\n      title: 'ID', field: 'id',filtering:false,\r\n  },\r\n  {\r\n      title: 'Silos', field: 'silos',\r\n  },\r\n  {\r\n      title: 'Date/Time', field: 'dateTime',filtering:false,\r\n  }, {\r\n      title: 'Operators', field: 'operators',filtering:false,\r\n  },\r\n   {\r\n      title: 'Contract', field: 'contract',\r\n  },\r\n  {\r\n      title: 'Cultivar', field: 'cultivar',filtering:false,\r\n  },\r\n  {\r\n      title: 'Transport', field: 'transport',filtering:false,\r\n  },\r\n  {\r\n      title: 'Driver', field: 'driver',filtering:false,\r\n  },\r\n  {\r\n      title: 'Rego', field: 'rego',filtering:false,\r\n  },\r\n  {\r\n      title: 'Tare Weight', field: 'tareWeight',filtering:false,\r\n  },\r\n  {\r\n      title: 'Gross Weight', field: 'grossWeight',filtering:false,\r\n  },\r\n  {\r\n      title: 'Amount', field: 'amount',filtering:false,\r\n  },\r\n  {\r\n      title: 'End Point Amount', field: 'endPointAmount',filtering:false,\r\n  },\r\n  {\r\n      title: 'Paddocks', field: 'paddocks',filtering:false,\r\n  },\r\n  {\r\n      title: 'Traits', field: 'traits',filtering:false,\r\n  },\r\n  {\r\n      title: 'Notes', field: 'notes',filtering:false,\r\n  },\r\n  {\r\n      title: 'Archived', field: 'archived',filtering:false,\r\n  },]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"OUTGOING\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                    onRowAdd: (newRow) =>\r\n            new Promise((resolve, reject) => {\r\n              setData([...data, newRow]);\r\n              setTimeout(() => resolve(), 500);\r\n            }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,filtering:true,  \r\n                }}\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                  \r\n                  icons={{\r\n                    Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Export: () => <img src={Export}></img>,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                   \r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Transfer.js",["620"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nimport { transfer_data } from './Tabledatas';\r\nexport default function Transfer() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(transfer_data)\r\n        \r\n        const columns = [{\r\n        title: 'ID', field: 'id'\r\n    },\r\n    {\r\n        title: 'Silos', field: 'silos',\r\n    },\r\n    {\r\n        title: 'Date/Time', field: 'dateTime',\r\n    }, {\r\n        title: 'Operators', field: 'operators',\r\n    },\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',\r\n    },\r\n    \r\n    {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    \r\n    {\r\n        title: 'Traits', field: 'traits',\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',\r\n    },\r\n    \r\n    \r\n  ]\r\n    const columns_archived = [{\r\n        title: 'ID', field: 'id'\r\n    },\r\n    {\r\n        title: 'Silos', field: 'silos',\r\n    },\r\n    {\r\n        title: 'Date/Time', field: 'dateTime',\r\n    }, {\r\n        title: 'Operators', field: 'operators',\r\n    },\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',\r\n    },\r\n    \r\n    {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    \r\n    {\r\n        title: 'Traits', field: 'traits',\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',\r\n    },\r\n    {\r\n        title: 'Archived', field: 'archived',\r\n    },\r\n    \r\n  ]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"TRANSFER\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                 \r\n                  icons={{\r\n                    Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Export: () => <img src={Export}></img>,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                   \r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Tabledatas.js",["621"],"import { Progress } from \"semantic-ui-react\";\r\n\r\nexport  const silos_data = [\r\n    { farm: 'abc', silo: 'we', cultivar: 'wq', capacity:\"50\",contents:\"60\",status:\"asd\"},\r\n    { farm: 'abc', silo: 'we', cultivar: 'wq', capacity:\"50\",contents:\"44\",status:\"asd\"},\r\n];\r\n\r\nexport const outgoing_data = [\r\n    {id:\"abc\",silos:\"abc\",dateTime:\"30/11/2021\",operators:\"abc\",contract:\"asd\",cultivar:\"asd\",transport:\"asd\",driver:\"asd\",rego:\"asd\",\r\n    tareWeight:\"abc\",grossWeight:\"abc\",amount:\"abc\",endPointAmount:\"abc\",paddocks:\"abc\",traits:\"abc\",notes:\"abc\",archived:\"abc\"},\r\n\r\n    {id:\"abc\",silos:\"abc\",dateTime:\"30/11/2021\",operators:\"abc\",contract:\"asd\",cultivar:\"asd\",transport:\"asd\",driver:\"asd\",rego:\"asd\",\r\n    tareWeight:\"abc\",grossWeight:\"abc\",amount:\"abc\",endPointAmount:\"abc\",paddocks:\"abc\",traits:\"abc\",notes:\"abc\",archived:\"abc\"},\r\n];\r\n\r\nexport const ingoing_data = [\r\n    {id:\"asd\",silos:\"abc\",dateTime:\"30/11/2021\",operators:\"abc\",contract:\"asd\",cultivar:\"asd\",transport:\"asd\",driver:\"asd\",rego:\"asd\",\r\n        tareWeight:\"abc\",grossWeight:\"abc\",amount:\"abc\",endPointAmount:\"abc\",paddocks:\"abc\",traits:\"abc\",notes:\"abc\",archived:\"yes\"},\r\n        {id:\"asd\",silos:\"abc\",dateTime:\"30/11/2021\",operators:\"abc\",contract:\"asd\",cultivar:\"asd\",transport:\"asd\",driver:\"asd\",rego:\"asd\",\r\n        tareWeight:\"abc\",grossWeight:\"abc\",amount:\"abc\",endPointAmount:\"abc\",paddocks:\"abc\",traits:\"abc\",notes:\"abc\",archived:\"no\"},\r\n];\r\n\r\nexport const contracts_data = [\r\n    {status:\"asd\",contractNo:\"asd\",startDate:\"20/10/2021\",endDate:\"30/11/2021\",buyer:\"asd\",destination:\"asd\",commodity:\"asd\",fulfilled:\"asd\",\r\n    quantity:\"asd\",grade:\"asd\",tolerence:\"asd\",notes:\"asd\"},\r\n    {status:\"asd\",contractNo:\"asd\",startDate:\"20/10/2021\",endDate:\"30/11/2021\",buyer:\"asd\",destination:\"asd\",commodity:\"asd\",fulfilled:\"asd\",\r\n    quantity:\"asd\",grade:\"asd\",tolerence:\"asd\",notes:\"asd\"},\r\n];\r\nexport const total_data = [\r\n    {cultivar:\"abc\",capacity:\"34\",contents:\"44\",free:\"aabc\",contracted:\"abc\",delivered:\"abc\",remaining:\"abc\"},\r\n      {cultivar:\"abc\",capacity:\"34\",contents:\"44\",free:\"aabc\",contracted:\"abc\",delivered:\"abc\",remaining:\"abc\"},\r\n      {cultivar:\"abc\",capacity:\"34\",contents:\"44\",free:\"aabc\",contracted:\"abc\",delivered:\"abc\",remaining:\"abc\"},\r\n];\r\nexport const transfer_data = [\r\n    {id:\"abc\",silos:\"asd\",dateTime:\"30/12/2020\",operators:\"asd\",cultivar:\"asd\",amount:\"asd\",traits:\"asd\",notes:\"asd\",archived:\"yes\", },\r\n    {id:\"abc\",silos:\"asd\",dateTime:\"30/12/2020\",operators:\"asd\",cultivar:\"asd\",amount:\"asd\",traits:\"asd\",notes:\"asd\",archived:\"no\", },\r\n    {id:\"abc\",silos:\"asd\",dateTime:\"30/12/2020\",operators:\"asd\",cultivar:\"asd\",amount:\"asd\",traits:\"asd\",notes:\"asd\",archived:\"yes\", },\r\n];\r\nexport const bar_data={\r\n    labels:['Red','Blue','Yellow','Green','Purple','Orange'],\r\n    datasets: [{\r\n     label: 'new farm abc',\r\n     data: [4, 9, 3, 5, 2, 3],  \r\n     backgroundColor: [\r\n      'rgba(255, 99, 132, 0.2)',\r\n      'rgba(54, 162, 235, 0.2)',\r\n      'rgba(255, 206, 86, 0.2)',\r\n      'rgba(75, 192, 192, 0.2)',\r\n      'rgba(153, 102, 255, 0.2)',\r\n      'rgba(255, 159, 64, 0.2)'\r\n  ],\r\n  borderColor: [\r\n    'rgba(255, 99, 132, 1)',\r\n    'rgba(54, 162, 235, 1)',\r\n    'rgba(255, 206, 86, 1)',\r\n    'rgba(75, 192, 192, 1)',\r\n    'rgba(153, 102, 255, 1)',\r\n    'rgba(255, 159, 64, 1)'\r\n],\r\nborderWidth: 1 }]\r\n  } ;","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Chart.js",["622"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport {Grid} from '@material-ui/core'\r\n\r\n\r\nimport BarChart from './BarChart';\r\n\r\n\r\n\r\nexport default function Chart() {\r\n\r\n   \r\n\r\n\r\n    const [data, setData] = React.useState([\r\n        {id:1,date:\"30/11/2021\",status:\"TOTAL\",amount:\"20\"}\r\n    ])\r\n    const columns = [{\r\n        title: 'ID', field: 'id',\r\n    },\r\n    {\r\n        title: 'Date', field: 'date',\r\n    },\r\n    {\r\n        title: 'Status', field: 'status',\r\n    }, {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    {\r\n        title: 'Traits', field: 'traits',\r\n    },\r\n    \r\n    \r\n    \r\n  ]\r\n    return (\r\n        <div>\r\n            <Grid container spacing={0}>\r\n            <Grid item xs={4}>\r\n            <BarChart />\r\n            </Grid>\r\n\r\n            <Grid item xs={8}>\r\n            <MaterialTable title=\"\"\r\n                data={data}\r\n                columns={columns}\r\n                \r\n                options={{\r\n                    title:false,\r\n                    actionsColumnIndex: -1,\r\n                    paging: false,\r\n                   \r\n                    search:false,\r\n                    \r\n                }}\r\n                icons={{\r\n                   // Export: () => <img src={Export}></img>,\r\n                    // Edit: () => <CreateIcon color=\"action\" />,\r\n                    // Delete: () => <DeleteIcon color=\"action\" />\r\n                  }}\r\n            />\r\n            </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\BarChart.js",["623"],"\r\nimport React from 'react'\r\nimport {Bar} from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto'\r\nimport {CategoryScale} from 'chart.js';\r\nimport { bar_data } from './Tabledatas';\r\n Chart.register(CategoryScale)\r\n\r\n\r\n\r\nexport default function BarChart() {\r\n  const [data, setData] = React.useState(bar_data);\r\n  const options={\r\n    title:{\r\n      display:true,\r\n      text:'Bar Chart'\r\n    },\r\n    \r\n    scales:{\r\n      yAxes:[\r\n        {\r\n          ticks:{\r\n            min:0,\r\n            max:6,\r\n            stepSize:1\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n \r\n  \r\n  return (\r\n    <div >\r\n     <Bar data={data}\r\n     height={300}\r\n     width={600}\r\n     options={options}\r\n     \r\n     />\r\n     \r\n      \r\n    </div>\r\n  )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\FuelTable.js",["624"],"import React, { useState } from \"react\";\r\nimport { Segment } from \"semantic-ui-react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\nimport TableDetails from \"./Tabledetails\";\r\nimport \"./Fuel.css\";\r\n\r\nexport default function FuelTable() {\r\n  const [state, setState] = React.useState(\"FUELTANK\");\r\n\r\n  return (\r\n    <div  className= \"table-size\">\r\n    \r\n    <div className= \"subheader\">  \r\n   \r\n        <h1 style={{\"color\": \"black\"}}>Fuel Inventory </h1><span>&nbsp;&nbsp;</span>\r\n  \r\n    </div>\r\n    <div className=\"fuel\">\r\n      <Menu pointing>\r\n        <Menu.Item\r\n          name=\"FUELTANK\"\r\n          active={state === \"FUELTANK\"}\r\n          color=\"green\"\r\n          onClick={() => setState(\"FUELTANK\")}\r\n        />\r\n        <Menu.Item\r\n          name=\"INGOING\"\r\n          active={state === \"INGOING\"}\r\n          onClick={() => setState(\"INGOING\")}\r\n          color=\"green\"\r\n        />\r\n        <Menu.Item\r\n          name=\"OUTGOING\"\r\n          active={state === \"OUTGOING\"}\r\n          onClick={() => setState(\"OUTGOING\")}\r\n          color=\"green\"\r\n        />\r\n        <Menu.Item\r\n          name=\"STOCKTAKE\"\r\n          active={state === \"STOCKTAKE\"}\r\n          onClick={() => setState(\"STOCKTAKE\")}\r\n          color=\"green\"\r\n        />\r\n\r\n        <Menu.Item\r\n          name=\"TOTAL\"\r\n          active={state === \"TOTAL\"}\r\n          onClick={() => setState(\"TOTAL\")}\r\n          color=\"green\"\r\n        />\r\n      </Menu>\r\n      <Segment attached=\"bottom\">\r\n        <TableDetails dataValue={state} />\r\n      </Segment>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tabledetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Total.js",["625","626","627"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { total_data,type_data } from './Tabledatas';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nimport { MenuItem, Select } from '@material-ui/core';\r\nexport default function Total() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [type, setType] = useState({});\r\n\r\n  // const lsType = [\r\n  //   { id: 1, title: \"Cattle\" },\r\n  //   { id: 2, title: \"Bulls\" },\r\n  //   { id: 3, title: \"Sheep\" },\r\n  //   { id: 4, title: \"Horses\" },\r\n  //   { id: 5, title: \"Chickens\" },\r\n  //   { id: 6, title: \"Pigs\" },\r\n  //   { id: 7, title: \"Deer\" },\r\n  //   { id: 8, title: \"Goats\" },\r\n  //   { id: 9, title: \"Llamas\" },\r\n  //   { id: 10, title: \"Bees\" },\r\n  // ];\r\n\r\n    const [data, setData] = React.useState(total_data)\r\n    const columns = [\r\n    {\r\n        title: 'Type', field: 'type',lookup:type,\r\n    }, {\r\n        title: 'Capacity', field: 'capacity',filtering:false,\r\n    },\r\n    {\r\n        title: 'Contents', field: 'contents',filtering:false,\r\n    },\r\n    {\r\n        title: 'Free', field: 'free',filtering:false,\r\n    },\r\n    {\r\n      title: 'Contents', field: 'contents1',filtering:false,\r\n  },\r\n    \r\n  ];\r\n\r\n  \r\n    const columns_archived = [\r\n      {\r\n        title: 'Type', field: 'type',lookup:type,\r\n    }, {\r\n        title: 'Capacity', field: 'capacity',filtering:false,\r\n    },\r\n    {\r\n        title: 'Contents', field: 'contents',filtering:false,\r\n    },\r\n    {\r\n        title: 'Free', field: 'free',filtering:false,\r\n    },\r\n    {\r\n      title: 'Contents', field: 'contents1',filtering:false,\r\n  },\r\n  ];\r\n  useEffect(() => {\r\n    const type = {};\r\n    type_data.map((row) => (type[row.id] = row.title));\r\n    setType(type);\r\n  }, []);\r\n    return (\r\n        <div>\r\n          {/* <Select\r\n    labelId=\"demo-simple-select-label\"\r\n    id=\"demo-simple-select\"\r\n     value={type}\r\n    // label=\"Age\"\r\n    // onChange={handleChange}\r\n  >\r\n    <MenuItem value={Diesel}>Diesel</MenuItem>\r\n    <MenuItem value={Unleaded}>Unleaded</MenuItem>\r\n    <MenuItem value={Aviation}>Aviation</MenuItem>\r\n  </Select> */}\r\n            <MaterialTable title=\"TOTAL\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,filtering:true,\r\n                }}\r\n                components={{\r\n                  Toolbar: (props) => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\">\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n                icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Outgoing.js",["628"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { outgoing_data, type_data } from './Tabledatas';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nexport default function Outgoing() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [type, setType] = useState({});\r\n    const [data, setData] = React.useState(outgoing_data)\r\n    const columns = [{\r\n      title: 'Fuel Tank', field: 'fuelTank',filtering:false,\r\n  },\r\n\r\n  {\r\n      title: 'Date/Time', field: 'dateTime',filtering:false,\r\n  }, {\r\n      title: 'Operator', field: 'operator',filtering:false,\r\n  },\r\n   {\r\n      title: 'Adjustment', field: 'adjustment',filtering:false,\r\n  },\r\n  {\r\n    title: 'Type', field: 'type',lookup:type,\r\n},\r\n  {\r\n      title: 'Equipment', field: 'equipment',filtering:false,\r\n  },\r\n  {\r\n      title: 'Hours', field: 'hours',filtering:false,\r\n  },\r\n  {\r\n      title: 'Milage', field: 'milage',filtering:false,\r\n  },\r\n  \r\n  {\r\n      title: 'Notes', field: 'notes',filtering:false,\r\n  },\r\n  ]\r\n    const columns_archived = [{\r\n        title: 'Fuel Tank', field: 'fuelTank',filtering:false,\r\n    },\r\n  \r\n    {\r\n        title: 'Date/Time', field: 'dateTime',filtering:false,\r\n    }, {\r\n        title: 'Operator', field: 'operator',filtering:false,\r\n    },\r\n     {\r\n        title: 'Adjustment', field: 'adjustment',filtering:false,\r\n    },\r\n    {\r\n      title: 'Type', field: 'type',lookup:type,\r\n  },\r\n    {\r\n        title: 'Equipment', field: 'equipment',filtering:false,\r\n    },\r\n    {\r\n        title: 'Hours', field: 'hours',filtering:false,\r\n    },\r\n    {\r\n        title: 'Milage', field: 'milage',filtering:false,\r\n    },\r\n    \r\n    {\r\n        title: 'Notes', field: 'notes',filtering:false,\r\n    },\r\n  {\r\n      title: 'Archived', field: 'archived',filtering:false,\r\n  },];\r\n  useEffect(() => {\r\n    const type = {};\r\n    type_data.map((row) => (type[row.id] = row.title));\r\n    setType(type);\r\n  }, []);\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"OUTGOING\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd: (newRow) =>\r\n            new Promise((resolve, reject) => {\r\n              setData([...data, newRow]);\r\n              setTimeout(() => resolve(), 500);\r\n            }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,filtering:true,  \r\n                }}\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived \"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\StockTake.js",["629"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable,{ MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { stocktake_data,type_data } from './Tabledatas';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nexport default function StockTake() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [type, setType] = useState({});\r\n    const [data, setData] = React.useState(stocktake_data)\r\n    const columns = [{\r\n      title: 'Fuel Tank', field: 'fuelTank',filtering:false,\r\n   },\r\n\r\n    {\r\n       title: 'Date/Time', field: 'dateTime',filtering:false,\r\n    }, \r\n    {\r\n      title: 'Operator', field: 'operator',filtering:false,\r\n    },\r\n    \r\n    \r\n    {\r\n        title: 'Reported', field: 'reported',filtering:false,\r\n    },\r\n    {\r\n      title: 'Adjustment', field: 'adjustment',filtering:false,\r\n  },\r\n  {\r\n    title: 'Type', field: 'type',lookup:type,\r\n},\r\n  ]\r\n    const columns_archived = [\r\n      {\r\n        title: 'Fuel Tank', field: 'fuelTank',filtering:false,\r\n     },\r\n  \r\n      {\r\n         title: 'Date/Time', field: 'dateTime',filtering:false,\r\n      }, \r\n      {\r\n        title: 'Operator', field: 'operator',filtering:false,\r\n      },\r\n      \r\n      \r\n      {\r\n          title: 'Reported', field: 'reported',filtering:false,\r\n      },\r\n      {\r\n        title: 'Adjustment', field: 'adjustment',filtering:false,\r\n    },\r\n    {\r\n      title: 'Type', field: 'type',lookup:type\r\n  },\r\n      {\r\n        title: \"Archived\",\r\n        field: \"archived\",\r\n      },];\r\n      useEffect(() => {\r\n        const type = {};\r\n        type_data.map((row) => (type[row.id] = row.title));\r\n        setType(type);\r\n      }, []);\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"STOCKTAKE\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,filtering:true,\r\n                }}\r\n                components={{\r\n                  Toolbar: props => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\">\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n                icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Ingoing.js",["630","631"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { ingoing_data,type_data } from './Tabledatas';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport Export from './export.png';\r\nimport { DisabledByDefault } from '@mui/icons-material';\r\nexport default function Ingoing() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [type, setType] = useState({});\r\n    const [data, setData] = React.useState(ingoing_data)\r\n    const columns = [{\r\n        title: 'Fuel Tank', field: 'fuelTank',filtering:false,\r\n    },\r\n    \r\n    {\r\n        title: 'Date/Time', field: 'dateTime',filtering:false,\r\n    }, {\r\n        title: 'Operator', field: 'operator',filtering:false,\r\n    },\r\n    {\r\n        title: 'Amount', field: 'amount',filtering:false,\r\n    },\r\n    {\r\n        title: 'Type', field: 'type',lookup:type,\r\n    },\r\n    {\r\n        title: 'Supplier', field: 'supplier',filtering:false,\r\n    },\r\n    \r\n    {\r\n        title: 'Notes', field: 'notes',filtering:false,\r\n    },\r\n    \r\n    \r\n  ]\r\n  const columns_archived = [{\r\n    title: 'Fuel Tank', field: 'fuelTank',filtering:false,\r\n},\r\n\r\n{\r\n    title: 'Date/Time', field: 'dateTime',filtering:false,\r\n}, {\r\n    title: 'Operator', field: 'operator',filtering:false,\r\n},\r\n{\r\n    title: 'Amount', field: 'amount',filtering:false,\r\n},\r\n{\r\n    title: 'Type', field: 'type',lookup:type,\r\n},\r\n{\r\n    title: 'Supplier', field: 'supplier',filtering:false,\r\n},\r\n\r\n{\r\n    title: 'Notes', field: 'notes',filtering:false,\r\n},\r\n{\r\n    title: 'Archived', field: 'archived',filtering:false,\r\n},\r\n  ];\r\n  useEffect(() => {\r\n    const type = {};\r\n    type_data.map((row) => (type[row.id] = row.title));\r\n    setType(type);\r\n  }, []);\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"INGOING\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd: (newRow) =>\r\n            new Promise((resolve, reject) => {\r\n              setData([...data, newRow]);\r\n              setTimeout(() => resolve(), 500);\r\n            }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                    filtering:true\r\n                }}\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\FuelTank.js",["632","633"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable,{ MTableToolbar } from \"material-table\";\r\nimport { Progress } from \"semantic-ui-react\";\r\nimport {Checkbox} from \"semantic-ui-react\";\r\nimport {fuelTank_data,type_data} from \"./Tabledatas\";\r\n\r\nimport \"../Fuel.css\";\r\nimport \"./archived.css\";\r\nimport Export from \"./export.png\";\r\n\r\n\r\nexport default function FuelTank() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [type, setType] = useState({});\r\nconst [data, setData] = React.useState(fuelTank_data );\r\n  const columns = [\r\n    {\r\n      title: \"Farm\",\r\n      field: \"farm\",filtering:false,\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      field: \"name\",filtering:false,\r\n    },\r\n    {\r\n      title: \"Type\",\r\n      field: \"type\",lookup:type,\r\n    },\r\n   \r\n    {\r\n      title: \"Capacity\",\r\n      field: \"capacity\",filtering:false,\r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",filtering:false,\r\n    },\r\n    // {\r\n    //   title: \"Contents\",\r\n    //   field: \"contents\",filtering:false,\r\n    // },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",filtering:false,\r\n      render: rowData => {\r\n        return <Progress percent={rowData.contents} progress color=\"rgb(68, 63, 63)\" />\r\n      }\r\n    },\r\n    \r\n   \r\n  ]\r\n  const columns_archived = [\r\n    {\r\n      title: \"Farm\",\r\n      field: \"farm\",filtering:false,\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      field: \"name\",filtering:false,\r\n    },\r\n    {\r\n      title: \"Type\",\r\n      field: \"type\",lookup:type,\r\n    },\r\n   \r\n    {\r\n      title: \"Capacity\",\r\n      field: \"capacity\",filtering:false,\r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",filtering:false,\r\n      \r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",filtering:false,\r\n      render: rowData => {\r\n        return <Progress percent={rowData.contents} progress color=\"rgb(68, 63, 63)\" />\r\n      }\r\n\r\n    },\r\n    {\r\n      title: \"Archived\",\r\n      field: \"archived\",filtering:false,\r\n    },\r\n  ];\r\n  useEffect(() => {\r\n    const type = {};\r\n    type_data.map((row) => (type[row.id] = row.title));\r\n    setType(type);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"FUEL TANK\"\r\n        data={data}\r\n        columns={selected ? columns_archived : columns}\r\n        // columns={columns}\r\n        // detailPanel={(rowData) => {\r\n        //   return <Chart />;\r\n        // }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          paging: true,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n          exportButton: true,filtering:true\r\n        }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div>\r\n              <MTableToolbar {...props} />\r\n              <div className=\"toggle-switch\">\r\n                <Checkbox\r\n                  toggle\r\n                  onClick={() => toggleselected(!selected)}\r\n                  checked={selected}\r\n                  label=\"Show Archived\"\r\n                />\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n          // Edit: () => <CreateIcon color=\"action\" />,\r\n          // Delete: () => <DeleteIcon color=\"action\" />\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Tabledatas.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Login\\Loggedin.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Login\\SignUp.js",["634"],"import React from 'react'\r\nimport './Login.css'\r\nimport farmsimple from './farmsimple.PNG'\r\nimport { Link } from 'react-router-dom'\r\nfunction SignUp() {\r\n    return (\r\n        <div className=\"signin-container\">\r\n            <form className=\"input-section\">\r\n                {/* <img src={farmsimple} alt=\"FarmSimple\"></img> */}\r\n                \r\n                <h2>New Signup</h2>\r\n                <input type=\"text\" placeholder=\"First Name\" />\r\n                <input type=\"text\" placeholder=\"Last Name\" />\r\n                <input type=\"text\" placeholder=\"Company Name\" />\r\n                <input type=\"text\" placeholder=\"Email\" />\r\n            </form>\r\n            <div className=\"v-card__actions\">\r\n                <Link to=\"/\" className=\"btn-cancel\">CANCEL</Link>\r\n                <Link to=\"/Loggedin\" className=\"btn-signup\">SIGN UP</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp\r\n","D:\\GFS_Trace\\src\\components\\pages\\Login\\SignIn.js",["635"],"import React from 'react'\r\nimport './Login.css'\r\nimport farmsimple from './farmsimple.PNG'\r\nimport { useState } from \"react\";\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\n\r\nfunction SignIn() {\r\n    const [email,setEmail]=useState('');\r\n    const [password,setPassword]=useState('');\r\n    const mail=\"jesty@gmail.com\";\r\n    const pass=\"jesty\";\r\n    let attempts=3;\r\n    let history= useNavigate();\r\n    const submitfun=()=>{\r\n        if (email===mail && password===pass) {\r\n            history(\"/Loggedin\");\r\n        }\r\n        else if(attempts>=0){\r\n            \r\n            attempts=attempts-1;\r\n            alert(\"invalid user, \"+attempts+\" attempts left\")\r\n        }\r\n    }\r\n\r\n    // const handleClick=()=>{\r\n    //     window.open(\"https://grain.croppaco.com/#/\");\r\n    // };\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {/* <button onClick={handleClick} className=\"btn-grain\">GRAIN CONSOLE</button> */}\r\n        <div className=\"signin-container\">\r\n            <form className=\"input-section\">\r\n                {/* <img src={farmsimple} alt=\"FarmSimple\"></img> */}\r\n                <input type=\"text\" onChange={(e)=>setEmail(e.target.value)} placeholder=\"Email\" />\r\n                <input type=\"password\" onChange={(e)=>setPassword(e.target.value)} placeholder=\"Password\" />\r\n                <div className=\"button-right\">\r\n                    <Link to=\"/Forget\" className=\"forget-button\">Forget Password?</Link>\r\n                </div>\r\n            </form>\r\n            <button onClick={submitfun} className=\"btn-login\" ><strong>LOGIN</strong></button>\r\n            <div className=\"act-style\">Don't have an account?<Link to=\"/SignUp\" className=\"forget-button\">SIGN UP</Link></div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignIn\r\n","D:\\GFS_Trace\\src\\components\\pages\\Login\\Forget.js",[],{"ruleId":"636","replacedBy":"637"},{"ruleId":"638","replacedBy":"639"},{"ruleId":"640","severity":1,"message":"641","line":1,"column":17,"nodeType":"642","messageId":"643","endLine":1,"endColumn":26},{"ruleId":"640","severity":1,"message":"644","line":8,"column":8,"nodeType":"642","messageId":"643","endLine":8,"endColumn":14},{"ruleId":"640","severity":1,"message":"645","line":10,"column":8,"nodeType":"642","messageId":"643","endLine":10,"endColumn":16},{"ruleId":"640","severity":1,"message":"646","line":11,"column":8,"nodeType":"642","messageId":"643","endLine":11,"endColumn":14},{"ruleId":"636","replacedBy":"647"},{"ruleId":"638","replacedBy":"648"},{"ruleId":"640","severity":1,"message":"649","line":2,"column":8,"nodeType":"642","messageId":"643","endLine":2,"endColumn":18},{"ruleId":"640","severity":1,"message":"650","line":3,"column":8,"nodeType":"642","messageId":"643","endLine":3,"endColumn":17},{"ruleId":"640","severity":1,"message":"651","line":4,"column":8,"nodeType":"642","messageId":"643","endLine":4,"endColumn":22},{"ruleId":"640","severity":1,"message":"652","line":5,"column":8,"nodeType":"642","messageId":"643","endLine":5,"endColumn":28},{"ruleId":"640","severity":1,"message":"653","line":6,"column":8,"nodeType":"642","messageId":"643","endLine":6,"endColumn":23},{"ruleId":"640","severity":1,"message":"654","line":7,"column":8,"nodeType":"642","messageId":"643","endLine":7,"endColumn":11},{"ruleId":"640","severity":1,"message":"655","line":13,"column":10,"nodeType":"642","messageId":"643","endLine":13,"endColumn":15},{"ruleId":"640","severity":1,"message":"656","line":13,"column":17,"nodeType":"642","messageId":"643","endLine":13,"endColumn":25},{"ruleId":"640","severity":1,"message":"657","line":3,"column":47,"nodeType":"642","messageId":"643","endLine":3,"endColumn":52},{"ruleId":"640","severity":1,"message":"658","line":42,"column":11,"nodeType":"642","messageId":"643","endLine":42,"endColumn":26},{"ruleId":"659","severity":1,"message":"660","line":70,"column":7,"nodeType":"661","messageId":"662","endLine":70,"endColumn":13},{"ruleId":"640","severity":1,"message":"663","line":124,"column":5,"nodeType":"642","messageId":"643","endLine":124,"endColumn":14},{"ruleId":"640","severity":1,"message":"664","line":135,"column":7,"nodeType":"642","messageId":"643","endLine":135,"endColumn":11},{"ruleId":"665","severity":1,"message":"666","line":143,"column":11,"nodeType":"667","messageId":"662","endLine":143,"endColumn":13},{"ruleId":"665","severity":1,"message":"666","line":156,"column":11,"nodeType":"667","messageId":"662","endLine":156,"endColumn":13},{"ruleId":"640","severity":1,"message":"668","line":2,"column":25,"nodeType":"642","messageId":"643","endLine":2,"endColumn":31},{"ruleId":"640","severity":1,"message":"669","line":3,"column":10,"nodeType":"642","messageId":"643","endLine":3,"endColumn":18},{"ruleId":"640","severity":1,"message":"670","line":1,"column":8,"nodeType":"642","messageId":"643","endLine":1,"endColumn":13},{"ruleId":"640","severity":1,"message":"671","line":24,"column":7,"nodeType":"642","messageId":"643","endLine":24,"endColumn":16},{"ruleId":"640","severity":1,"message":"672","line":1,"column":16,"nodeType":"642","messageId":"643","endLine":1,"endColumn":24},{"ruleId":"640","severity":1,"message":"672","line":1,"column":16,"nodeType":"642","messageId":"643","endLine":1,"endColumn":24},{"ruleId":"673","severity":1,"message":"674","line":9,"column":7,"nodeType":"675","endLine":9,"endColumn":76},{"ruleId":"640","severity":1,"message":"655","line":7,"column":26,"nodeType":"642","messageId":"643","endLine":7,"endColumn":31},{"ruleId":"640","severity":1,"message":"676","line":7,"column":33,"nodeType":"642","messageId":"643","endLine":7,"endColumn":41},{"ruleId":"677","severity":1,"message":"678","line":45,"column":6,"nodeType":"675","endLine":45,"endColumn":125},{"ruleId":"677","severity":1,"message":"678","line":47,"column":7,"nodeType":"675","endLine":47,"endColumn":126},{"ruleId":"677","severity":1,"message":"678","line":49,"column":7,"nodeType":"675","endLine":49,"endColumn":126},{"ruleId":"640","severity":1,"message":"679","line":5,"column":10,"nodeType":"642","messageId":"643","endLine":5,"endColumn":26},{"ruleId":"640","severity":1,"message":"680","line":10,"column":3,"nodeType":"642","messageId":"643","endLine":10,"endColumn":14},{"ruleId":"640","severity":1,"message":"681","line":11,"column":3,"nodeType":"642","messageId":"643","endLine":11,"endColumn":16},{"ruleId":"640","severity":1,"message":"682","line":18,"column":10,"nodeType":"642","messageId":"643","endLine":18,"endColumn":22},{"ruleId":"640","severity":1,"message":"683","line":24,"column":10,"nodeType":"642","messageId":"643","endLine":24,"endColumn":38},{"ruleId":"640","severity":1,"message":"684","line":2,"column":55,"nodeType":"642","messageId":"643","endLine":2,"endColumn":71},{"ruleId":"640","severity":1,"message":"685","line":19,"column":9,"nodeType":"642","messageId":"643","endLine":19,"endColumn":13},{"ruleId":"640","severity":1,"message":"686","line":20,"column":11,"nodeType":"642","messageId":"643","endLine":20,"endColumn":14},{"ruleId":"665","severity":1,"message":"687","line":37,"column":28,"nodeType":"667","messageId":"662","endLine":37,"endColumn":30},{"ruleId":"665","severity":1,"message":"666","line":57,"column":18,"nodeType":"667","messageId":"662","endLine":57,"endColumn":20},{"ruleId":"665","severity":1,"message":"666","line":79,"column":28,"nodeType":"667","messageId":"662","endLine":79,"endColumn":30},{"ruleId":"665","severity":1,"message":"687","line":83,"column":29,"nodeType":"667","messageId":"662","endLine":83,"endColumn":31},{"ruleId":"665","severity":1,"message":"666","line":90,"column":32,"nodeType":"667","messageId":"662","endLine":90,"endColumn":34},{"ruleId":"665","severity":1,"message":"666","line":90,"column":46,"nodeType":"667","messageId":"662","endLine":90,"endColumn":48},{"ruleId":"640","severity":1,"message":"655","line":102,"column":26,"nodeType":"642","messageId":"643","endLine":102,"endColumn":31},{"ruleId":"640","severity":1,"message":"676","line":102,"column":33,"nodeType":"642","messageId":"643","endLine":102,"endColumn":41},{"ruleId":"640","severity":1,"message":"655","line":28,"column":24,"nodeType":"642","messageId":"643","endLine":28,"endColumn":29},{"ruleId":"640","severity":1,"message":"688","line":16,"column":10,"nodeType":"642","messageId":"643","endLine":16,"endColumn":15},{"ruleId":"640","severity":1,"message":"689","line":22,"column":9,"nodeType":"642","messageId":"643","endLine":22,"endColumn":21},{"ruleId":"665","severity":1,"message":"666","line":125,"column":16,"nodeType":"667","messageId":"662","endLine":125,"endColumn":18},{"ruleId":"665","severity":1,"message":"666","line":128,"column":16,"nodeType":"667","messageId":"662","endLine":128,"endColumn":18},{"ruleId":"665","severity":1,"message":"666","line":128,"column":37,"nodeType":"667","messageId":"662","endLine":128,"endColumn":39},{"ruleId":"665","severity":1,"message":"666","line":131,"column":19,"nodeType":"667","messageId":"662","endLine":131,"endColumn":21},{"ruleId":"665","severity":1,"message":"666","line":131,"column":38,"nodeType":"667","messageId":"662","endLine":131,"endColumn":40},{"ruleId":"665","severity":1,"message":"666","line":134,"column":20,"nodeType":"667","messageId":"662","endLine":134,"endColumn":22},{"ruleId":"665","severity":1,"message":"666","line":134,"column":40,"nodeType":"667","messageId":"662","endLine":134,"endColumn":42},{"ruleId":"665","severity":1,"message":"666","line":137,"column":20,"nodeType":"667","messageId":"662","endLine":137,"endColumn":22},{"ruleId":"665","severity":1,"message":"666","line":137,"column":40,"nodeType":"667","messageId":"662","endLine":137,"endColumn":42},{"ruleId":"665","severity":1,"message":"666","line":153,"column":104,"nodeType":"667","messageId":"662","endLine":153,"endColumn":106},{"ruleId":"673","severity":1,"message":"674","line":205,"column":25,"nodeType":"675","endLine":205,"endColumn":43},{"ruleId":"640","severity":1,"message":"690","line":6,"column":18,"nodeType":"642","messageId":"643","endLine":6,"endColumn":25},{"ruleId":"673","severity":1,"message":"674","line":30,"column":27,"nodeType":"675","endLine":30,"endColumn":45},{"ruleId":"640","severity":1,"message":"690","line":6,"column":18,"nodeType":"642","messageId":"643","endLine":6,"endColumn":25},{"ruleId":"673","severity":1,"message":"674","line":30,"column":25,"nodeType":"675","endLine":30,"endColumn":43},{"ruleId":"640","severity":1,"message":"690","line":6,"column":18,"nodeType":"642","messageId":"643","endLine":6,"endColumn":25},{"ruleId":"673","severity":1,"message":"674","line":33,"column":25,"nodeType":"675","endLine":33,"endColumn":43},{"ruleId":"640","severity":1,"message":"690","line":7,"column":16,"nodeType":"642","messageId":"643","endLine":7,"endColumn":23},{"ruleId":"665","severity":1,"message":"666","line":11,"column":16,"nodeType":"667","messageId":"662","endLine":11,"endColumn":18},{"ruleId":"673","severity":1,"message":"674","line":77,"column":25,"nodeType":"675","endLine":77,"endColumn":43},{"ruleId":"640","severity":1,"message":"690","line":6,"column":18,"nodeType":"642","messageId":"643","endLine":6,"endColumn":25},{"ruleId":"673","severity":1,"message":"674","line":33,"column":25,"nodeType":"675","endLine":33,"endColumn":43},{"ruleId":"640","severity":1,"message":"690","line":7,"column":18,"nodeType":"642","messageId":"643","endLine":7,"endColumn":25},{"ruleId":"640","severity":1,"message":"688","line":8,"column":12,"nodeType":"642","messageId":"643","endLine":8,"endColumn":17},{"ruleId":"665","severity":1,"message":"666","line":87,"column":19,"nodeType":"667","messageId":"662","endLine":87,"endColumn":21},{"ruleId":"665","severity":1,"message":"666","line":90,"column":24,"nodeType":"667","messageId":"662","endLine":90,"endColumn":26},{"ruleId":"665","severity":1,"message":"666","line":90,"column":42,"nodeType":"667","messageId":"662","endLine":90,"endColumn":44},{"ruleId":"665","severity":1,"message":"666","line":93,"column":24,"nodeType":"667","messageId":"662","endLine":93,"endColumn":26},{"ruleId":"673","severity":1,"message":"674","line":132,"column":25,"nodeType":"675","endLine":132,"endColumn":43},{"ruleId":"691","severity":1,"message":"692","line":72,"column":6,"nodeType":"693","endLine":72,"endColumn":8,"suggestions":"694"},{"ruleId":"673","severity":1,"message":"674","line":107,"column":25,"nodeType":"675","endLine":107,"endColumn":43},{"ruleId":"673","severity":1,"message":"674","line":96,"column":33,"nodeType":"675","endLine":96,"endColumn":51},{"ruleId":"673","severity":1,"message":"674","line":107,"column":33,"nodeType":"675","endLine":107,"endColumn":51},{"ruleId":"640","severity":1,"message":"690","line":12,"column":18,"nodeType":"642","messageId":"643","endLine":12,"endColumn":25},{"ruleId":"673","severity":1,"message":"674","line":77,"column":35,"nodeType":"675","endLine":77,"endColumn":53},{"ruleId":"673","severity":1,"message":"674","line":101,"column":35,"nodeType":"675","endLine":101,"endColumn":53},{"ruleId":"673","severity":1,"message":"674","line":109,"column":25,"nodeType":"675","endLine":109,"endColumn":43},{"ruleId":"673","severity":1,"message":"674","line":69,"column":35,"nodeType":"675","endLine":69,"endColumn":53},{"ruleId":"659","severity":1,"message":"695","line":4,"column":9,"nodeType":"661","messageId":"662","endLine":4,"endColumn":13},{"ruleId":"659","severity":1,"message":"696","line":4,"column":22,"nodeType":"661","messageId":"662","endLine":4,"endColumn":26},{"ruleId":"659","severity":1,"message":"697","line":4,"column":35,"nodeType":"661","messageId":"662","endLine":4,"endColumn":43},{"ruleId":"659","severity":1,"message":"698","line":4,"column":53,"nodeType":"661","messageId":"662","endLine":4,"endColumn":61},{"ruleId":"640","severity":1,"message":"672","line":1,"column":16,"nodeType":"642","messageId":"643","endLine":1,"endColumn":24},{"ruleId":"640","severity":1,"message":"690","line":8,"column":18,"nodeType":"642","messageId":"643","endLine":8,"endColumn":25},{"ruleId":"640","severity":1,"message":"672","line":1,"column":16,"nodeType":"642","messageId":"643","endLine":1,"endColumn":24},{"ruleId":"640","severity":1,"message":"699","line":51,"column":9,"nodeType":"642","messageId":"643","endLine":51,"endColumn":25},{"ruleId":"673","severity":1,"message":"674","line":148,"column":35,"nodeType":"675","endLine":148,"endColumn":53},{"ruleId":"673","severity":1,"message":"674","line":113,"column":33,"nodeType":"675","endLine":113,"endColumn":51},{"ruleId":"640","severity":1,"message":"700","line":9,"column":10,"nodeType":"642","messageId":"643","endLine":9,"endColumn":27},{"ruleId":"673","severity":1,"message":"674","line":165,"column":35,"nodeType":"675","endLine":165,"endColumn":53},{"ruleId":"640","severity":1,"message":"690","line":17,"column":14,"nodeType":"642","messageId":"643","endLine":17,"endColumn":21},{"ruleId":"673","severity":1,"message":"674","line":130,"column":25,"nodeType":"675","endLine":130,"endColumn":43},{"ruleId":"673","severity":1,"message":"674","line":171,"column":35,"nodeType":"675","endLine":171,"endColumn":53},{"ruleId":"673","severity":1,"message":"674","line":127,"column":35,"nodeType":"675","endLine":127,"endColumn":53},{"ruleId":"640","severity":1,"message":"701","line":1,"column":10,"nodeType":"642","messageId":"643","endLine":1,"endColumn":18},{"ruleId":"640","severity":1,"message":"690","line":15,"column":18,"nodeType":"642","messageId":"643","endLine":15,"endColumn":25},{"ruleId":"640","severity":1,"message":"690","line":12,"column":16,"nodeType":"642","messageId":"643","endLine":12,"endColumn":23},{"ruleId":"640","severity":1,"message":"672","line":1,"column":17,"nodeType":"642","messageId":"643","endLine":1,"endColumn":25},{"ruleId":"640","severity":1,"message":"702","line":8,"column":10,"nodeType":"642","messageId":"643","endLine":8,"endColumn":18},{"ruleId":"640","severity":1,"message":"703","line":8,"column":20,"nodeType":"642","messageId":"643","endLine":8,"endColumn":26},{"ruleId":"673","severity":1,"message":"674","line":131,"column":35,"nodeType":"675","endLine":131,"endColumn":53},{"ruleId":"673","severity":1,"message":"674","line":135,"column":35,"nodeType":"675","endLine":135,"endColumn":53},{"ruleId":"673","severity":1,"message":"674","line":118,"column":35,"nodeType":"675","endLine":118,"endColumn":53},{"ruleId":"640","severity":1,"message":"700","line":8,"column":10,"nodeType":"642","messageId":"643","endLine":8,"endColumn":27},{"ruleId":"673","severity":1,"message":"674","line":128,"column":35,"nodeType":"675","endLine":128,"endColumn":53},{"ruleId":"640","severity":1,"message":"690","line":15,"column":14,"nodeType":"642","messageId":"643","endLine":15,"endColumn":21},{"ruleId":"673","severity":1,"message":"674","line":127,"column":25,"nodeType":"675","endLine":127,"endColumn":43},{"ruleId":"640","severity":1,"message":"704","line":3,"column":8,"nodeType":"642","messageId":"643","endLine":3,"endColumn":18},{"ruleId":"640","severity":1,"message":"704","line":3,"column":8,"nodeType":"642","messageId":"643","endLine":3,"endColumn":18},"no-native-reassign",["705"],"no-negated-in-lhs",["706"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Signup' is defined but never used.","'Loggedin' is defined but never used.","'Forget' is defined but never used.",["705"],["706"],"'Typography' is defined but never used.","'TextField' is defined but never used.","'AdapterDateFns' is defined but never used.","'LocalizationProvider' is defined but never used.","'DateRangePicker' is defined but never used.","'Box' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'Input' is defined but never used.","'handleClickOpen' is assigned a value but never used.","no-dupe-keys","Duplicate key 'render'.","ObjectExpression","unexpected","'setValues' is assigned a value but never used.","'date' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Column' is defined but never used.","'FaFilter' is defined but never used.","'React' is defined but never used.","'useStyles' is assigned a value but never used.","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'onChange' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'MdSpaceDashboard' is defined but never used.","'FaUserClock' is defined but never used.","'FaCalendarAlt' is defined but never used.","'BsPeopleFill' is defined but never used.","'BsFillCloudLightningRainFill' is defined but never used.","'MobileDatePicker' is defined but never used.","'flag' is assigned a value but never used.","'arr' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'field' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'setData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lsType'. Either include it or remove the dependency array.","ArrayExpression",["707"],"Duplicate key 'farm'.","Duplicate key 'name'.","Duplicate key 'capacity'.","Duplicate key 'contents'.","'columns_archived' is assigned a value but never used.","'DisabledByDefault' is defined but never used.","'Progress' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'farmsimple' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"708","fix":"709"},"Update the dependencies array to be: [lsType]",{"range":"710","text":"711"},[1657,1659],"[lsType]"]