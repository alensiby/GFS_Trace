[{"D:\\GFS_Trace\\src\\index.js":"1","D:\\GFS_Trace\\src\\i18nextInit.js":"2","D:\\GFS_Trace\\src\\App.js":"3","D:\\GFS_Trace\\src\\reportWebVitals.js":"4","D:\\GFS_Trace\\src\\components\\pages\\Dashboard\\Dashboard.js":"5","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\farms.js":"6","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Custom.js":"7","D:\\GFS_Trace\\src\\components\\Layout\\Structure.js":"8","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Chemicals\\Chemical.js":"9","D:\\GFS_Trace\\src\\components\\pages\\Job\\job.js":"10","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Fertiliser\\FertiliserTable.js":"11","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Livestock\\LiveStock.js":"12","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Equipments\\Equipments.js":"13","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Nozzles\\Nozzles.js":"14","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Spraylogs\\Spraylogs.js":"15","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\WaterLicence\\WaterLicence.js":"16","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Users\\Users.js":"17","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Spreading\\Spreading.js":"18","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Irrigation\\Irrigation.js":"19","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Planting\\Planting.js":"20","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Grazing\\Grazing.js":"21","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\InventoryChemical.js":"22","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Harvest\\Harvest.js":"23","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Maintenance\\Maintenance.js":"24","D:\\GFS_Trace\\src\\components\\pages\\Activities\\VetTreatment\\VetTreatment.js":"25","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\InventoryWater.js":"26","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryReport\\Inventoryreport.js":"27","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\farmTable.js":"28","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\ReportTableDetails.js":"29","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\InventoryWaterTable.js":"30","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\InventoryChemicalTable.js":"31","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\FarmListPopup\\farmpopup.js":"32","D:\\GFS_Trace\\src\\Data\\farmData.js":"33","D:\\GFS_Trace\\src\\Data\\ChemicalData.js":"34","D:\\GFS_Trace\\src\\Data\\MaintenanceData.js":"35","D:\\GFS_Trace\\src\\Data\\VetTreatmentData.js":"36","D:\\GFS_Trace\\src\\Data\\JobData.js":"37","D:\\GFS_Trace\\src\\Data\\HarvestData.js":"38","D:\\GFS_Trace\\src\\Data\\GrazingData.js":"39","D:\\GFS_Trace\\src\\components\\HeaderFooter\\Header.js":"40","D:\\GFS_Trace\\src\\components\\HeaderFooter\\footer.js":"41","D:\\GFS_Trace\\src\\components\\Sidebar\\Navbar.js":"42","D:\\GFS_Trace\\src\\Data\\PlantingData.js":"43","D:\\GFS_Trace\\src\\Data\\IrrigationData.js":"44","D:\\GFS_Trace\\src\\Data\\SpreadingData.js":"45","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Nozzles\\NTable.js":"46","D:\\GFS_Trace\\src\\Data\\UserData.js":"47","D:\\GFS_Trace\\src\\Data\\SpraylogsData.js":"48","D:\\GFS_Trace\\src\\Data\\EquipmentData.js":"49","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\tableDetails.js":"50","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tabledetails.js":"51","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\FarmReport.js":"52","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\FertiliserReport.js":"53","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\ChemicalReport.js":"54","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\FuelReport.js":"55","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\EquipmentReport.js":"56","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\GrainReport.js":"57","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tabledetails.js":"58","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\PaddockReport.js":"59","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Livestock\\LsTable.js":"60","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\WaterStorageTable.js":"61","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\ReportTableData.js":"62","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\SiloTable.js":"63","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\FueltankTable.js":"64","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\PaddockTable.js":"65","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\Outgoing.js":"66","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\StockTake.js":"67","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\Ingoing.js":"68","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\Chemicals.js":"69","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tables\\Ingoing.js":"70","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tables\\Outgoing.js":"71","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tables\\Storages.js":"72","D:\\GFS_Trace\\src\\Data\\WaterStorageData.js":"73","D:\\GFS_Trace\\src\\Data\\SiloData.js":"74","D:\\GFS_Trace\\src\\Data\\FuelTankData.js":"75","D:\\GFS_Trace\\src\\Data\\PaddockData.js":"76","D:\\GFS_Trace\\src\\Data\\InventoryWaterData.js":"77","D:\\GFS_Trace\\src\\Data\\InventoryChemicalData.js":"78","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\InventoryFertilizer.js":"79","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\FertiliserTable.js":"80","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tabledetails.js":"81","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Outgoing.js":"82","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Fertilisers.js":"83","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Ingoing.js":"84","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\StockTake.js":"85","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Tabledatas.js":"86","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\GrainsTable.js":"87","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tabledetails.js":"88","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Contracts.js":"89","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Total.js":"90","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Ingoing.js":"91","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Silos.js":"92","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Outgoing.js":"93","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Transfer.js":"94","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Tabledatas.js":"95","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Chart.js":"96","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\BarChart.js":"97","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\FuelTable.js":"98","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tabledetails.js":"99","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Total.js":"100","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Outgoing.js":"101","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\StockTake.js":"102","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Ingoing.js":"103","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\FuelTank.js":"104","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Tabledatas.js":"105","D:\\GFS_Trace\\src\\components\\pages\\Login\\SignUp.js":"106","D:\\GFS_Trace\\src\\components\\pages\\Login\\SignIn.js":"107","D:\\GFS_Trace\\src\\components\\pages\\Login\\Forget.js":"108","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Cultivars\\Cultivarsmain.js":"109","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Cultivars\\Useform.js":"110","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Cultivars\\Table.js":"111"},{"size":651,"mtime":1652352653311,"results":"112","hashOfConfig":"113"},{"size":625,"mtime":1652352653255,"results":"114","hashOfConfig":"113"},{"size":4603,"mtime":1653322023065,"results":"115","hashOfConfig":"113"},{"size":375,"mtime":1652352653312,"results":"116","hashOfConfig":"113"},{"size":218,"mtime":1652352653190,"results":"117","hashOfConfig":"113"},{"size":2161,"mtime":1653311286667,"results":"118","hashOfConfig":"113"},{"size":2424,"mtime":1652870847753,"results":"119","hashOfConfig":"113"},{"size":1198,"mtime":1652352653174,"results":"120","hashOfConfig":"113"},{"size":2783,"mtime":1652352653190,"results":"121","hashOfConfig":"113"},{"size":6299,"mtime":1653138848959,"results":"122","hashOfConfig":"113"},{"size":3142,"mtime":1652871151414,"results":"123","hashOfConfig":"113"},{"size":415,"mtime":1652352653190,"results":"124","hashOfConfig":"113"},{"size":2906,"mtime":1652352653190,"results":"125","hashOfConfig":"113"},{"size":405,"mtime":1652352653190,"results":"126","hashOfConfig":"113"},{"size":3622,"mtime":1653137645051,"results":"127","hashOfConfig":"113"},{"size":2831,"mtime":1652352653190,"results":"128","hashOfConfig":"113"},{"size":10254,"mtime":1652352653190,"results":"129","hashOfConfig":"113"},{"size":3625,"mtime":1653137664426,"results":"130","hashOfConfig":"113"},{"size":3605,"mtime":1653137582618,"results":"131","hashOfConfig":"113"},{"size":3575,"mtime":1653137612475,"results":"132","hashOfConfig":"113"},{"size":3708,"mtime":1653138137923,"results":"133","hashOfConfig":"113"},{"size":469,"mtime":1652352653207,"results":"134","hashOfConfig":"113"},{"size":3586,"mtime":1653137547308,"results":"135","hashOfConfig":"113"},{"size":3797,"mtime":1653137599122,"results":"136","hashOfConfig":"113"},{"size":3893,"mtime":1653137691770,"results":"137","hashOfConfig":"113"},{"size":454,"mtime":1652352653212,"results":"138","hashOfConfig":"113"},{"size":614,"mtime":1652352653211,"results":"139","hashOfConfig":"113"},{"size":1282,"mtime":1653140477144,"results":"140","hashOfConfig":"113"},{"size":939,"mtime":1652352653190,"results":"141","hashOfConfig":"113"},{"size":1154,"mtime":1652352653212,"results":"142","hashOfConfig":"113"},{"size":1367,"mtime":1652352653207,"results":"143","hashOfConfig":"113"},{"size":5327,"mtime":1653146983396,"results":"144","hashOfConfig":"113"},{"size":184,"mtime":1653136943629,"results":"145","hashOfConfig":"113"},{"size":623,"mtime":1652352653174,"results":"146","hashOfConfig":"113"},{"size":1653,"mtime":1653138284506,"results":"147","hashOfConfig":"113"},{"size":1729,"mtime":1653138282154,"results":"148","hashOfConfig":"113"},{"size":1569,"mtime":1652352653174,"results":"149","hashOfConfig":"113"},{"size":1523,"mtime":1653138290781,"results":"150","hashOfConfig":"113"},{"size":1555,"mtime":1653138189225,"results":"151","hashOfConfig":"113"},{"size":640,"mtime":1653311397680,"results":"152","hashOfConfig":"113"},{"size":1951,"mtime":1652352653174,"results":"153","hashOfConfig":"113"},{"size":8024,"mtime":1652937458342,"results":"154","hashOfConfig":"113"},{"size":1477,"mtime":1653138295408,"results":"155","hashOfConfig":"113"},{"size":1446,"mtime":1653138301098,"results":"156","hashOfConfig":"113"},{"size":1451,"mtime":1653138305924,"results":"157","hashOfConfig":"113"},{"size":2970,"mtime":1652352653190,"results":"158","hashOfConfig":"113"},{"size":1555,"mtime":1652352653174,"results":"159","hashOfConfig":"113"},{"size":1441,"mtime":1653138968186,"results":"160","hashOfConfig":"113"},{"size":1174,"mtime":1652352653174,"results":"161","hashOfConfig":"113"},{"size":621,"mtime":1652352653190,"results":"162","hashOfConfig":"113"},{"size":720,"mtime":1652352653207,"results":"163","hashOfConfig":"113"},{"size":5482,"mtime":1653129942992,"results":"164","hashOfConfig":"113"},{"size":918,"mtime":1652352653190,"results":"165","hashOfConfig":"113"},{"size":893,"mtime":1652352653190,"results":"166","hashOfConfig":"113"},{"size":924,"mtime":1652352653190,"results":"167","hashOfConfig":"113"},{"size":2215,"mtime":1652352653190,"results":"168","hashOfConfig":"113"},{"size":939,"mtime":1652352653190,"results":"169","hashOfConfig":"113"},{"size":591,"mtime":1652352653212,"results":"170","hashOfConfig":"113"},{"size":3799,"mtime":1652352653190,"results":"171","hashOfConfig":"113"},{"size":3173,"mtime":1652352653190,"results":"172","hashOfConfig":"113"},{"size":2279,"mtime":1653140633724,"results":"173","hashOfConfig":"113"},{"size":2647,"mtime":1652352653190,"results":"174","hashOfConfig":"113"},{"size":2045,"mtime":1653140621325,"results":"175","hashOfConfig":"113"},{"size":1886,"mtime":1653140594104,"results":"176","hashOfConfig":"113"},{"size":2156,"mtime":1653140605814,"results":"177","hashOfConfig":"113"},{"size":3371,"mtime":1652869991595,"results":"178","hashOfConfig":"113"},{"size":3772,"mtime":1652870039222,"results":"179","hashOfConfig":"113"},{"size":3937,"mtime":1652869929460,"results":"180","hashOfConfig":"113"},{"size":3029,"mtime":1652869801468,"results":"181","hashOfConfig":"113"},{"size":3937,"mtime":1652420533455,"results":"182","hashOfConfig":"113"},{"size":3489,"mtime":1652420789604,"results":"183","hashOfConfig":"113"},{"size":3036,"mtime":1652420700964,"results":"184","hashOfConfig":"113"},{"size":626,"mtime":1652352653174,"results":"185","hashOfConfig":"113"},{"size":416,"mtime":1652352653174,"results":"186","hashOfConfig":"113"},{"size":379,"mtime":1652352653174,"results":"187","hashOfConfig":"113"},{"size":490,"mtime":1652352653174,"results":"188","hashOfConfig":"113"},{"size":255,"mtime":1652352653174,"results":"189","hashOfConfig":"113"},{"size":1581,"mtime":1652352653174,"results":"190","hashOfConfig":"113"},{"size":441,"mtime":1652352653190,"results":"191","hashOfConfig":"113"},{"size":1372,"mtime":1652352653190,"results":"192","hashOfConfig":"113"},{"size":728,"mtime":1652352653190,"results":"193","hashOfConfig":"113"},{"size":2993,"mtime":1652352653205,"results":"194","hashOfConfig":"113"},{"size":2004,"mtime":1652352653190,"results":"195","hashOfConfig":"113"},{"size":3514,"mtime":1652352653205,"results":"196","hashOfConfig":"113"},{"size":3366,"mtime":1652352653206,"results":"197","hashOfConfig":"113"},{"size":1621,"mtime":1652352653206,"results":"198","hashOfConfig":"113"},{"size":1933,"mtime":1652871258857,"results":"199","hashOfConfig":"113"},{"size":936,"mtime":1638611160000,"results":"200","hashOfConfig":"113"},{"size":4493,"mtime":1641100110000,"results":"201","hashOfConfig":"113"},{"size":4038,"mtime":1652872466870,"results":"202","hashOfConfig":"113"},{"size":5471,"mtime":1652872452305,"results":"203","hashOfConfig":"113"},{"size":3443,"mtime":1652872437131,"results":"204","hashOfConfig":"113"},{"size":5654,"mtime":1652872445459,"results":"205","hashOfConfig":"113"},{"size":4194,"mtime":1652872461339,"results":"206","hashOfConfig":"113"},{"size":3319,"mtime":1652815390000,"results":"207","hashOfConfig":"113"},{"size":1506,"mtime":1639201024000,"results":"208","hashOfConfig":"113"},{"size":739,"mtime":1639254392000,"results":"209","hashOfConfig":"113"},{"size":1548,"mtime":1652871319845,"results":"210","hashOfConfig":"113"},{"size":845,"mtime":1641017494000,"results":"211","hashOfConfig":"113"},{"size":4661,"mtime":1641013580000,"results":"212","hashOfConfig":"113"},{"size":4756,"mtime":1652421876000,"results":"213","hashOfConfig":"113"},{"size":4193,"mtime":1641013742000,"results":"214","hashOfConfig":"113"},{"size":4503,"mtime":1652421862000,"results":"215","hashOfConfig":"113"},{"size":3357,"mtime":1652815276000,"results":"216","hashOfConfig":"113"},{"size":1809,"mtime":1652815170000,"results":"217","hashOfConfig":"113"},{"size":1008,"mtime":1653125009946,"results":"218","hashOfConfig":"113"},{"size":2015,"mtime":1653124418759,"results":"219","hashOfConfig":"113"},{"size":1108,"mtime":1653124492502,"results":"220","hashOfConfig":"113"},{"size":14245,"mtime":1652866096000,"results":"221","hashOfConfig":"113"},{"size":531,"mtime":1635126996000,"results":"222","hashOfConfig":"113"},{"size":4143,"mtime":1653322075175,"results":"223","hashOfConfig":"113"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},"1v1fsp0",{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"226"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"226"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"226"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"226"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"226"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"226"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"226"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"226"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"226"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"226"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"226"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"226"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"226"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"226"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"226"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"226"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"226"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"226"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"226"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"226"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"226"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"226"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"226"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"226"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"226"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"226"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"226"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"226"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"226"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"226"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"226"},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"226"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"226"},{"filePath":"441","messages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"226"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"226"},{"filePath":"447","messages":"448","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449","usedDeprecatedRules":"226"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"226"},{"filePath":"453","messages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"226"},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"226"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"226"},{"filePath":"462","messages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"226"},{"filePath":"465","messages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"226"},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"226"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"226"},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"226"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"226"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"226"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"226"},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"226"},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494"},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497"},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500"},"D:\\GFS_Trace\\src\\index.js",[],["501","502"],"D:\\GFS_Trace\\src\\i18nextInit.js",[],"D:\\GFS_Trace\\src\\App.js",["503"],"import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport { useTranslation, I18nextProvider } from 'react-i18next';\r\nimport Structure from \"./components/Layout/Structure\";\r\n//import Dashboard from \"./components/pages/Dashboard/Dashboard\";\r\nimport Job from \"./components/pages/Job/job\";\r\nimport Signup from \"./components/pages/Login/SignUp\";\r\nimport Signin from \"./components/pages/Login/SignIn\";\r\nimport Forget from \"./components/pages/Login/Forget\";\r\nimport Equipments from \"./components/pages/FarmAssets/Equipments/Equipments\";\r\nimport Farms from \"./components/pages/FarmAssets/Farms/farms\";\r\nimport Chemicals from \"./components/pages/FarmAssets/Chemicals/Chemical\";\r\nimport Users from \"./components/pages/FarmAssets/Users/Users\";\r\nimport Fertiliser from \"./components/pages/FarmAssets/Fertiliser/FertiliserTable\";\r\nimport Livestock from \"./components/pages/FarmAssets/Livestock/LiveStock\";\r\nimport Cultivars from \"./components/pages/FarmAssets/Cultivars/Table\";\r\nimport WaterLicence from \"./components/pages/FarmAssets/WaterLicence/WaterLicence\";\r\nimport Nozzles from \"./components/pages/FarmAssets/Nozzles/Nozzles\";\r\nimport InventoryChemical from \"./components/pages/Inventory/InventoryChemical/InventoryChemical\";\r\nimport Grain from \"./components/pages/Inventory/GrainInventory/GrainsTable\";\r\nimport Spraylogs from \"./components/pages/Activities/Spraylogs/Spraylogs\";\r\nimport Planting from \"./components/pages/Activities/Planting/Planting\";\r\nimport Spreading from \"./components/pages/Activities/Spreading/Spreading\";\r\nimport Harvest from \"./components/pages/Activities/Harvest/Harvest\";\r\nimport Grazing from \"./components/pages/Activities/Grazing/Grazing\";\r\nimport Irrigation from \"./components/pages/Activities/Irrigation/Irrigation\";\r\nimport Maintenance from \"./components/pages/Activities/Maintenance/Maintenance\";\r\nimport VetTreatment from \"./components/pages/Activities/VetTreatment/VetTreatment\";\r\nimport InventoryWater from \"./components/pages/Inventory/Water/InventoryWater\";  \r\nimport Custom from \"./components/pages/CustomReport/Custom\"; \r\nimport InventoryFuel from \"./components/pages/Inventory/FuelInventory/FuelTable\";\r\nimport InventoryFertilizer from \"./components/pages/Inventory/FertilizerInventory/InventoryFertilizer\";\r\nimport Inventoryreport from \"./components/pages/Inventory/InventoryReport/Inventoryreport\";\r\nfunction App (){\r\n  const {i18n}=useTranslation();\r\n  \r\n    return (\r\n      <I18nextProvider i18n={i18n}>\r\n      <Router >\r\n        <Structure>\r\n          <Routes>\r\n            {/* <Route path=\"/\" element={<Dashboard/>}/> */}\r\n            <Route path=\"/\" element={<Signin/>}/>\r\n            <Route path=\"/Signup\" element={<Signup/>}/>\r\n           \r\n            <Route path=\"/Forget\" element={<Forget/>}/>\r\n            <Route path=\"/Jobs\" element={<Job/>}/>\r\n            <Route path=\"/Equipments\" element={<Equipments/>}/>\r\n            <Route path=\"/Farms\" element={<Farms/>}/>\r\n            <Route path=\"/Chemicals\" element={<Chemicals/>}/>\r\n            <Route path=\"/Users\" element={<Users/>}/>\r\n            <Route path=\"/Fertiliser\" element={<Fertiliser/>}/>\r\n            <Route path=\"/Nozzles\" element={<Nozzles/>}/>\r\n            <Route path=\"/Livestock\" element={<Livestock/>}/>\r\n            <Route path=\"/WaterLicence\" element={<WaterLicence/>}/>\r\n            <Route path=\"/InventoryChemical\" element={<InventoryChemical/>}/>\r\n            <Route path=\"/InventoryFertilizer\" element={<InventoryFertilizer/>}/>\r\n            <Route path=\"/InventoryFuel\" element={<InventoryFuel/>}/>\r\n            <Route path=\"/Spraylogs\" element={<Spraylogs/>}/>\r\n            <Route path=\"/Planting\" element={<Planting/>}/>\r\n            <Route path=\"/Spreading\" element={<Spreading/>}/>\r\n            <Route path=\"/Harvest\" element={<Harvest/>}/>\r\n            <Route path=\"/Grazing\" element={<Grazing/>}/>\r\n            <Route path=\"/InventoryWater\" element={<InventoryWater/>}/>\r\n            <Route path=\"/Irrigation\" element={<Irrigation/>}/>\r\n            <Route path=\"/Maintenance\" element={<Maintenance/>}/>\r\n            <Route path=\"/VetTreatment\" element={<VetTreatment/>}/>\r\n            <Route path=\"/Custom\" element={<Custom/>}/>\r\n            <Route path=\"/Cultivars\" element={<Cultivars/>}/>\r\n            <Route path=\"/InventoryReport\" element={<Inventoryreport/>}/>\r\n            <Route path=\"/Grain\" element={<Grain/>}/>\r\n           \r\n          </Routes>\r\n          \r\n        </Structure>     \r\n         \r\n      </Router>\r\n      </I18nextProvider>\r\n    );\r\n  \r\n}\r\n\r\nexport default App;\r\n","D:\\GFS_Trace\\src\\reportWebVitals.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Dashboard\\Dashboard.js",[],["504","505"],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\farms.js",[],"D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Custom.js",["506","507","508","509","510","511","512","513"],"import React from 'react'\r\nimport Typography from '@mui/material/Typography';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DateRangePicker from '@mui/lab/DateRangePicker';\r\nimport Box from '@mui/material/Box';\r\nimport ReportTableDetails from './ReportTableDetails';\r\nimport { Grid } from '@mui/material';\r\n\r\nfunction Custom() {\r\n  const [field, setfield] = React.useState(\"\");\r\n  const [value, setValue] = React.useState([null, null]);\r\n  const handleChange = (event) => {\r\n    setfield(event.target.value);\r\n  };\r\n  return (\r\n    <div>\r\n      <Grid container>\r\n        <Grid item xs={3}>\r\n          <h1 style={{paddingLeft: \"30px\", paddingTop: \"20px\"}}>Custom Reports</h1>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <br />\r\n          <select class=\"ui dropdown\" style={{ width: 200, backgroundColor: 'lightgreen', color: 'black' }} onChange={handleChange}>\r\n            <option value=\"\" >Farms</option>\r\n            <option value={2} >Paddocks</option>\r\n            <option value={3} >Equipment</option>\r\n            <option value={4} >Grain</option>\r\n            <option value={5}>Chemicals</option>\r\n            <option value={6} >Fuel</option>\r\n            <option value={7}>Fertilisers</option>\r\n          </select>\r\n        </Grid>\r\n\r\n        {/* <Grid item xs={5}>\r\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <div>\r\n              <Typography sx={{ mt: 2, mb: 1 }}>Date Range </Typography>\r\n              <DateRangePicker\r\n                calendars={1}\r\n                value={value}\r\n                onChange={(newValue) => {\r\n                  setValue(newValue);\r\n                }}\r\n                renderInput={(startProps, endProps) => (\r\n                  <React.Fragment>\r\n                    <TextField variant=\"standard\" {...startProps}/>\r\n                    <Box sx={{ mx: 2 }}> ~ </Box>\r\n                    <TextField variant=\"standard\" {...endProps} />\r\n                  </React.Fragment>\r\n                )}\r\n\r\n              />\r\n            </div>\r\n          </LocalizationProvider>\r\n        </Grid> */}\r\n      </Grid>\r\n      <br />\r\n      <br />\r\n      {/* <Segment attached='bottom'> */}\r\n      <div><ReportTableDetails dataValue={field} /></div>\r\n      {/* </Segment> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Custom\r\n","D:\\GFS_Trace\\src\\components\\Layout\\Structure.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Chemicals\\Chemical.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Job\\job.js",["514"],"import React, { useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { MTableCell } from \"material-table\";\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport \"./job.css\";\r\nimport '../Pages.css';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport {useTranslation,Trans} from 'react-i18next';\r\n\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {Icon} from 'semantic-ui-react';\r\nimport {\r\n  jobData_withoutcomplete,\r\n  jobData_withcomplete,\r\n} from \"../../../Data/JobData\";\r\n\r\nexport default function Job() {\r\n\r\n\r\n\r\n  const [selected, toggleselected] = useState(false);\r\n  const {t} =useTranslation();\r\n  \r\n  const columns = [\r\n    {\r\n\r\n      title: t('jobs.status',\"Status\"),\r\n      field: \"status\",\r\n     \r\n     \r\n      lookup: { '0': <Trans i18nKey=\"jobs.raised\">Raised</Trans>,\r\n      '1': t('jobs.raisedandassigned','Raised And Assigned'),\r\n      '2': t('jobs.inprogress','In Progress'),\r\n      '3': t('jobs.onhold','On Hold'),\r\n      '4': t('jobs.completed','Completed'),\r\n\r\n      } ,\r\n      render: rowData => {\r\n        return <Tooltip title={rowData.status} placement=\"bottom-start\" arrow>\r\n           </Tooltip>            \r\n     },\r\n      render: rowData => {\r\n        switch (rowData.status) {\r\n        case '0':\r\n                return <Icon name='blue circle outline' size='large'/>\r\n        case '4':\r\n                return <Icon name='green circle' size='large'/>\r\n        case '1':\r\n                return <Icon name='blue circle'size='large'/>\r\n        case '3':\r\n               return <Icon name='red circle'size='large'/>\r\n        case '2':\r\n               return <Icon name='orange circle'size='large'/>\r\n      default:\r\n        return <></>\r\n          }\r\n        }\r\n\r\n  \r\n},\r\n\r\n    { title: t('jobs.priority','Priority'), field: \"priority\" ,\r\n    lookup: { '0': t('jobs.low','Low'), \r\n    '1': t('jobs.normal','Normal'), \r\n    '2': t('jobs.high','High'), \r\n    '3': t('jobs.safety','Safety')},\r\n\r\n    render: rowData => {\r\n      switch (rowData.priority) {\r\n        case '0':\r\n           return <Icon name='angle down'size='large'/>\r\n        case '1':\r\n           return <Icon name='blue angle up'size='large'/>\r\n        case '2':\r\n           return <Icon name='red angle double up'size='large'/>\r\n   \r\n        case '3':\r\n           return <Icon name='orange exclamation triangle'size='large'/>\r\n    default:\r\n      return <></>\r\n    }}\r\n  },\r\n\r\n    { title: t('jobs.description','Description'), field: \"description\" },\r\n    { title: t('jobs.category','Category'), field: \"category\" ,\r\n    lookup: { '0': 'None', '1': 'Equipment', '2': 'Paddock', '3': 'Fuel Tank', '4': 'Silo', '5': 'Livestock'},},\r\n    { title: t('jobs.asset','Asset'), field: \"asset\" },\r\n    { title: t('jobs.duedate','Due Date'), field: \"duedate\", type:\"date\", filtering: false },\r\n    { title: t('jobs.lastupdate','Last Update'), field: \"lastupdate\", type:\"date\", filtering: false },\r\n\r\n    \r\n  ];\r\n \r\n  return (\r\n    <div  className= \"table-size\">\r\n    \r\n    <div className= \"subheader\">\r\n             \r\n\r\n        <h1 style={{\"color\": \"black\", \"margin-bottom\":\"0px\"}}><Trans i18nKey=\"jobs.heading\">Jobs</Trans> </h1><span>&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n\r\n      \r\n        <div className=\"toggle-switch\">\r\n          <Checkbox\r\n            toggle\r\n            onClick={() => toggleselected(!selected)}\r\n            checked={selected}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"completed\"><Trans i18nKey=\"general.showcompleted\">Show Completed</Trans></div>\r\n\r\n      </div>\r\n\r\n      <div className=\"equipment-table\">\r\n        <MaterialTable\r\n          columns={columns}\r\n          data={selected ? jobData_withcomplete : jobData_withoutcomplete}\r\n          editable={{\r\n            onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n            onRowUpdate:(newRow,oldRow)=> new Promise(()=>{}),\r\n            onRowDelete:(selectedRow)=> new Promise(()=>{})\r\n          }}\r\n          localization={{\r\n            toolbar:{\r\n              searchTooltip:t('materialtable.searchtooltip','Search'),\r\n              searchPlaceholder:t('materialtable.searchplaceholder','Search')\r\n            },\r\n            header:{\r\n              actions:t('materialtable.headeractions','Actions')\r\n\r\n            },\r\n            body:{\r\n              addTooltip:t('materialtable.bodyaddtooltip','Add'),\r\n              deleteTooltip:t('materialtable.bodydeletetooltip','Delete'),\r\n              editTooltip:t('materialtable.edittooltip','Edit'),\r\n              emptyDataSourceMessage:t('materialtable.emptydatasourcemessage','No records to diplay'),\r\n              editRow:{\r\n                deleteText:t('materialtable.deletetext','Are you sure u want to delete?'),\r\n                cancelTooltip:t('materialtable.editrowcanceltip','Cancel'),\r\n                saveTooltip:t('materialtable.editrowsavetooltip','Save')\r\n              },\r\n              filterRow:{\r\n                filterTooltip:t('materialtable.feltertooltip','Filter')\r\n              }\r\n            },\r\n            pagination:{\r\n              previousTooltip:t('materialtable.previoustooltip','Previous Page'),\r\n              nextTooltip:t('materialtable.nexttooltip','Next Page'),\r\n              labelRowsSelect:t('materialtable.labelrowselect','rows')\r\n              \r\n            }\r\n          }}\r\n\r\n          options={{\r\n            showTitle: false,\r\n            paging: true,\r\n            pageSizeOptions: [2, 5, 10, 15, 20],\r\n            paginationType: \"stepped\",\r\n            showFirstLastPageButtons: false,\r\n            filtering: true,\r\n            actionsColumnIndex:-1\r\n          }}\r\n           components={{\r\n          Cell: (props) => (\r\n            <Tooltip placement=\"bottom\" title={props.value ? props.value : ''}>\r\n              <MTableCell {...props} />\r\n            </Tooltip>       /// Add translation for tooltip also\r\n          ),\r\n        }}\r\n        icons={{\r\n          Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n          Edit: () => <CreateIcon color=\"action\" />,\r\n          Delete: () => <DeleteIcon color=\"action\" />\r\n         \r\n        }}\r\n        ></MaterialTable>\r\n       \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Fertiliser\\FertiliserTable.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Livestock\\LiveStock.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Equipments\\Equipments.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Nozzles\\Nozzles.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\Spraylogs\\Spraylogs.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\WaterLicence\\WaterLicence.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Users\\Users.js",["515"],"import React from \"react\";\r\nimport MaterialTable, { Column } from \"material-table\";\r\nimport \"../../Pages.css\";\r\nimport CreateIcon from \"@mui/icons-material/Create\";\r\nimport AddCircleRoundedIcon from \"@mui/icons-material/AddCircleRounded\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport UserData from \"../../../../Data/UserData\";\r\nimport { Modal, Button, Dropdown, Form } from \"semantic-ui-react\";\r\n\r\nconst options = [\r\n  { key: \"payroll\", text: \"Payroll\", value: \"Payroll\" },\r\n  { key: \"add/editusers\", text: \"Add/Edit Users\", value: \"Add/Edit Users\" },\r\n  { key: \"graininventory\", text: \"Grain Inventory\", value: \"Grain Inventory\" },\r\n  { key: \"graincontracts\", text: \"Grain Contracts\", value: \"Grain Contracts\" },\r\n  {\r\n    key: \"chemicalinventory\",\r\n    text: \"Chemical Inventory\",\r\n    value: \"Chemical Inventory\",\r\n  },\r\n  {\r\n    key: \"fertiliserinventory\",\r\n    text: \"Fertiliser Inventory\",\r\n    value: \"Fertiliser Inventory\",\r\n  },\r\n  { key: \"fuelinventory\", text: \"Fuel Inventory\", value: \"Fuel Inventory\" },\r\n  { key: \"waterinventory\", text: \"Water Inventory\", value: \"Water Inventory\" },\r\n  { key: \"spraylogs\", text: \"Spray Logs\", value: \"Spray Logs\" },\r\n  {\r\n    key: \"spraylogapproval\",\r\n    text: \"Spray Log Approval\",\r\n    value: \"Spray Log Approval\",\r\n  },\r\n  { key: \"plantings\", text: \"Plantings\", value: \"Plantings\" },\r\n  { key: \"spreadings\", text: \"Spreadings\", value: \"Spreadings\" },\r\n  { key: \"harvests\", text: \"Harvests\", value: \"Harvests\" },\r\n  {\r\n    key: \"paddockmiantainance\",\r\n    text: \"Paddock Miantainances\",\r\n    value: \"Paddock Maintainances\",\r\n  },\r\n  { key: \"irigation\", text: \"Irrigation\", value: \"Irrigation\" },\r\n  { key: \"grazing\", text: \"Grazing\", value: \"Grazing\" },\r\n];\r\nconst roles = [\r\n  { key: \"User\", text: \"User\", value: \"User\" },\r\n  { key: \"admin\", text: \"Admin\", value: \"Admin\" },\r\n];\r\n\r\nvar chipcolor = \"\";\r\n\r\nexport default function Users() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [confopen, setconfOpen] = React.useState(false);\r\n  const [rowdatas, setrowdatas] = React.useState({});\r\n  const [newedit, setnewedit] = React.useState(true);\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      render: (rowData) => rowData.first_name + \" \" + rowData.last_name,\r\n    },\r\n    {\r\n      title: \"User Role\",\r\n      field: \"user_role\",\r\n      render(rowdata) {\r\n        function Switches(rowdata) {\r\n          if (rowdata.user_role === \"Owner\") {\r\n            chipcolor = \"error\";\r\n          } else if (rowdata.user_role === \"User\") {\r\n            chipcolor = \"primary\";\r\n          } else {\r\n            chipcolor = \"warning\";\r\n          }\r\n\r\n          return (\r\n            <div>\r\n              <Chip color={chipcolor} label={rowdata.user_role} />\r\n            </div>\r\n          );\r\n        }\r\n        return Switches(rowdata);\r\n      },\r\n    },\r\n    {\r\n      title: \"Permissions\",\r\n      field: \"permissions\",\r\n    },\r\n    {\r\n      title: \"Phone\",\r\n      field: \"Phone\",\r\n    },\r\n    {\r\n      title: \"Email\",\r\n      field: \"email\",\r\n    },\r\n    {\r\n      title: \"Address\",\r\n\r\n      render: (rowData) =>\r\n        rowData.address_line1 +\r\n        \" \" +\r\n        rowData.address_line2 +\r\n        \" \" +\r\n        rowData.town +\r\n        \" \" +\r\n        rowData.state +\r\n        \" \" +\r\n        rowData.pin_code +\r\n        \" \" +\r\n        rowData.country,\r\n    },\r\n  ];\r\n  return (\r\n    <div className=\"table-size\">\r\n      <div className=\"subheader\">\r\n        <h1 style={{ color: \"black\", \"margin-bottom\": \"0px\" }}>Users </h1>\r\n        <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n      </div>\r\n      <Modal onClose={() => setOpen(false)} open={open} as={Form}>\r\n        <Modal.Header>\r\n          {newedit === true ? \"New User\" : \"Edit User\"}\r\n        </Modal.Header>\r\n        <Modal.Content>\r\n          <Form>\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Input\r\n                fluid\r\n                required\r\n                label=\"First name \"\r\n                placeholder=\"First name\"\r\n                id=\"form-input-first-name\"\r\n                defaultValue={rowdatas.first_name}\r\n              />\r\n              <Form.Input\r\n                required\r\n                fluid\r\n                label=\"Last name \"\r\n                placeholder=\"Last name\"\r\n                id=\"form-input-last-name\"\r\n                defaultValue={rowdatas.last_name}\r\n              />\r\n            </Form.Group>\r\n            {rowdatas.user_role === \"Owner\" ? (\r\n              \"\"\r\n            ) : (\r\n              <Form.Group inline>\r\n                <Form.Field required>\r\n                  <label>User Roles</label>\r\n                  <Dropdown\r\n                    widths={5}\r\n                    fluid\r\n                    clearable\r\n                    selection\r\n                    options={roles}\r\n                    defaultValue={(roles.value = rowdatas.user_role)}\r\n                  />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <label>User Permissions</label>\r\n                  <Dropdown\r\n                    multiple\r\n                    fluid\r\n                    selection\r\n                    options={options}\r\n                    defaultValue={(options.values = rowdatas.permissions)}\r\n                  />\r\n                </Form.Field>\r\n              </Form.Group>\r\n            )}\r\n\r\n            <Form.Input\r\n              fluid\r\n              width={6}\r\n              label=\"Phone Number\"\r\n              placeholder=\"Ph No\"\r\n              id=\"form-input-phone\"\r\n              defaultValue={rowdatas.Phone}\r\n            />\r\n            <Form.Input\r\n              fluid\r\n              width={6}\r\n              label=\"Email Address\"\r\n              placeholder=\"Email\"\r\n              id=\"form-input-email\"\r\n              defaultValue={rowdatas.email}\r\n            />\r\n            <Form.Input\r\n              fluid\r\n              width={6}\r\n              label=\"Address line 1\"\r\n              placeholder=\"line1\"\r\n              id=\"form-input-address-line1\"\r\n              defaultValue={rowdatas.address_line1}\r\n            />\r\n            <Form.Input\r\n              fluid\r\n              width={6}\r\n              label=\"Address line 2\"\r\n              placeholder=\"line2\"\r\n              id=\"form-input-address-line2\"\r\n              defaultValue={rowdatas.address_line2}\r\n            />\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Input\r\n                fluid\r\n                label=\"Town\"\r\n                placeholder=\"town\"\r\n                id=\"form-input-town\"\r\n                defaultValue={rowdatas.town}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                label=\"State\"\r\n                placeholder=\"state\"\r\n                id=\"form-input-state\"\r\n                defaultValue={rowdatas.state}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Input\r\n                fluid\r\n                label=\"Pin Code\"\r\n                placeholder=\"Pin\"\r\n                id=\"form-input-pincode\"\r\n                defaultValue={rowdatas.pin_code}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                label=\"Country\"\r\n                placeholder=\"country\"\r\n                id=\"form-input-Country\"\r\n                defaultValue={rowdatas.country}\r\n              />\r\n            </Form.Group>\r\n            <Form.Field>\r\n              <label>* indicates required fields</label>\r\n            </Form.Field>\r\n          </Form>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button type=\"submit\" color=\"black\" onClick={() => setOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            content=\"Save\"\r\n            labelPosition=\"right\"\r\n            icon=\"checkmark\"\r\n            onClick={() => {\r\n              setOpen(false);\r\n              setconfOpen(true);\r\n            }}\r\n            positive\r\n          />\r\n        </Modal.Actions>\r\n      </Modal>\r\n\r\n      <Modal size=\"tiny\" onClose={() => setconfOpen(false)} open={confopen}>\r\n        <Modal.Header>Confirm Login</Modal.Header>\r\n        <Modal.Content>\r\n          <Form>\r\n            <Form.Field>\r\n              <label>Email</label>\r\n              <input placeholder=\"Username\" />\r\n            </Form.Field>\r\n            <Form.Field>\r\n              <label>Password</label>\r\n              <input placeholder=\"password\" type=\"password\" />\r\n            </Form.Field>\r\n          </Form>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button color=\"black\" onClick={() => setOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            content=\"Login\"\r\n            labelPosition=\"right\"\r\n            icon=\"checkmark\"\r\n            onClick={() => setconfOpen(false)}\r\n            positive\r\n          />\r\n        </Modal.Actions>\r\n      </Modal>\r\n      <div className=\"equipment-table\"></div>\r\n      <MaterialTable\r\n        columns={columns}\r\n        data={UserData}\r\n        editable={{\r\n          onRowDelete: (selectedRow) => new Promise(() => {}),\r\n        }}\r\n        options={{\r\n          showTitle: false,\r\n          paging: true,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n          exportButton: false,\r\n          actionsColumnIndex: -1,\r\n        }}\r\n        actions={[\r\n          {\r\n            icon: () => <CreateIcon color=\"action\" />,\r\n            onClick: (rowData, e) => {\r\n              setnewedit(false);\r\n              setrowdatas(e);\r\n              setOpen(true);\r\n            },\r\n          },\r\n          {\r\n            icon: () => (\r\n              <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />\r\n            ),\r\n            tooltip: \"Add User\",\r\n            isFreeAction: true,\r\n            onClick: () => {\r\n              setnewedit(true);\r\n              setrowdatas({});\r\n              setOpen(true);\r\n            },\r\n          },\r\n        ]}\r\n        icons={{\r\n          Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n          Edit: () => <CreateIcon color=\"action\" />,\r\n          Delete: () => <DeleteIcon color=\"action\" />,\r\n        }}\r\n      ></MaterialTable>\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Activities\\Spreading\\Spreading.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\Irrigation\\Irrigation.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\Planting\\Planting.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\Grazing\\Grazing.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\InventoryChemical.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\Harvest\\Harvest.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\Maintenance\\Maintenance.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Activities\\VetTreatment\\VetTreatment.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\InventoryWater.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryReport\\Inventoryreport.js",["516"],"import React from \"react\";\r\nimport \"../../Pages.css\";\r\nimport { FaFilter } from \"react-icons/fa\";\r\nimport GearIcon from \"mdi-react/GearIcon\";\r\n\r\nexport default function Inventoryreport() {\r\n  return (\r\n    <div className=\"table-size\">\r\n      <div className=\"subheader\">\r\n        <h1 style={{ color: \"black\" }}>Inventory Reports </h1>\r\n        <span>&nbsp;&nbsp;</span>\r\n        <div className=\"icon-align\">\r\n          <GearIcon\r\n            style={{ cursor: \"pointer\", color: \"black\" }}\r\n            onClick={console.log(\"modal opened\")}\r\n          ></GearIcon>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\farmTable.js",[],"D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\ReportTableDetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\InventoryWaterTable.js",["517"],"import React, {useState} from 'react'\r\nimport { Segment } from 'semantic-ui-react';\r\nimport {Menu} from 'semantic-ui-react';\r\nimport TableDetails from './Tabledetails'\r\nimport \"./Water.css\"\r\n\r\n\r\nexport default function InventoryWaterTable()  {\r\n    const [state, setState] = React.useState(\"STORAGES\"); \r\n\r\n      return (\r\n        <div className=\"water\">\r\n          <Menu pointing>\r\n            <Menu.Item\r\n              name='STORAGES'\r\n              active={state === 'STORAGES'}\r\n             color=\"green\"\r\n             onClick={() => setState(\"STORAGES\")}\r\n            />\r\n            <Menu.Item\r\n              name='INGOING'\r\n              active={state === 'INGOING'}\r\n              onClick={() => setState(\"INGOING\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='OUTGOING'\r\n              active={state === 'OUTGOING'}\r\n              onClick={() => setState(\"OUTGOING\")}\r\n              color=\"green\"\r\n            />\r\n          \r\n           \r\n          </Menu>\r\n          <Segment attached='bottom'>\r\n         <TableDetails dataValue={state}/>\r\n        </Segment>\r\n         \r\n        </div>\r\n    );\r\n  }","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\InventoryChemicalTable.js",["518"],"import React, {useState} from 'react'\r\nimport { Segment } from 'semantic-ui-react';\r\nimport {Menu} from 'semantic-ui-react';\r\nimport TableDetails from './Tabledetails'\r\nimport \"./Chemical.css\"\r\n\r\n\r\nexport default function InventoryChemicalTable()  {\r\n    const [state, setState] = React.useState(\"CHEMICALS\"); \r\n\r\n      return (\r\n        <div className=\"chemical\">\r\n          <Menu pointing>\r\n            <Menu.Item\r\n              name='CHEMICALS'\r\n              active={state === 'CHEMICALS'}\r\n             color=\"green\"\r\n             onClick={() => setState(\"CHEMICALS\")}\r\n            />\r\n            <Menu.Item\r\n              name='INGOING'\r\n              active={state === 'INGOING'}\r\n              onClick={() => setState(\"INGOING\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='OUTGOING'\r\n              active={state === 'OUTGOING'}\r\n              onClick={() => setState(\"OUTGOING\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='STOCKTAKE'\r\n              active={state === 'STOCKTAKE'}\r\n              onClick={() => setState(\"STOCKTAKE\")}\r\n              color=\"green\"\r\n            />\r\n          \r\n           \r\n          </Menu>\r\n          <Segment attached='bottom'>\r\n         <TableDetails dataValue={state}/>\r\n        </Segment>\r\n         \r\n        </div>\r\n    );\r\n  }","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\FarmListPopup\\farmpopup.js",[],"D:\\GFS_Trace\\src\\Data\\farmData.js",[],"D:\\GFS_Trace\\src\\Data\\ChemicalData.js",[],"D:\\GFS_Trace\\src\\Data\\MaintenanceData.js",[],"D:\\GFS_Trace\\src\\Data\\VetTreatmentData.js",[],"D:\\GFS_Trace\\src\\Data\\JobData.js",[],"D:\\GFS_Trace\\src\\Data\\HarvestData.js",[],"D:\\GFS_Trace\\src\\Data\\GrazingData.js",[],"D:\\GFS_Trace\\src\\components\\HeaderFooter\\Header.js",["519"],"import React from \"react\";\r\nimport farmsimple from \"../../images/logo.jpg\";\r\nimport \"./header.css\";\r\nimport {Trans} from 'react-i18next';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <img className=\"main-logo\" src={farmsimple} width=\"50\" height=\"50\" />\r\n      <div class=\"logoName\" style={{ color: \"rgb(79, 79, 79)\" }}>\r\n        <b>GFS</b> Trace\r\n      </div>\r\n      <div className=\"spacer\"></div>\r\n      <span className=\"userDetails\">Ashish Abhilash </span> |\r\n      \r\n     \r\n      <button className=\"logout\"><Trans i18nKey=\"header.logout\"> Logout\r\n        </Trans></button>\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\components\\HeaderFooter\\footer.js",["520","521","522"],"\r\nimport {React,useState} from 'react';\r\nimport YoutubeIcon from 'mdi-react/YoutubeIcon';\r\nimport \"./footer.css\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport FacebookIcon from 'mdi-react/FacebookIcon';\r\nimport TwitterIcon from 'mdi-react/TwitterIcon';\r\nimport { Dropdown } from 'semantic-ui-react';\r\n//import EyeIcon from 'mdi-react/EyeIcon';\r\n\r\nconst languageOptions =[\r\n  {key:'English',text:'English',value:'en'},\r\n  {key:'Malayalam',text:'മലയാളം',value:'ml'},\r\n  {key:'Tamil',text:'தமிழ்',value:'tm'}\r\n]\r\n\r\nexport default function Footer() {\r\n  const [language, setlanguage] = useState(\"en\")\r\n  const {i18n}=useTranslation();\r\n  const handleDropdown=(event,lang)=>{\r\n    setlanguage(lang.value)\r\n    i18n.changeLanguage(lang.value)\r\n   \r\n  }\r\n  return(\r\n       \r\n       \r\n      <div className='footer-main'>\r\n        <div><Dropdown\r\n        upward\r\n        selection\r\n        onChange={handleDropdown}\r\n        button\r\n        className=\"icon\"\r\n        labeled\r\n        icon=\"world\"\r\n        value={language}\r\n        scrolling\r\n        options={languageOptions}\r\n        placeholder=\"Language\"\r\n        /></div>\r\n    \r\n      \r\n     <a href=\"#\" className=\"margin-one footer-button footer-button-icon footer-button-round button-color button-size-small\"><span className=\"footer-icon\"><FacebookIcon size={24} /></span></a>\r\n      \r\n      <a href=\"#\" className=\"margin-one footer-button footer-button-icon footer-button-round button-color button-size-small\"><span className=\"footer-icon\"><TwitterIcon size={24} /></span></a>\r\n      \r\n      <a href=\"#\" className=\"margin-one footer-button footer-button-icon footer-button-round button-color button-size-small\"><span className=\"footer-icon\"><YoutubeIcon size={24} /></span></a>\r\n      \r\n      <span style={{\"margin-left\": \"10px\", \"align-items\": \"center\", \"color\": \"rgb(79, 79, 79)\", \"top\": \"0\"}}> © 2021 \r\n    \r\n      </span>\r\n    </div>\r\n  \r\n     \r\n      );\r\n}\r\n\r\n","D:\\GFS_Trace\\src\\components\\Sidebar\\Navbar.js",["523","524","525","526","527"],"import { React } from \"react\";\r\nimport { Menu } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Trans } from \"react-i18next\";\r\nimport { MdSpaceDashboard } from \"react-icons/md\";\r\nimport { VscOpenPreview } from \"react-icons/vsc\";\r\nimport { GoProject } from \"react-icons/go\";\r\nimport {\r\n  FaWarehouse,\r\n  FaUserClock,\r\n  FaCalendarAlt,\r\n  FaTasks,\r\n  FaHandHoldingWater,\r\n  FaTools,\r\n  FaUsers,\r\n  FaSprayCan,\r\n} from \"react-icons/fa\";\r\nimport { BsPeopleFill } from \"react-icons/bs\";\r\nimport { ImDroplet } from \"react-icons/im\";\r\nimport \"./sidebar.css\";\r\nimport { SiHappycow } from \"react-icons/si\";\r\nimport { MdVerified } from \"react-icons/md\";\r\nimport { GiMedicalPackAlt } from \"react-icons/gi\";\r\nimport { BsFillCloudLightningRainFill } from \"react-icons/bs\";\r\nimport {\r\n  GiFarmTractor,\r\n  GiGroundSprout,\r\n  GiPlantWatering,\r\n  GiFruitTree,\r\n  GiAutoRepair,\r\n  GiWheat,\r\n  GiChemicalDrop,\r\n  GiGrain,\r\n  GiFuelTank,\r\n  GiFertilizerBag,\r\n  GiField,\r\n  GiGoat,\r\n  GiGrainBundle,\r\n} from \"react-icons/gi\";\r\nconst { SubMenu } = Menu;\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div className=\"side-menu\">\r\n      <div className=\"logo\">\r\n        {!props.compact && <div className=\"Cname\">GFS Trace</div>}\r\n      </div>\r\n      <Menu theme=\"dark\" defaultSelectedKeys={[\"1\"]} mode=\"vertical\">\r\n        {/* <Menu.Item key=\"1\" icon={<MdSpaceDashboard />}>\r\n          <Link to=\"/\" />\r\n          <Trans i18nKey=\"navbar.dashboard\">Dashboard</Trans>\r\n        </Menu.Item> */}\r\n        <SubMenu key=\"sub1\" icon={<GiFarmTractor />} title={<Trans i18nKey=\"navbar.farmassets\">\r\n            Farm Assets\r\n            </Trans>}>\r\n          <Menu.Item key=\"1\" icon={<GiField />}>\r\n            <Link to=\"/Farms\" />\r\n            <Trans i18nKey=\"navbar.farms\">\r\n            Farms\r\n            </Trans>\r\n          </Menu.Item>\r\n          {/* <Menu.Item key=\"21\" icon={<BsFillCloudLightningRainFill />}>\r\n          <Trans i18nKey=\"navbar.rain\">\r\n            Rain\r\n            </Trans>\r\n          </Menu.Item> */}\r\n          <Menu.Item key=\"2\" icon={<GiGrainBundle />}>\r\n            <Link to=\"/Cultivars\" />\r\n            <Trans i18nKey=\"navbar.cultivars\">\r\n           Cultivars\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"3\" icon={<GiGoat />}>\r\n            <Link to=\"/Livestock\" />\r\n            <Trans i18nKey=\"navbar.livestock\">\r\n            Livestock\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"4\" icon={<FaTools />}>\r\n            <Link to=\"/Equipments\" />\r\n            <Trans i18nKey=\"navbar.equipments\">\r\n            Equipments\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"5\" icon={<GiChemicalDrop />}>\r\n            <Link to=\"/Chemicals\" />\r\n            <Trans i18nKey=\"navbar.chemicals\">\r\n            Chemicals\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"6\" icon={<GiFertilizerBag />}>\r\n            <Link to=\"/Fertiliser\" />\r\n            <Trans i18nKey=\"navbar.fertilizers\">\r\n            Fertilizers\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"7\" icon={<FaUsers />}>\r\n            <Link to=\"/Users\" />\r\n            <Trans i18nKey=\"navbar.users\">\r\n            Users\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"8\" icon={<FaSprayCan />}>\r\n            <Link to=\"/Nozzles\" />\r\n            <Trans i18nKey=\"navbar.nozzles\">\r\n            Nozzles\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"9\" icon={<MdVerified />}>\r\n            <Link to=\"/Waterlicence\" />\r\n            <Trans i18nKey=\"navbar.water_licences\">\r\n            Water Licences\r\n            </Trans>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n        \r\n        <Menu.Item key=\"10\" icon={<GoProject />}>\r\n          <Link to=\"/Jobs\" />\r\n          <Trans i18nKey=\"navbar.jobs\">Jobs</Trans>\r\n        </Menu.Item>\r\n        <SubMenu\r\n          key=\"sub2\"\r\n          icon={<FaTasks />}\r\n          title={<Trans i18nKey=\"navbar.activities\">Activities</Trans>}\r\n        >\r\n          {/* <Menu.Item key=\"4\" icon={<VscOpenPreview />}>\r\n            <Trans i18nKey=\"navbar.activity_reports\">Activity Reports</Trans>\r\n          </Menu.Item> */}\r\n          <Menu.Item key=\"11\" icon={<ImDroplet />}>\r\n          <Link to=\"/Spraylogs\" />\r\n            <Trans i18nKey=\"navbar.spray_logs\">Spray Logs</Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"12\" icon={<GiGroundSprout />}>\r\n          <Link to=\"/Planting\" />\r\n          <Trans i18nKey=\"navbar.planting\">\r\n            Planting\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"13\" icon={<GiWheat />}>\r\n          <Link to=\"/Spreading\" />\r\n          <Trans i18nKey=\"navbar.spreading\">\r\n            Spreading\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"14\" icon={<GiFruitTree />}>\r\n          <Link to=\"/Harvest\" />\r\n          <Trans i18nKey=\"navbar.harvest\">\r\n           Harvest\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"15\" icon={<GiAutoRepair />}>\r\n          <Link to=\"/Maintenance\" />\r\n          <Trans i18nKey=\"navbar.maintainance\">\r\n            Maintenance\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"16\" icon={<GiPlantWatering />}>\r\n          <Link to=\"/Irrigation\" />\r\n          <Trans i18nKey=\"navbar.irrigation\">\r\n            Irrigation\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"17\" icon={<SiHappycow />}>\r\n          <Link to=\"/Grazing\" />\r\n          <Trans i18nKey=\"navbar.grazing\">\r\n            Grazing\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"18\" icon={<GiMedicalPackAlt />}>\r\n          <Link to=\"/VetTreatment\" />\r\n          <Trans i18nKey=\"navbar.vettreatment\">\r\n            Vet Treatments\r\n            </Trans>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n        <SubMenu key=\"sub3\" icon={<FaWarehouse />} title={<Trans i18nKey=\"navbar.inventory\">\r\n            Inventory\r\n            </Trans>}>\r\n          {/* <Menu.Item key=\"13\" icon={<VscOpenPreview />}>\r\n            <Link to=\"InventoryReport\"/>\r\n          <Trans i18nKey=\"navbar.inventory_reports\">\r\n            Inventory Reports\r\n            </Trans>\r\n          </Menu.Item> */}\r\n          <Menu.Item key=\"19\" icon={<GiGrain />}>\r\n         <Link to=\"/Grain\" />\r\n          <Trans i18nKey=\"navbar.grain\">\r\n            Grain\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"20\" icon={<GiChemicalDrop />}>\r\n            <Link to=\"/InventoryChemical\" />\r\n            <Trans i18nKey=\"navbar.chemical\">\r\n            Chemical\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"21\" icon={<GiFertilizerBag />}>\r\n          <Link to=\"/InventoryFertilizer\" />\r\n          <Trans i18nKey=\"navbar.fertilizer\">\r\n            Fertilizer\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"22\" icon={<GiFuelTank />}>\r\n          <Link to=\"/InventoryFuel\" />\r\n          <Trans i18nKey=\"navbar.fuel\">\r\n            Fuel\r\n            </Trans>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"23\" icon={<FaHandHoldingWater />}>\r\n          <Link to=\"/InventoryWater\" />\r\n          <Trans i18nKey=\"navbar.water\">\r\n            Water\r\n            </Trans>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n        <Menu.Item key=\"2\" icon={<VscOpenPreview />}>\r\n          <Trans i18nKey=\"navbar.custom_reports\">Custom Reports</Trans>\r\n          <Link to=\"/Custom\" />\r\n        </Menu.Item>\r\n        {/* <SubMenu key=\"sub3\" icon={<BsPeopleFill />} title={<Trans i18nKey=\"navbar.personnel\">\r\n            Personnel\r\n            </Trans>}>\r\n          <Menu.Item key=\"19\" icon={<FaUserClock />}>\r\n          <Trans i18nKey=\"navbar.timesheet\">\r\n            Timesheet\r\n            </Trans>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n        \r\n        <Menu.Item key=\"30\" icon={<FaCalendarAlt />}>\r\n        <Trans i18nKey=\"navbar.calender\">\r\n            Calendar\r\n            </Trans>\r\n        </Menu.Item> */}\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\Data\\PlantingData.js",[],"D:\\GFS_Trace\\src\\Data\\IrrigationData.js",[],"D:\\GFS_Trace\\src\\Data\\SpreadingData.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Nozzles\\NTable.js",[],"D:\\GFS_Trace\\src\\Data\\UserData.js",[],"D:\\GFS_Trace\\src\\Data\\SpraylogsData.js",[],"D:\\GFS_Trace\\src\\Data\\EquipmentData.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\tableDetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tabledetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\FarmReport.js",["528","529","530","531","532","533","534","535","536","537","538","539","540"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { farmreport_data } from './ReportTableData';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Grid } from '@mui/material';\r\nimport { Dropdown } from 'semantic-ui-react'\r\nimport Export from './export.png';\r\nfunction FarmReport() {\r\n  const [data, setData] = React.useState(farmreport_data);\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [activity, setactivity] = React.useState(false);\r\n  let farms = null;\r\n  let column=null;\r\n  const type = [\"fa1\", \"fa2\", \"fa3\"];\r\n  const [field, setfield] = React.useState(\"\");\r\n  const options = [\r\n    { key: 'Approved', text: 'Approved', value: 'Approved' },\r\n    { key: 'Not Approved', text: 'Not Approved', value: 'Not Approved' },\r\n    { key: 'Charged Out', text: 'Charged Out', value: 'Charged Out' },\r\n    { key: 'Not Charged Out', text: 'Not Charged Out', value: 'Not Charged Out' },]\r\n  const handleChange = (event) => {\r\n    setfield(event.target.value);\r\n  };\r\n  const columns_all = [{\r\n    title: 'Date', field: 'date',\r\n  },\r\n  {\r\n    title: 'Status', field: 'status',\r\n  },\r\n  {\r\n    title: \"Contract\", field: \"contract\",\r\n  },\r\n  {\r\n    title: 'Activity', field: 'activity',\r\n  },\r\n  {\r\n    title: 'Description', field: 'description',\r\n  },\r\n  {\r\n    title: \"Farms\", field: \"farms\",\r\n  },\r\n  {\r\n    title: 'Paddocks', field: 'paddocks',\r\n  },\r\n  \r\n  {\r\n    title: 'Completed', field: 'completed',\r\n  },\r\n  ]\r\n  const columns_all_activity = [{\r\n    title: 'Date', field: 'date',\r\n  },\r\n  {\r\n    title: 'Status', field: 'status',\r\n  },\r\n  {\r\n    title: \"Contract\", field: \"contract\",\r\n  },\r\n  {\r\n    title: 'Description', field: 'description',\r\n  },\r\n  {\r\n    title: \"Farms\", field: \"farms\",\r\n  },\r\n \r\n  {\r\n    title: 'Completed', field: 'completed',\r\n  },\r\n  ]\r\n  const columns = [{\r\n    title: 'Date', field: 'date',\r\n  },\r\n  {\r\n    title: 'Status', field: 'status',\r\n  },\r\n  {\r\n    title: \"Contract\", field: \"contract\",\r\n  },\r\n  {\r\n    title: 'Activity', field: 'activity',\r\n  },\r\n  {\r\n    title: 'Description', field: 'description',\r\n  },\r\n \r\n  {\r\n    title: 'Completed', field: 'completed',\r\n  },\r\n  ]\r\n  const columns_activity = [{\r\n    title: 'Date', field: 'date',\r\n  },\r\n  {\r\n    title: 'Status', field: 'status',\r\n  },\r\n  {\r\n    title: \"Contract\", field: \"contract\",\r\n  },\r\n  {\r\n    title: 'Description', field: 'description',\r\n  },\r\n  \r\n  {\r\n    title: 'Completed', field: 'completed',\r\n  },\r\n  ]\r\n  if (selected == true) {\r\n    farms = <div><select class=\"ui dropdown\" style={{ width: 200 }}>{type.map((el) => <option key={el}>{el}</option>)}</select></div>;\r\n  }\r\n  if (selected == false && activity == false){\r\n      column=columns_all\r\n  }\r\n  else if(selected==false && activity==true){\r\n    column=columns_all_activity\r\n  }\r\n  else if(selected == true && activity == false){\r\n    column=columns\r\n  }\r\n  else if(selected == true && activity == true){\r\n    column=columns_activity\r\n  }\r\n  return (\r\n    <div>\r\n      <Grid container rowSpacing={1} columnSpacing={{ xs: 2, sm: 3, md: 4 }}>\r\n        <Grid item xs={2}>\r\n          <select class=\"ui dropdown\" style={{ width: 200 }} onChange={() => toggleselected(!selected)}>\r\n            <option value=\"\" >Activities - All Farms</option>\r\n            <option value={2} >Activities - Selective</option>\r\n          </select>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          {farms}\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <select class=\"ui dropdown\" style={{ width: 200 }} onChange={(event)=>{if (event.target.value==\"\") {\r\n            setactivity(false)\r\n          }\r\n          else{\r\n            setactivity(true)\r\n          }}}>\r\n            <option value=\"\" >All</option>\r\n            <option value={1} >Spray Logs</option>\r\n            <option value={2} >Spreading</option>\r\n            <option value={3} >Planting</option>\r\n            <option value={4} >Maintenance</option>\r\n            <option value={5}>Harvest</option>\r\n          </select>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n        <Dropdown multiple selection show options={options}/>\r\n        </Grid>\r\n        </Grid>\r\n        <br/><br/><br/><br/>\r\n      <MaterialTable title=\"Farms\"\r\n        data={data}\r\n        columns={column}\r\n        editable={{\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = newData;\r\n                setData([...dataUpdate]);\r\n\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                setData([...dataDelete]);\r\n\r\n                resolve()\r\n              }, 1000)\r\n            }),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          search: false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n          Edit: () => <CreateIcon color=\"action\" />,\r\n          Delete: () => <DeleteIcon color=\"action\" />\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FarmReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\FertiliserReport.js",["541","542"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { fertiliserreport_data } from './ReportTableData';\r\nimport Export from './export.png';\r\nfunction FertiliserReport() {\r\n    const [data, setData] = React.useState(fertiliserreport_data)\r\n    const columns = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: \"Category\", field: \"category\",\r\n      },\r\n      {\r\n        title: 'Fertilisers', field: 'fertilisers',\r\n      },\r\n      {\r\n        title: 'Operator', field: 'operator',\r\n      },\r\n      ]\r\n    return (\r\n        <div>\r\n      <MaterialTable title=\"Fertiliser\"\r\n        data={data}\r\n        columns={columns}\r\n        options={{\r\n            search:false,\r\n            exportButton: true,\r\n          }}\r\n          icons={{\r\n            Export: () => <img src={Export}></img>,\r\n          }}\r\n      />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default FertiliserReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\ChemicalReport.js",["543","544"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { chemicalreport_data } from './ReportTableData';\r\nimport Export from './export.png';\r\nfunction ChemicalReport() {\r\n    const [data, setData] = React.useState(chemicalreport_data)\r\n    const columns = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: \"Category\", field: \"category\",\r\n      },\r\n      {\r\n        title: 'Chemicals', field: 'chemicals',\r\n      },\r\n      {\r\n        title: 'Operator', field: 'operator',\r\n      },\r\n      ]\r\n    return (\r\n        <div>\r\n      <MaterialTable title=\"Chemicals\"\r\n        data={data}\r\n        columns={columns}\r\n        options={{\r\n          search:false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n        }}\r\n      />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ChemicalReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\FuelReport.js",["545","546"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { fuelreport_data } from './ReportTableData';\r\nimport Export from './export.png';\r\nfunction FuelReport() {\r\n    const [data, setData] = React.useState(fuelreport_data)\r\n    const columns = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: \"Category\", field: \"category\",\r\n      },\r\n      {\r\n        title: 'Fuel', field: 'fuel',\r\n      },\r\n      {\r\n        title: 'Amount', field: 'amount',\r\n      },\r\n      {\r\n        title: 'Operator', field: 'operator',\r\n      },\r\n      ]\r\n    return (\r\n        <div>\r\n      <MaterialTable title=\"Fuel\"\r\n        data={data}\r\n        columns={columns}\r\n        options={{\r\n          search:false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n        }}\r\n      />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default FuelReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\EquipmentReport.js",["547","548","549"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { equipmentreport_data } from './ReportTableData';\r\nimport { Grid } from '@mui/material';\r\nimport Export from './export.png';\r\nfunction EquipmentReport() {\r\n  const [data, setData] = React.useState(equipmentreport_data);\r\n  const [selected, toggleselected] = React.useState(false);\r\n  let options = null;\r\n  const type = [\"cat1\", \"cat2\", \"cat3\"];\r\n  if (selected == true) {\r\n    options = <div><div class=\"default text\">Equipment</div> <select class=\"ui dropdown\" style={{ width: 200 }}>{type.map((el) => <option key={el}>{el}</option>)}</select></div>;\r\n  }\r\n  const columns = [{\r\n    title: 'Date', field: 'date',\r\n  },\r\n  {\r\n    title: 'Amount', field: 'amount',\r\n  },\r\n  {\r\n    title: 'Type', field: 'type',\r\n  },\r\n  {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Task Category', field: 'category',\r\n  },\r\n  {\r\n    title: 'Task Description', field: 'description',\r\n  },\r\n  ]\r\n  const columns_all = [{\r\n    title: 'Date', field: 'date',\r\n  },\r\n  {\r\n    title: \"Equipment\", field: \"equipment\",\r\n  },\r\n  {\r\n    title: 'Amount', field: 'amount',\r\n  },\r\n  {\r\n    title: 'Type', field: 'type',\r\n  },\r\n  {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Task Category', field: 'category',\r\n  },\r\n  {\r\n    title: 'Task Description', field: 'description',\r\n  },\r\n  ]\r\n  return (\r\n    <div>\r\n      <Grid container rowSpacing={2} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\r\n        <Grid item xs={2}>\r\n          <br />\r\n          <select class=\"ui dropdown\" style={{ width: 200 }} onChange={() => toggleselected(!selected)}>\r\n            <option value=\"\" >Fuel Tickets - All</option>\r\n            <option value={2} >Fuel Ticket</option>\r\n          </select>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          {options}\r\n        </Grid>\r\n      </Grid>\r\n      <MaterialTable title=\"Equipment\"\r\n        data={data}\r\n        columns={selected ? columns : columns_all}\r\n        options={{\r\n          search: false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EquipmentReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\GrainReport.js",["550","551"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { grainreport_data } from './ReportTableData';\r\nimport Export from './export.png';\r\nfunction GrainReport() {\r\n    const [data, setData] = React.useState(grainreport_data)\r\n    const columns = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: \"Category\", field: \"category\",\r\n      },\r\n      {\r\n        title: 'Cultivar', field: 'cultivar',\r\n      },\r\n      {\r\n        title: 'Amount', field: 'amount',\r\n      },\r\n      {\r\n        title: 'Operators', field: 'operators',\r\n      },\r\n      ]\r\n    return (\r\n        <div>\r\n      <MaterialTable title=\"Grain\"\r\n        data={data}\r\n        columns={columns}\r\n        options={{\r\n          search:false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n        }}\r\n      />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default GrainReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tabledetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\PaddockReport.js",["552","553","554","555","556","557","558"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { paddockreport_data } from './ReportTableData';\r\nimport { Grid } from '@mui/material';\r\nimport Export from './export.png';\r\nfunction PaddockReport() {\r\n    const [data, setData] = React.useState(paddockreport_data)\r\n    const [field,setfield]=React.useState(\"\");\r\n    const [attribute,setattribute]=React.useState(\"\");\r\n    let columns=null;\r\n    const handleChange = (event) => {\r\n      setfield(event.target.value);\r\n    };\r\n    const columns_spray = [{\r\n      title: 'Date', field: 'date',\r\n    },\r\n    {\r\n        title: 'Status', field: 'status',\r\n      },\r\n      {\r\n        title: \"Contract\", field: \"contract\",\r\n      },\r\n      {\r\n        title: 'Description', field: 'description',\r\n      },\r\n      {\r\n        title: 'Chemicals', field: 'chemicals',\r\n      },\r\n      {\r\n        title: 'Completed', field: 'completed',\r\n      },\r\n      ]\r\n      const columns_spreading = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: 'Status', field: 'status',\r\n      },\r\n      {\r\n        title: \"Contract\", field: \"contract\",\r\n      },\r\n      {\r\n        title: 'Description', field: 'description',\r\n      },\r\n      {\r\n        title: 'Fertilisers', field: 'fertilisers',\r\n      },\r\n      {\r\n        title: 'Completed', field: 'completed',\r\n      },\r\n      ]\r\n      const columns_maintainance = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: 'Status', field: 'status',\r\n      },\r\n      {\r\n        title: \"Contract\", field: \"contract\",\r\n      },\r\n      {\r\n        title: 'Description', field: 'description',\r\n      },\r\n      {\r\n        title: 'Category', field: 'category',\r\n      },\r\n      {\r\n        title: 'Completed', field: 'completed',\r\n      },\r\n      ]\r\n      const columns_harvest = [{\r\n        title: 'Date', field: 'date',\r\n      },\r\n      {\r\n        title: 'Status', field: 'status',\r\n      },\r\n      {\r\n        title: \"Contract\", field: \"contract\",\r\n      },\r\n      {\r\n        title: 'Description', field: 'description',\r\n      },\r\n      {\r\n        title: 'Completed', field: 'completed',\r\n      },\r\n      ]\r\n      if(attribute==\"\"){\r\n        columns=columns_spray\r\n      }\r\n      else if(attribute==\"3\" || attribute==\"2\"){\r\n        columns=columns_spreading\r\n      }\r\n      else if(attribute==\"4\"){\r\n        columns=columns_maintainance\r\n      }\r\n      else{\r\n        columns=columns_harvest\r\n      }\r\n    return (\r\n        <div>\r\n           <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\r\n           <Grid item xs={2}>\r\n        <select class=\"ui dropdown\" style={{ width: 200}} onChange={(e)=>setattribute(e.target.value)}>\r\n            <option value=\"\" >Spray Logs</option>\r\n            <option value={2} >Spreading</option>\r\n            <option value={3} >Planting</option>\r\n            <option value={4} >Maintenance</option>\r\n            <option value={5}>Harvest</option>\r\n          </select>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n        <select class=\"ui dropdown\" style={{ width: 200}} onChange={handleChange}>\r\n            <option value=\"\" >abc</option>\r\n            <option value={2} >pqr</option>\r\n          </select>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n        <select class=\"ui dropdown\" style={{ width: 200}} onChange={handleChange}>\r\n            <option value=\"\" >xyz</option>\r\n            <option value={2} >wxy</option>\r\n          </select>\r\n        </Grid>\r\n        </Grid>\r\n      <MaterialTable title=\"Paddocks\"\r\n        data={data}\r\n        columns={columns}\r\n        options={{\r\n          search:false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n        }}\r\n      />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default PaddockReport\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Livestock\\LsTable.js",["559"],"import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\nexport default function LsTable() {\r\n  const [type, setType] = useState({});\r\n\r\n  const lsType = [\r\n    { id: 1, title: \"Cattle\" },\r\n    { id: 2, title: \"Bulls\" },\r\n    { id: 3, title: \"Sheep\" },\r\n    { id: 4, title: \"Horses\" },\r\n    { id: 5, title: \"Chickens\" },\r\n    { id: 6, title: \"Pigs\" },\r\n    { id: 7, title: \"Deer\" },\r\n    { id: 8, title: \"Goats\" },\r\n    { id: 9, title: \"Llamas\" },\r\n    { id: 10, title: \"Bees\" },\r\n  ];\r\n\r\n  const [data, setData] = useState([\r\n    {\r\n      type: \"1\",\r\n      names: \"abc\",\r\n\r\n      number: \"123\",\r\n      notes: \"xyz\",\r\n    },\r\n    {\r\n      type: \"2\",\r\n\r\n      names: \"pqrs\",\r\n\r\n      number: \"16343\",\r\n      notes: \"xykfz\",\r\n    },\r\n  ]);\r\n  const columns = [\r\n    {\r\n      title: \"Type\",\r\n      field: \"type\",\r\n      lookup: type,\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      field: \"names\",\r\n      validate: (rowData) => {\r\n        if (rowData.names === undefined || rowData.names === \"\") {\r\n          return \"Required\";\r\n        } else if (rowData.names.length < 3) {\r\n          return \"Name Should Contain Atleast 3 chars\";\r\n        }\r\n        return true;\r\n      },\r\n    },\r\n\r\n    {\r\n      title: \"Number\",\r\n      field: \"number\",\r\n    },\r\n    {\r\n      title: \"Notes\",\r\n      field: \"notes\",\r\n    },\r\n  ];\r\n  useEffect(() => {\r\n    const type = {};\r\n    lsType.map((row) => (type[row.id] = row.title));\r\n    setType(type);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"Livestock\"\r\n        data={data}\r\n        columns={columns}\r\n        editable={{\r\n          onRowAdd: (newRow) =>\r\n            new Promise((resolve, reject) => {\r\n              setData([...data, newRow]);\r\n              setTimeout(() => resolve(), 500);\r\n            }),\r\n          onRowUpdate: (newRow, oldRow) =>\r\n            new Promise((resolve, reject) => {\r\n              const updatedData = [...data];\r\n              updatedData[(oldRow, data.id)] = newRow;\r\n              setData(updatedData);\r\n              setTimeout(() => resolve(), 500);\r\n            }),\r\n          onRowDelete: (oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                setData([...dataDelete]);\r\n\r\n                resolve();\r\n              }, 1000);\r\n            }),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          showTitle: false,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n        }}\r\n        icons={{\r\n         \r\n          Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n          Edit: () => <CreateIcon color=\"action\" />,\r\n          Delete: () => <DeleteIcon color=\"action\" />\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\WaterStorageTable.js",["560"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport WaterStorageData from '../../../../Data/WaterStorageData';\r\n\r\nexport default function WaterStorageTable(props) {\r\n  const farm = props.farm;\r\n\r\n  const columns = [{\r\n      title: 'Name', field: 'name'\r\n  },\r\n  {\r\n      title: 'Capacity', field: 'capacity', type: 'numeric',\r\n  },\r\n  {\r\n      title: 'Unit', field: 'cunit',\r\n      lookup: { '0': 'Litres',  '1': 'Gallons', '4':'Cubic metre', '2':'Cubic feet','3':'Cubic yard'},\r\n  },{\r\n    title: 'Surface Area', field: 'surface', type: 'numeric',\r\n},\r\n{\r\n    title: 'Unit', field: 'sunit',\r\n    lookup: { '3': 'Hectares', '2': 'Acres', '1':'Square metre', '0':'Square feet'},\r\n},{\r\n  title: 'Max Depth ', field: 'depth', type: 'numeric',\r\n  \r\n},\r\n{\r\n  title: 'Unit', field: 'dunit',\r\n  lookup: { '0': 'mm', '1':'cm', '5':'metre', '2': 'inch', '3':'feet', '4':'yard'},\r\n}, {\r\n      title: 'Slop factor', field: 'slop', type: 'numeric', \r\n      \r\n  }, {\r\n      title: 'Notes', field: 'notes',\r\n    \r\n  }]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"Water Storages\"\r\n                data={WaterStorageData}\r\n                columns={columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                  onRowUpdate:(newRow,oldRow)=> new Promise(()=>{}),\r\n                  onRowDelete:(selectedRow)=> new Promise(()=>{})\r\n                }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    filtering: true,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                }}\r\n                icons={{\r\n                 \r\n                  Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                  Edit: () => <CreateIcon color=\"action\" />,\r\n                  Delete: () => <DeleteIcon color=\"action\" />\r\n                }}\r\n            /> \r\n        </div>\r\n    )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\CustomReport\\Tables\\ReportTableData.js",[],"D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\SiloTable.js",["561"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SiloData from '../../../../Data/SiloData';\r\nexport default function SiloTable(props) {\r\n    const farm = props.farm;\r\n\r\n   \r\n  const columns = [{\r\n      title: 'Name', field: 'name'\r\n  },\r\n  {\r\n      title: 'Capacity', field: 'capacity', type: 'numeric',\r\n  },\r\n  {\r\n      title: 'Unit', field: 'unit',\r\n      lookup: { 't': 'Tonnes', 'wt': 'Wheat tonnes', 'm3':'Cubic metre', 'f3':'Cubic feet'},\r\n  }, {\r\n      title: 'Cultivar', field: 'cultivar', \r\n      lookup: { 'fallow': 'Fallow', 'abc': 'abc', 'dfg':'dfg' },\r\n  }, {\r\n      title: 'status', field: 'status',\r\n      lookup: {'N': 'Normal' ,'S': 'Seed', 'T': 'Treated', 'TS': 'Treated Seed', \r\n      'C': 'Contaminated', 'A': 'Archived' },\r\n  }]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"Silos\"\r\n                data={SiloData}\r\n                columns={columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                  onRowUpdate:(newRow,oldRow)=> new Promise(()=>{}),\r\n                  onRowDelete:(selectedRow)=> new Promise(()=>{})\r\n                }}\r\n               \r\n               \r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    filtering: true,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                }}\r\n                icons={{\r\n                 \r\n                  Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                  Edit: () => <CreateIcon color=\"action\" />,\r\n                  Delete: () => <DeleteIcon color=\"action\" />\r\n                }}\r\n            /> \r\n        </div>\r\n    )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\FueltankTable.js",["562"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FuelTankData from '../../../../Data/FuelTankData';\r\n\r\nexport default function FueltankTable(props) {\r\n    const farm = props.farm;\r\n    \r\n\r\n    const columns = [{\r\n        title: 'Name', field: 'name'\r\n    },\r\n    {\r\n        title: 'Capacity', field: 'capacity'\r\n    },\r\n    {\r\n        title: 'Unit', field: 'unit',\r\n        lookup: { 'L': 'Litres', 'gal': 'Gallons'},\r\n    }, {\r\n        title: 'Type', field: 'type', \r\n        lookup: { 'avaition': 'Avaition', 'unleaded': 'Unleaded', 'adblue':'AdBlue', 'diesel':'Diesel' },\r\n    }]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"Fuel Tanks\"\r\n                data={FuelTankData}\r\n                columns={columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                  onRowUpdate:(newRow,oldRow)=> new Promise(()=>{}),\r\n                  onRowDelete:(selectedRow)=> new Promise(()=>{})\r\n                }}\r\n               \r\n               \r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    filtering: true,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                }}\r\n                icons={{\r\n                 \r\n                  Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                  Edit: () => <CreateIcon color=\"action\" />,\r\n                  Delete: () => <DeleteIcon color=\"action\" />\r\n                }}\r\n            /> \r\n        </div>\r\n    )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Farms\\PaddockTable.js",["563"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport PaddockData from \"../../../../Data/PaddockData\";\r\nexport default function PaddockTable(props) {\r\n    const farm = props.farm;\r\n    \r\n\r\n    \r\n  const columns = [{\r\n      title: 'Name', field: 'name'\r\n  },\r\n  {\r\n      title: 'Size', field: 'size', type: 'numeric'\r\n  },\r\n  {\r\n      title: 'Unit', field: 'unit', \r\n      lookup: { 0:'feet square', 1:'metre square',2: 'acres', 3: 'hectare'},\r\n  }, {\r\n      title: 'Cultivar', field: 'cultivar', \r\n      lookup: { 'fallow': 'Fallow', 'abc': 'abc', 'dfg':'dfg' },\r\n  }, {\r\n      title: 'Rotation', field: 'rotation',\r\n      lookup: {'D': 'Dryland' ,'NR': 'Normal Rotation', 'DC': 'Double Crop', 'LF': 'Long Fallow', \r\n      'SF': 'Short Fallow', 'I': 'Irrigated', 'SI': 'Semi-irrigated', 'AP': 'After Pulse' },\r\n  }, {\r\n      title: 'Year', field: 'year', type: 'numeric'\r\n  }]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"Paddocks\"\r\n                data={PaddockData}\r\n                columns={columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                  onRowUpdate:(newRow,oldRow)=> new Promise(()=>{}),\r\n                  onRowDelete:(selectedRow)=> new Promise(()=>{})\r\n                }}\r\n               \r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    filtering: true,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                }}\r\n                icons={{\r\n                  \r\n                  Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                  Edit: () => <CreateIcon color=\"action\" />,\r\n                  Delete: () => <DeleteIcon color=\"action\" />\r\n                }}\r\n            /> \r\n        </div>\r\n    )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\Outgoing.js",["564"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport Export from '../../../export.png';\r\nimport { outgoing_data } from '../../../../../Data/InventoryChemicalData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport './archived.css';\r\nexport default function Outgoing() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [data, setData] = React.useState(outgoing_data)\r\n  const columns = [{\r\n    title: 'Job Type', field: 'type'\r\n  },\r\n  {\r\n    title: 'Job Description', field: 'description',\r\n  },\r\n  {\r\n    title: 'Date', field: 'date',\r\n  }, {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Chemicals', field: 'chemicals',\r\n  },\r\n  {\r\n    title: 'Notes', field: 'notes',\r\n  }]\r\n  const columns_archived = [{\r\n    title: 'Job Type', field: 'type'\r\n  },\r\n  {\r\n    title: 'Job Description', field: 'description',\r\n  },\r\n  {\r\n    title: 'Date', field: 'date',\r\n  }, {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Chemicals', field: 'chemicals',\r\n  },\r\n  {\r\n    title: 'Notes', field: 'notes',\r\n  },\r\n  {\r\n    title: \"Archived\",\r\n    field: \"archived\",\r\n  },]\r\n  return (\r\n    <div>\r\n      <MaterialTable title=\"OUTGOING\"\r\n        data={data}\r\n        columns={selected ? columns_archived : columns}\r\n        editable={{\r\n          onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = newData;\r\n                setData([...dataUpdate]);\r\n\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                setData([...dataDelete]);\r\n\r\n                resolve()\r\n              }, 1000)\r\n            }),\r\n        }}\r\n        components={{\r\n          Toolbar: props => (\r\n            <div>\r\n              <MTableToolbar {...props} />\r\n              <div className=\"toggle-switch\">\r\n                <Checkbox\r\n                  toggle\r\n                  onClick={() => toggleselected(!selected)}\r\n                  checked={selected}\r\n                  label=\"Show Archived Tickets\"\r\n                />\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          paging: true,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n          Edit: () => <CreateIcon color=\"action\" />,\r\n          Export: () => <img src={Export}></img>,\r\n          Delete: () => <DeleteIcon color=\"action\" />\r\n         \r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\StockTake.js",["565"],"import React from 'react'\r\nimport MaterialTable,{ MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from '../../../export.png';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport { stocktake_data } from '../../../../../Data/InventoryChemicalData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nexport default function StockTake() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(stocktake_data)\r\n    const columns = [\r\n    {\r\n        title: 'Date', field: 'date',\r\n    }, {\r\n        title: 'Operator', field: 'operator',\r\n    },\r\n    {\r\n        title: 'Chemicals', field: 'chemicals',\r\n    },\r\n    {\r\n        title: 'Reported', field: 'report',\r\n    }]\r\n    const columns_archived = [\r\n      {\r\n          title: 'Date', field: 'date',\r\n      }, {\r\n          title: 'Operator', field: 'operator',\r\n      },\r\n      {\r\n          title: 'Chemicals', field: 'chemicals',\r\n      },\r\n      {\r\n          title: 'Reported', field: 'report',\r\n      },\r\n      {\r\n        title: \"Archived\",\r\n        field: \"archived\",\r\n      },]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"STOCKTAKE\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                  Toolbar: props => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\">\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n                icons={{\r\n                  Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                  Edit: () => <CreateIcon color=\"action\" />,\r\n                  Export: () => <img src={Export}></img>,\r\n                  Delete: () => <DeleteIcon color=\"action\" />\r\n                 \r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\Ingoing.js",["566"],"import React from 'react'\r\nimport MaterialTable,{ MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from '../../../export.png';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport { ingoing_data } from '../../../../../Data/InventoryChemicalData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nexport default function Ingoing() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(ingoing_data)\r\n    const columns = [{\r\n        title: 'Supplier', field: 'supplier'\r\n    },\r\n    {\r\n        title: 'Docket No.', field: 'docket',\r\n    },\r\n    {\r\n        title: 'Date', field: 'date',\r\n    }, {\r\n        title: 'Operator', field: 'operator',\r\n    },\r\n    {\r\n        title: 'Chemicals', field: 'chemicals',\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',\r\n    }]\r\n    const columns_archived = [{\r\n      title: 'Supplier', field: 'supplier'\r\n  },\r\n  {\r\n      title: 'Docket No.', field: 'docket',\r\n  },\r\n  {\r\n      title: 'Date', field: 'date',\r\n  }, {\r\n      title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n      title: 'Chemicals', field: 'chemicals',\r\n  },\r\n  {\r\n      title: 'Notes', field: 'notes',\r\n  },\r\n  {\r\n    title: \"Archived\",\r\n    field: \"archived\",\r\n  },]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"INGOING\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                  Toolbar: props => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\">\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n               \r\n                icons={{\r\n                  Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                  Edit: () => <CreateIcon color=\"action\" />,\r\n                  Export: () => <img src={Export}></img>,\r\n                  Delete: () => <DeleteIcon color=\"action\" />\r\n                 \r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\InventoryChemical\\Tables\\Chemicals.js",["567","568"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport Export from '../../../export.png';\r\nimport { chemicals_data } from '../../../../../Data/InventoryChemicalData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport './archived.css';\r\nexport default function Chemicals() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(chemicals_data)\r\n    const columns = [{\r\n        title: 'Name', field: 'name'\r\n    },\r\n    {\r\n        title: 'Resistance Group', field: 'resistancegrp',\r\n    },\r\n    {\r\n        title: 'Actives', field: 'actives',\r\n    }, {\r\n        title: 'Amount', field: 'amount',\r\n    }]\r\n    const columns_archived = [{\r\n        title: 'Name', field: 'name'\r\n    },\r\n    {\r\n        title: 'Resistance Group', field: 'resistancegrp',\r\n    },\r\n    {\r\n        title: 'Actives', field: 'actives',\r\n    }, {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    {\r\n        title: \"Archived\",\r\n        field: \"archived\",\r\n      },]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"CHEMICALS\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n\r\n                options={{\r\n                    \r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    filtering: true,\r\n                    actionsColumnIndex:-1\r\n                  }}\r\n                components={{\r\n                    Toolbar: props => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived Chemicals\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                  editable={{\r\n                    onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                    onRowUpdate:(newRow,oldRow)=> new Promise(()=>{}),\r\n                    onRowDelete:(selectedRow)=> new Promise(()=>{})\r\n                  }}\r\n                  icons={{\r\n                    Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Export: () => <img src={Export}></img>,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                   \r\n                  }}\r\n                \r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tables\\Ingoing.js",["569"],"import React from 'react'\r\nimport MaterialTable,{ MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\nimport Export from '../../../export.png';\r\nimport { ingoing_data } from '../../../../../Data/InventoryWaterData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport './archived.css';\r\nexport default function Ingoing() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(ingoing_data)\r\n    const columns = [{\r\n        title: 'Water Storage', field: 'water_storage'\r\n    },\r\n    {\r\n        title: 'Date/Time', field: 'date',\r\n    }, {\r\n        title: 'Operator', field: 'operator',\r\n    },\r\n    {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',\r\n    }]\r\n    const columns_archived = [{\r\n      title: 'Water Storage', field: 'water_storage'\r\n  },\r\n  {\r\n      title: 'Date/Time', field: 'date',\r\n  }, {\r\n      title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n      title: 'Amount', field: 'amount',\r\n  },\r\n  {\r\n    title: 'Notes', field: 'notes',\r\n},\r\n \r\n  {\r\n    title: \"Archived\",\r\n    field: \"archived\",\r\n  },]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"INGOING\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                  Toolbar: props => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\" style={{padding: '0px 20px'}}>\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n                icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    \r\n                      Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                      Edit: () => <CreateIcon color=\"action\" />,\r\n                      Delete: () => <DeleteIcon color=\"action\" />\r\n                     \r\n                   \r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tables\\Outgoing.js",["570"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from '../../../export.png';\r\nimport { outgoing_data } from '../../../../../Data/InventoryWaterData';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport './archived.css';\r\nexport default function Outgoing() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [data, setData] = React.useState(outgoing_data)\r\n  const columns = [{\r\n    \r\n    title: 'Water Storage', field: 'water_storage'\r\n  },\r\n  {\r\n    title: 'Job Type', field: 'type'\r\n  },\r\n  {\r\n    title: 'Job Description', field: 'description',\r\n  },\r\n  {\r\n    title: 'Date/Time', field: 'date',\r\n  }, {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Amount', field: 'amount',\r\n  },\r\n  {\r\n    title: 'Notes', field: 'notes',\r\n  }]\r\n  const columns_archived = [{\r\n    title: 'Job Type', field: 'type'\r\n  },\r\n  {\r\n    title: 'Job Description', field: 'description',\r\n  },\r\n  {\r\n    title: 'Date', field: 'date',\r\n  }, {\r\n    title: 'Operator', field: 'operator',\r\n  },\r\n  {\r\n    title: 'Chemicals', field: 'chemicals',\r\n  },\r\n  {\r\n    title: 'Notes', field: 'notes',\r\n  },\r\n  {\r\n    title: \"Archived\",\r\n    field: \"archived\",\r\n  },]\r\n  return (\r\n    <div>\r\n      <MaterialTable title=\"OUTGOING\"\r\n        data={data}\r\n        columns={selected ? columns_archived : columns}\r\n        editable={{\r\n          onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = newData;\r\n                setData([...dataUpdate]);\r\n\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                setData([...dataDelete]);\r\n\r\n                resolve()\r\n              }, 1000)\r\n            }),\r\n        }}\r\n        components={{\r\n          Toolbar: props => (\r\n            <div>\r\n              <MTableToolbar {...props} />\r\n              <div className=\"toggle-switch\" style={{padding: '0px 20px'}}>\r\n                <Checkbox\r\n                  toggle\r\n                  onClick={() => toggleselected(!selected)}\r\n                  checked={selected}\r\n                  label=\"Show Archived\"\r\n                />\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          paging: true,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n          exportButton: true,\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n          \r\n            Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n            Edit: () => <CreateIcon color=\"action\" />,\r\n            Delete: () => <DeleteIcon color=\"action\" />\r\n           \r\n         \r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\Water\\Tables\\Storages.js",["571"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport Export from '../../../export.png';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { storages_data } from '../../../../../Data/InventoryWaterData'\r\n\r\nexport default function Storages() {\r\n    const [data, setData] = React.useState(storages_data)\r\n    const columns = [{\r\n        title: 'Farms', field: 'farm'\r\n    },\r\n    {\r\n        title: 'Name', field: 'name',\r\n    },\r\n    {\r\n        title: 'Capacity', field: 'capacity',\r\n    }, {\r\n        title: 'Contents', field: 'contents',\r\n    }]\r\n    \r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"STORAGES\"\r\n                data={data}\r\n                columns={ columns}\r\n                editable={{\r\n                    onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                      onRowUpdate: (newData, oldData) =>\r\n                        new Promise((resolve, reject) => {\r\n                          setTimeout(() => {\r\n                            const dataUpdate = [...data];\r\n                            const index = oldData.tableData.id;\r\n                            dataUpdate[index] = newData;\r\n                            setData([...dataUpdate]);\r\n            \r\n                            resolve();\r\n                          }, 1000)\r\n                        }),\r\n                      onRowDelete: oldData =>\r\n                        new Promise((resolve, reject) => {\r\n                          setTimeout(() => {\r\n                            const dataDelete = [...data];\r\n                            const index = oldData.tableData.id;\r\n                            dataDelete.splice(index, 1);\r\n                            setData([...dataDelete]);\r\n            \r\n                            resolve()\r\n                          }, 1000)\r\n                        }),\r\n                    }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                    Toolbar: props => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                  icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    \r\n                      Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                      Edit: () => <CreateIcon color=\"action\" />,\r\n                      Delete: () => <DeleteIcon color=\"action\" />\r\n                     \r\n                   \r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\Data\\WaterStorageData.js",[],"D:\\GFS_Trace\\src\\Data\\SiloData.js",[],"D:\\GFS_Trace\\src\\Data\\FuelTankData.js",[],"D:\\GFS_Trace\\src\\Data\\PaddockData.js",[],"D:\\GFS_Trace\\src\\Data\\InventoryWaterData.js",["572","573","574","575"],"export const storages_data=[\r\n    {\r\n        farm:'abcdef',name:'asdwef',capacity:'5000L',contents:'Empty',\r\n        farm:'farm2',name:'d12ad',capacity:'50000L',contents:'Empty'\r\n    }\r\n];\r\n\r\nexport const ingoing_data=[];\r\n\r\nexport const outgoing_data=[];","D:\\GFS_Trace\\src\\Data\\InventoryChemicalData.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\InventoryFertilizer.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\FertiliserTable.js",["576"],"import React, {useState} from 'react'\r\nimport { Segment } from 'semantic-ui-react';\r\nimport {Menu} from 'semantic-ui-react';\r\nimport TableDetails from './Tabledetails'\r\nimport \"./Fertiliser.css\"\r\n\r\n\r\nexport default function FertiliserTable()  {\r\n    const [state, setState] = React.useState(\"FERTILISERS\"); \r\n\r\n      return (\r\n        <div className=\"fertiliser\">\r\n          <Menu pointing>\r\n            <Menu.Item\r\n              name='FERTILISERS'\r\n              active={state === 'FERTILISERS'}\r\n             color=\"green\"\r\n             onClick={() => setState(\"FERTILISERS\")}\r\n            />\r\n            <Menu.Item\r\n              name='INGOING'\r\n              active={state === 'INGOING'}\r\n              onClick={() => setState(\"INGOING\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='OUTGOING'\r\n              active={state === 'OUTGOING'}\r\n              onClick={() => setState(\"OUTGOING\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='STOKETAKE'\r\n              active={state === 'STOCKTAKE'}\r\n              onClick={() => setState(\"STOCKTAKE\")}\r\n              color=\"green\"\r\n            />\r\n          \r\n           \r\n          </Menu>\r\n          <Segment attached='bottom'>\r\n         <TableDetails dataValue={state}/>\r\n        </Segment>\r\n         \r\n        </div>\r\n    );\r\n  }","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tabledetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Outgoing.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Fertilisers.js",["577"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport { fertiliser_data } from './Tabledatas';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport './archived.css';\r\nexport default function Fertilisers() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(fertiliser_data)\r\n    const columns = [{\r\n        title: 'Name', field: 'name'\r\n    },\r\n    {\r\n        title: 'Form', field: 'form',\r\n    },\r\n    {\r\n        title: 'Nutrients', field: 'nutrients',\r\n    }, {\r\n        title: 'Amount', field: 'amount',\r\n    }]\r\n    const columns_archived = [{\r\n        title: 'Name', field: 'name'\r\n    },\r\n    {\r\n        title: 'Form', field: 'form',\r\n    },\r\n    {\r\n        title: 'Nutrients', field: 'nutrients',\r\n    }, {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    {\r\n        title: \"Archived\",\r\n        field: \"archived\",\r\n      },]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"FERTILISERS\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n\r\n                options={{\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                }}\r\n                components={{\r\n                    Toolbar: props => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived Fertilisers\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Ingoing.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\StockTake.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FertilizerInventory\\Tables\\Tabledatas.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\GrainsTable.js",["578"],"import React, {useState} from 'react'\r\nimport { Segment } from 'semantic-ui-react';\r\nimport {Menu} from 'semantic-ui-react';\r\nimport TableDetails from './Tabledetails'\r\nimport \"./Grains.css\"\r\n\r\n\r\nexport default function GrainsTable()  {\r\n    const [state, setState] = React.useState(\"SILOS\"); \r\n\r\n      return (\r\n        <div  className= \"table-size\">\r\n    \r\n    <div className= \"subheader\">  \r\n   \r\n        <h1 style={{\"color\": \"black\"}}>Grain Inventory </h1><span>&nbsp;&nbsp;</span>\r\n  \r\n    </div>\r\n        <div className=\"chemical\">\r\n          <Menu pointing>\r\n            <Menu.Item\r\n              name='SILOS'\r\n              active={state === 'SILOS'}\r\n             color=\"green\"\r\n             onClick={() => setState(\"SILOS\")}\r\n            />\r\n            <Menu.Item\r\n              name='INGOING'\r\n              active={state === 'INGOING'}\r\n              onClick={() => setState(\"INGOING\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='OUTGOING'\r\n              active={state === 'OUTGOING'}\r\n              onClick={() => setState(\"OUTGOING\")}\r\n              color=\"green\"\r\n            />\r\n            \r\n            <Menu.Item\r\n              name='TRANSFER'\r\n              active={state === 'TRANSFER'}\r\n              onClick={() => setState(\"TRANSFER\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='CONTRACTS'\r\n              active={state === 'CONTRACTS'}\r\n              onClick={() => setState(\"CONTRACTS\")}\r\n              color=\"green\"\r\n            />\r\n            <Menu.Item\r\n              name='TOTAL'\r\n              active={state === 'TOTAL'}\r\n              onClick={() => setState(\"TOTAL\")}\r\n              color=\"green\"\r\n            />\r\n          \r\n           \r\n          </Menu>\r\n          <Segment attached='bottom'>\r\n         <TableDetails dataValue={state}/>\r\n        </Segment>\r\n         </div>\r\n        </div>\r\n    );\r\n  }","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tabledetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Contracts.js",["579","580"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { Checkbox } from 'semantic-ui-react';\r\n\r\nexport default function Contracts() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState([\r\n        {status:\"asd\",contractNo:\"asd\",startDate:\"20/10/2021\",endDate:\"30/11/2021\",buyer:\"asd\",destination:\"asd\",commodity:\"asd\",fulfilled:\"asd\",quantity:\"asd\",grade:\"asd\",tolerence:\"asd\",notes:\"asd\"}\r\n    ])\r\n    const columns = [{\r\n        title: 'Status', field: 'status',\r\n    },\r\n    {\r\n        title: 'Contract No', field: 'contractNo',\r\n    },\r\n    {\r\n        title: 'Start Date', field: 'startDate',\r\n    }, {\r\n        title: 'End Date', field: 'endDate',\r\n    },\r\n    {\r\n        title: 'Buyer', field: 'buyer',\r\n    },\r\n    \r\n    {\r\n        title: 'Destination', field: 'destination',\r\n    },\r\n    {\r\n        title: 'Commodity', field: 'commodity',\r\n    },\r\n    {\r\n        title: 'Fulfilled', field: 'fulfilled',\r\n    },\r\n    {\r\n        title: 'Quantity', field: 'quantity',\r\n    },\r\n    {\r\n        title: 'Grade', field: 'grade',\r\n    },\r\n    {\r\n        title: 'Tolerence', field: 'tolerence',\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',\r\n    },\r\n    \r\n  ]\r\n  const columns_archived = [{\r\n    title: 'Status', field: 'status',\r\n},\r\n{\r\n    title: 'Contract No', field: 'contractNo',\r\n},\r\n{\r\n    title: 'Start Date', field: 'startDate',\r\n}, {\r\n    title: 'End Date', field: 'endDate',\r\n},\r\n{\r\n    title: 'Buyer', field: 'buyer',\r\n},\r\n\r\n{\r\n    title: 'Destination', field: 'destination',\r\n},\r\n{\r\n    title: 'Commodity', field: 'commodity',\r\n},\r\n{\r\n    title: 'Fulfilled', field: 'fulfilled',\r\n},\r\n{\r\n    title: 'Quantity', field: 'quantity',\r\n},\r\n{\r\n    title: 'Grade', field: 'grade',\r\n},\r\n{\r\n    title: 'Tolerence', field: 'tolerence',\r\n},\r\n{\r\n    title: 'Notes', field: 'notes',\r\n},\r\n{\r\n    title:\"Archived\",field:\"archived\",\r\n}\r\n]\r\n\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"CONTRACTS\"\r\n                data={data}\r\n                columns={columns}\r\n                editable={{\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                    \r\n                }}\r\n\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n\r\n                icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Total.js",["581"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { total_data } from './Tabledatas';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nexport default function Total() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(total_data)\r\n    const columns = [\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',\r\n    }, {\r\n        title: 'Capacity', field: 'capacity',\r\n    },\r\n    {\r\n        title: 'Contents', field: 'contents',\r\n    },\r\n    {\r\n        title: 'Free', field: 'free',\r\n    },\r\n    {\r\n        title: 'Contracted', field: 'contracted',\r\n    },\r\n    {\r\n        title: 'Delivered', field: 'delivered',\r\n    },\r\n    {\r\n        title: 'Remaining', field: 'remaining',\r\n    }\r\n  ]\r\n    const columns_archived = [\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',\r\n    }, {\r\n        title: 'Capacity', field: 'capacity',\r\n    },\r\n    {\r\n        title: 'Contents', field: 'contents',\r\n    },\r\n    {\r\n        title: 'Free', field: 'free',\r\n    },\r\n    {\r\n        title: 'Contracted', field: 'contracted',\r\n    },\r\n    {\r\n        title: 'Delivered', field: 'delivered',\r\n    },\r\n    {\r\n        title: 'Remaining', field: 'remaining',\r\n    }\r\n  ]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"TOTAL\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                  Toolbar: (props) => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\">\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n               \r\n                icons={{\r\n                  Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                  Edit: () => <CreateIcon color=\"action\" />,\r\n                  Export: () => <img src={Export}></img>,\r\n                  Delete: () => <DeleteIcon color=\"action\" />\r\n                 \r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Ingoing.js",["582","583"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { ingoing_data } from './Tabledatas';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport Export from './export.png';\r\nimport { DisabledByDefault } from '@mui/icons-material';\r\nexport default function Ingoing() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(ingoing_data)\r\n    const columns = [{\r\n        title: 'ID', field: 'id',filtering:false,\r\n    },\r\n    {\r\n        title: 'Silos', field: 'silos',\r\n    },\r\n    {\r\n        title: 'Date/Time', field: 'dateTime',filtering:false,\r\n    }, {\r\n        title: 'Operators', field: 'operators',filtering:false,\r\n    },\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',filtering:false,\r\n    },\r\n    {\r\n        title: 'Transport', field: 'transport',filtering:false,\r\n    },\r\n    {\r\n        title: 'Driver', field: 'driver',filtering:false,\r\n    },\r\n    {\r\n        title: 'Rego', field: 'rego',filtering:false,\r\n    },\r\n    {\r\n        title: 'Tare Weight', field: 'tareWeight',filtering:false,\r\n    },\r\n    {\r\n        title: 'Gross Weight', field: 'grossWeight',filtering:false,\r\n    },\r\n    {\r\n        title: 'Amount', field: 'amount',filtering:false,\r\n    },\r\n    {\r\n        title: 'Paddocks', field: 'paddocks',filtering:false,\r\n    },\r\n    {\r\n        title: 'Traits', field: 'traits',filtering:false,\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',filtering:false,\r\n    },\r\n    \r\n    \r\n  ]\r\n  const columns_archived = [{\r\n    title: 'ID', field: 'id',filtering:false,\r\n},\r\n{\r\n    title: 'Silos', field: 'silos',\r\n},\r\n{\r\n    title: 'Date/Time', field: 'dateTime',filtering:false,\r\n}, {\r\n    title: 'Operators', field: 'operators',filtering:false,\r\n},\r\n{\r\n    title: 'Cultivar', field: 'cultivar',filtering:false,\r\n},\r\n{\r\n    title: 'Transport', field: 'transport',filtering:false,\r\n},\r\n{\r\n    title: 'Driver', field: 'driver',filtering:false,\r\n},\r\n{\r\n    title: 'Rego', field: 'rego',filtering:false,\r\n},\r\n{\r\n    title: 'Tare Weight', field: 'tareWeight',filtering:false,\r\n},\r\n{\r\n    title: 'Gross Weight', field: 'grossWeight',filtering:false,\r\n},\r\n{\r\n    title: 'Amount', field: 'amount',filtering:false,\r\n},\r\n{\r\n    title: 'Paddocks', field: 'paddocks',filtering:false,\r\n},\r\n{\r\n    title: 'Traits', field: 'traits',filtering:false,\r\n},\r\n{\r\n    title: 'Notes', field: 'notes',filtering:false,\r\n},\r\n{\r\n    title: 'Archived', field: 'archived',filtering:false,\r\n},\r\n  ]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"INGOING\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                    onRowAdd: (newRow) =>\r\n            new Promise((resolve, reject) => {\r\n              setData([...data, newRow]);\r\n              setTimeout(() => resolve(), 500);\r\n            }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                    filtering:true,\r\n                    \r\n                }}\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                 \r\n                  icons={{\r\n                    Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Export: () => <img src={Export}></img>,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                   \r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Silos.js",["584","585"],"import React from \"react\";\r\nimport MaterialTable,{ MTableToolbar } from \"material-table\";\r\nimport { Progress } from \"semantic-ui-react\";\r\nimport {Checkbox} from \"semantic-ui-react\";\r\nimport {silos_data} from \"./Tabledatas\";\r\nimport Chart from \"./Chart\";\r\nimport \"../Grains.css\";\r\nimport \"./archived.css\";\r\nimport Export from \"./export.png\";\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\n\r\nexport default function Silos() {\r\n  const [selected, toggleselected] = React.useState(false);\r\nconst [data, setData] = React.useState(silos_data );\r\n  const columns = [\r\n    {\r\n      title: \"Farm\",\r\n      field: \"farm\",\r\n    },\r\n    {\r\n      title: \"Silo\",\r\n      field: \"silo\",\r\n    },\r\n    {\r\n      title: \"Cultivar\",\r\n      field: \"cultivar\",\r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",\r\n    },\r\n\r\n    {\r\n      title: \"Capacity\",\r\n      field: \"capacity\",\r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",\r\n      render: rowData => {\r\n        return <Progress percent={rowData.contents} progress color=\"rgb(68, 63, 63)\" />\r\n      }\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      field: \"status\",\r\n    },\r\n  ]\r\n  const columns_archived = [\r\n    {\r\n      title: \"Farm\",\r\n      field: \"farm\",\r\n    },\r\n    {\r\n      title: \"Silo\",\r\n      field: \"silo\",\r\n    },\r\n    {\r\n      title: \"Cultivar\",\r\n      field: \"cultivar\",\r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",\r\n    },\r\n\r\n    {\r\n      title: \"Capacity\",\r\n      field: \"capacity\",\r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",\r\n      render: rowData => {\r\n        return <Progress percent={rowData.contents} progress color=\"rgb(68, 63, 63)\" />\r\n      }\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      field: \"status\",\r\n    },\r\n    {\r\n      title: \"Archived\",\r\n      field: \"archived\",\r\n    },\r\n  ]\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"SILOS\"\r\n        data={data}\r\n        columns={selected ? columns_archived : columns}\r\n        // columns={columns}\r\n        detailPanel={(rowData) => {\r\n          return <Chart />;\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          paging: true,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n          exportButton: true,\r\n        }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div>\r\n              <MTableToolbar {...props} />\r\n              <div className=\"toggle-switch\">\r\n                <Checkbox\r\n                  toggle\r\n                  onClick={() => toggleselected(!selected)}\r\n                  checked={selected}\r\n                  label=\"Show Archived\"\r\n                />\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}  editable={{\r\n          onRowAdd:(newRow)=> new Promise((resolve,reject)=>{}),\r\n          onRowUpdate:(newRow,oldRow)=> new Promise(()=>{}),\r\n          onRowDelete:(selectedRow)=> new Promise(()=>{})\r\n        }}\r\n        icons={{\r\n          Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n          Edit: () => <CreateIcon color=\"action\" />,\r\n          Export: () => <img src={Export}></img>,\r\n          Delete: () => <DeleteIcon color=\"action\" />\r\n         \r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Outgoing.js",["586"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { outgoing_data } from './Tabledatas';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nexport default function Outgoing() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(outgoing_data)\r\n    const columns = [{\r\n      title: 'ID', field: 'id',filtering:false,\r\n  },\r\n  {\r\n      title: 'Silos', field: 'silos',\r\n  },\r\n  {\r\n      title: 'Date/Time', field: 'dateTime',filtering:false,\r\n  }, {\r\n      title: 'Operators', field: 'operators',filtering:false,\r\n  },\r\n   {\r\n      title: 'Contract', field: 'contract',\r\n  },\r\n  {\r\n      title: 'Cultivar', field: 'cultivar',filtering:false,\r\n  },\r\n  {\r\n      title: 'Transport', field: 'transport',filtering:false,\r\n  },\r\n  {\r\n      title: 'Driver', field: 'driver',filtering:false,\r\n  },\r\n  {\r\n      title: 'Rego', field: 'rego',filtering:false,\r\n  },\r\n  {\r\n      title: 'Tare Weight', field: 'tareWeight',filtering:false,\r\n  },\r\n  {\r\n      title: 'Gross Weight', field: 'grossWeight',filtering:false,\r\n  },\r\n  {\r\n      title: 'Amount', field: 'amount',filtering:false,\r\n  },\r\n  {\r\n      title: 'End Point Amount', field: 'endPointAmount',filtering:false,\r\n  },\r\n  {\r\n      title: 'Paddocks', field: 'paddocks',filtering:false,\r\n  },\r\n  {\r\n      title: 'Traits', field: 'traits',filtering:false,\r\n  },\r\n  {\r\n      title: 'Notes', field: 'notes',filtering:false,\r\n  },\r\n  ]\r\n    const columns_archived = [{\r\n      title: 'ID', field: 'id',filtering:false,\r\n  },\r\n  {\r\n      title: 'Silos', field: 'silos',\r\n  },\r\n  {\r\n      title: 'Date/Time', field: 'dateTime',filtering:false,\r\n  }, {\r\n      title: 'Operators', field: 'operators',filtering:false,\r\n  },\r\n   {\r\n      title: 'Contract', field: 'contract',\r\n  },\r\n  {\r\n      title: 'Cultivar', field: 'cultivar',filtering:false,\r\n  },\r\n  {\r\n      title: 'Transport', field: 'transport',filtering:false,\r\n  },\r\n  {\r\n      title: 'Driver', field: 'driver',filtering:false,\r\n  },\r\n  {\r\n      title: 'Rego', field: 'rego',filtering:false,\r\n  },\r\n  {\r\n      title: 'Tare Weight', field: 'tareWeight',filtering:false,\r\n  },\r\n  {\r\n      title: 'Gross Weight', field: 'grossWeight',filtering:false,\r\n  },\r\n  {\r\n      title: 'Amount', field: 'amount',filtering:false,\r\n  },\r\n  {\r\n      title: 'End Point Amount', field: 'endPointAmount',filtering:false,\r\n  },\r\n  {\r\n      title: 'Paddocks', field: 'paddocks',filtering:false,\r\n  },\r\n  {\r\n      title: 'Traits', field: 'traits',filtering:false,\r\n  },\r\n  {\r\n      title: 'Notes', field: 'notes',filtering:false,\r\n  },\r\n  {\r\n      title: 'Archived', field: 'archived',filtering:false,\r\n  },]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"OUTGOING\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                    onRowAdd: (newRow) =>\r\n            new Promise((resolve, reject) => {\r\n              setData([...data, newRow]);\r\n              setTimeout(() => resolve(), 500);\r\n            }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,filtering:true,  \r\n                }}\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                  \r\n                  icons={{\r\n                    Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Export: () => <img src={Export}></img>,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                   \r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Transfer.js",["587"],"import React from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nimport { transfer_data } from './Tabledatas';\r\nexport default function Transfer() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [data, setData] = React.useState(transfer_data)\r\n        \r\n        const columns = [{\r\n        title: 'ID', field: 'id'\r\n    },\r\n    {\r\n        title: 'Silos', field: 'silos',\r\n    },\r\n    {\r\n        title: 'Date/Time', field: 'dateTime',\r\n    }, {\r\n        title: 'Operators', field: 'operators',\r\n    },\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',\r\n    },\r\n    \r\n    {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    \r\n    {\r\n        title: 'Traits', field: 'traits',\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',\r\n    },\r\n    \r\n    \r\n  ]\r\n    const columns_archived = [{\r\n        title: 'ID', field: 'id'\r\n    },\r\n    {\r\n        title: 'Silos', field: 'silos',\r\n    },\r\n    {\r\n        title: 'Date/Time', field: 'dateTime',\r\n    }, {\r\n        title: 'Operators', field: 'operators',\r\n    },\r\n    {\r\n        title: 'Cultivar', field: 'cultivar',\r\n    },\r\n    \r\n    {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    \r\n    {\r\n        title: 'Traits', field: 'traits',\r\n    },\r\n    {\r\n        title: 'Notes', field: 'notes',\r\n    },\r\n    {\r\n        title: 'Archived', field: 'archived',\r\n    },\r\n    \r\n  ]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"TRANSFER\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                }}\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                 \r\n                  icons={{\r\n                    Add: () => <AddCircleRoundedIcon fontSize=\"large\" color=\"primary\" />,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Export: () => <img src={Export}></img>,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                   \r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Tabledatas.js",["588"],"import { Progress } from \"semantic-ui-react\";\r\n\r\nexport  const silos_data = [\r\n    { farm: 'abc', silo: 'we', cultivar: 'wq', capacity:\"50\",contents:\"60\",status:\"asd\"},\r\n    { farm: 'abc', silo: 'we', cultivar: 'wq', capacity:\"50\",contents:\"44\",status:\"asd\"},\r\n];\r\n\r\nexport const outgoing_data = [\r\n    {id:\"abc\",silos:\"abc\",dateTime:\"30/11/2021\",operators:\"abc\",contract:\"asd\",cultivar:\"asd\",transport:\"asd\",driver:\"asd\",rego:\"asd\",\r\n    tareWeight:\"abc\",grossWeight:\"abc\",amount:\"abc\",endPointAmount:\"abc\",paddocks:\"abc\",traits:\"abc\",notes:\"abc\",archived:\"abc\"},\r\n\r\n    {id:\"abc\",silos:\"abc\",dateTime:\"30/11/2021\",operators:\"abc\",contract:\"asd\",cultivar:\"asd\",transport:\"asd\",driver:\"asd\",rego:\"asd\",\r\n    tareWeight:\"abc\",grossWeight:\"abc\",amount:\"abc\",endPointAmount:\"abc\",paddocks:\"abc\",traits:\"abc\",notes:\"abc\",archived:\"abc\"},\r\n];\r\n\r\nexport const ingoing_data = [\r\n    {id:\"asd\",silos:\"abc\",dateTime:\"30/11/2021\",operators:\"abc\",contract:\"asd\",cultivar:\"asd\",transport:\"asd\",driver:\"asd\",rego:\"asd\",\r\n        tareWeight:\"abc\",grossWeight:\"abc\",amount:\"abc\",endPointAmount:\"abc\",paddocks:\"abc\",traits:\"abc\",notes:\"abc\",archived:\"yes\"},\r\n        {id:\"asd\",silos:\"abc\",dateTime:\"30/11/2021\",operators:\"abc\",contract:\"asd\",cultivar:\"asd\",transport:\"asd\",driver:\"asd\",rego:\"asd\",\r\n        tareWeight:\"abc\",grossWeight:\"abc\",amount:\"abc\",endPointAmount:\"abc\",paddocks:\"abc\",traits:\"abc\",notes:\"abc\",archived:\"no\"},\r\n];\r\n\r\nexport const contracts_data = [\r\n    {status:\"asd\",contractNo:\"asd\",startDate:\"20/10/2021\",endDate:\"30/11/2021\",buyer:\"asd\",destination:\"asd\",commodity:\"asd\",fulfilled:\"asd\",\r\n    quantity:\"asd\",grade:\"asd\",tolerence:\"asd\",notes:\"asd\"},\r\n    {status:\"asd\",contractNo:\"asd\",startDate:\"20/10/2021\",endDate:\"30/11/2021\",buyer:\"asd\",destination:\"asd\",commodity:\"asd\",fulfilled:\"asd\",\r\n    quantity:\"asd\",grade:\"asd\",tolerence:\"asd\",notes:\"asd\"},\r\n];\r\nexport const total_data = [\r\n    {cultivar:\"abc\",capacity:\"34\",contents:\"44\",free:\"aabc\",contracted:\"abc\",delivered:\"abc\",remaining:\"abc\"},\r\n      {cultivar:\"abc\",capacity:\"34\",contents:\"44\",free:\"aabc\",contracted:\"abc\",delivered:\"abc\",remaining:\"abc\"},\r\n      {cultivar:\"abc\",capacity:\"34\",contents:\"44\",free:\"aabc\",contracted:\"abc\",delivered:\"abc\",remaining:\"abc\"},\r\n];\r\nexport const transfer_data = [\r\n    {id:\"abc\",silos:\"asd\",dateTime:\"30/12/2020\",operators:\"asd\",cultivar:\"asd\",amount:\"asd\",traits:\"asd\",notes:\"asd\",archived:\"yes\", },\r\n    {id:\"abc\",silos:\"asd\",dateTime:\"30/12/2020\",operators:\"asd\",cultivar:\"asd\",amount:\"asd\",traits:\"asd\",notes:\"asd\",archived:\"no\", },\r\n    {id:\"abc\",silos:\"asd\",dateTime:\"30/12/2020\",operators:\"asd\",cultivar:\"asd\",amount:\"asd\",traits:\"asd\",notes:\"asd\",archived:\"yes\", },\r\n];\r\nexport const bar_data={\r\n    labels:['Red','Blue','Yellow','Green','Purple','Orange'],\r\n    datasets: [{\r\n     label: 'new farm abc',\r\n     data: [4, 9, 3, 5, 2, 3],  \r\n     backgroundColor: [\r\n      'rgba(255, 99, 132, 0.2)',\r\n      'rgba(54, 162, 235, 0.2)',\r\n      'rgba(255, 206, 86, 0.2)',\r\n      'rgba(75, 192, 192, 0.2)',\r\n      'rgba(153, 102, 255, 0.2)',\r\n      'rgba(255, 159, 64, 0.2)'\r\n  ],\r\n  borderColor: [\r\n    'rgba(255, 99, 132, 1)',\r\n    'rgba(54, 162, 235, 1)',\r\n    'rgba(255, 206, 86, 1)',\r\n    'rgba(75, 192, 192, 1)',\r\n    'rgba(153, 102, 255, 1)',\r\n    'rgba(255, 159, 64, 1)'\r\n],\r\nborderWidth: 1 }]\r\n  } ;","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\Chart.js",["589"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport {Grid} from '@material-ui/core'\r\n\r\n\r\nimport BarChart from './BarChart';\r\n\r\n\r\n\r\nexport default function Chart() {\r\n\r\n   \r\n\r\n\r\n    const [data, setData] = React.useState([\r\n        {id:1,date:\"30/11/2021\",status:\"TOTAL\",amount:\"20\"}\r\n    ])\r\n    const columns = [{\r\n        title: 'ID', field: 'id',\r\n    },\r\n    {\r\n        title: 'Date', field: 'date',\r\n    },\r\n    {\r\n        title: 'Status', field: 'status',\r\n    }, {\r\n        title: 'Amount', field: 'amount',\r\n    },\r\n    {\r\n        title: 'Traits', field: 'traits',\r\n    },\r\n    \r\n    \r\n    \r\n  ]\r\n    return (\r\n        <div>\r\n            <Grid container spacing={0}>\r\n            <Grid item xs={4}>\r\n            <BarChart />\r\n            </Grid>\r\n\r\n            <Grid item xs={8}>\r\n            <MaterialTable title=\"\"\r\n                data={data}\r\n                columns={columns}\r\n                \r\n                options={{\r\n                    title:false,\r\n                    actionsColumnIndex: -1,\r\n                    paging: false,\r\n                   \r\n                    search:false,\r\n                    \r\n                }}\r\n                icons={{\r\n                   // Export: () => <img src={Export}></img>,\r\n                    // Edit: () => <CreateIcon color=\"action\" />,\r\n                    // Delete: () => <DeleteIcon color=\"action\" />\r\n                  }}\r\n            />\r\n            </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\GrainInventory\\Tables\\BarChart.js",["590"],"\r\nimport React from 'react'\r\nimport {Bar} from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto'\r\nimport {CategoryScale} from 'chart.js';\r\nimport { bar_data } from './Tabledatas';\r\n Chart.register(CategoryScale)\r\n\r\n\r\n\r\nexport default function BarChart() {\r\n  const [data, setData] = React.useState(bar_data);\r\n  const options={\r\n    title:{\r\n      display:true,\r\n      text:'Bar Chart'\r\n    },\r\n    \r\n    scales:{\r\n      yAxes:[\r\n        {\r\n          ticks:{\r\n            min:0,\r\n            max:6,\r\n            stepSize:1\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n \r\n  \r\n  return (\r\n    <div >\r\n     <Bar data={data}\r\n     height={300}\r\n     width={600}\r\n     options={options}\r\n     \r\n     />\r\n     \r\n      \r\n    </div>\r\n  )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\FuelTable.js",["591"],"import React, { useState } from \"react\";\r\nimport { Segment } from \"semantic-ui-react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\nimport TableDetails from \"./Tabledetails\";\r\nimport \"./Fuel.css\";\r\n\r\nexport default function FuelTable() {\r\n  const [state, setState] = React.useState(\"FUELTANK\");\r\n\r\n  return (\r\n    <div  className= \"table-size\">\r\n    \r\n    <div className= \"subheader\">  \r\n   \r\n        <h1 style={{\"color\": \"black\"}}>Fuel Inventory </h1><span>&nbsp;&nbsp;</span>\r\n  \r\n    </div>\r\n    <div className=\"fuel\">\r\n      <Menu pointing>\r\n        <Menu.Item\r\n          name=\"FUELTANK\"\r\n          active={state === \"FUELTANK\"}\r\n          color=\"green\"\r\n          onClick={() => setState(\"FUELTANK\")}\r\n        />\r\n        <Menu.Item\r\n          name=\"INGOING\"\r\n          active={state === \"INGOING\"}\r\n          onClick={() => setState(\"INGOING\")}\r\n          color=\"green\"\r\n        />\r\n        <Menu.Item\r\n          name=\"OUTGOING\"\r\n          active={state === \"OUTGOING\"}\r\n          onClick={() => setState(\"OUTGOING\")}\r\n          color=\"green\"\r\n        />\r\n        <Menu.Item\r\n          name=\"STOCKTAKE\"\r\n          active={state === \"STOCKTAKE\"}\r\n          onClick={() => setState(\"STOCKTAKE\")}\r\n          color=\"green\"\r\n        />\r\n\r\n        <Menu.Item\r\n          name=\"TOTAL\"\r\n          active={state === \"TOTAL\"}\r\n          onClick={() => setState(\"TOTAL\")}\r\n          color=\"green\"\r\n        />\r\n      </Menu>\r\n      <Segment attached=\"bottom\">\r\n        <TableDetails dataValue={state} />\r\n      </Segment>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tabledetails.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Total.js",["592","593","594"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { total_data,type_data } from './Tabledatas';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nimport { MenuItem, Select } from '@material-ui/core';\r\nexport default function Total() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [type, setType] = useState({});\r\n\r\n  // const lsType = [\r\n  //   { id: 1, title: \"Cattle\" },\r\n  //   { id: 2, title: \"Bulls\" },\r\n  //   { id: 3, title: \"Sheep\" },\r\n  //   { id: 4, title: \"Horses\" },\r\n  //   { id: 5, title: \"Chickens\" },\r\n  //   { id: 6, title: \"Pigs\" },\r\n  //   { id: 7, title: \"Deer\" },\r\n  //   { id: 8, title: \"Goats\" },\r\n  //   { id: 9, title: \"Llamas\" },\r\n  //   { id: 10, title: \"Bees\" },\r\n  // ];\r\n\r\n    const [data, setData] = React.useState(total_data)\r\n    const columns = [\r\n    {\r\n        title: 'Type', field: 'type',lookup:type,\r\n    }, {\r\n        title: 'Capacity', field: 'capacity',filtering:false,\r\n    },\r\n    {\r\n        title: 'Contents', field: 'contents',filtering:false,\r\n    },\r\n    {\r\n        title: 'Free', field: 'free',filtering:false,\r\n    },\r\n    {\r\n      title: 'Contents', field: 'contents1',filtering:false,\r\n  },\r\n    \r\n  ];\r\n\r\n  \r\n    const columns_archived = [\r\n      {\r\n        title: 'Type', field: 'type',lookup:type,\r\n    }, {\r\n        title: 'Capacity', field: 'capacity',filtering:false,\r\n    },\r\n    {\r\n        title: 'Contents', field: 'contents',filtering:false,\r\n    },\r\n    {\r\n        title: 'Free', field: 'free',filtering:false,\r\n    },\r\n    {\r\n      title: 'Contents', field: 'contents1',filtering:false,\r\n  },\r\n  ];\r\n  useEffect(() => {\r\n    const type = {};\r\n    type_data.map((row) => (type[row.id] = row.title));\r\n    setType(type);\r\n  }, []);\r\n    return (\r\n        <div>\r\n          {/* <Select\r\n    labelId=\"demo-simple-select-label\"\r\n    id=\"demo-simple-select\"\r\n     value={type}\r\n    // label=\"Age\"\r\n    // onChange={handleChange}\r\n  >\r\n    <MenuItem value={Diesel}>Diesel</MenuItem>\r\n    <MenuItem value={Unleaded}>Unleaded</MenuItem>\r\n    <MenuItem value={Aviation}>Aviation</MenuItem>\r\n  </Select> */}\r\n            <MaterialTable title=\"TOTAL\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,filtering:true,\r\n                }}\r\n                components={{\r\n                  Toolbar: (props) => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\">\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n                icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Outgoing.js",["595"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { outgoing_data, type_data } from './Tabledatas';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nexport default function Outgoing() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [type, setType] = useState({});\r\n    const [data, setData] = React.useState(outgoing_data)\r\n    const columns = [{\r\n      title: 'Fuel Tank', field: 'fuelTank',filtering:false,\r\n  },\r\n\r\n  {\r\n      title: 'Date/Time', field: 'dateTime',filtering:false,\r\n  }, {\r\n      title: 'Operator', field: 'operator',filtering:false,\r\n  },\r\n   {\r\n      title: 'Adjustment', field: 'adjustment',filtering:false,\r\n  },\r\n  {\r\n    title: 'Type', field: 'type',lookup:type,\r\n},\r\n  {\r\n      title: 'Equipment', field: 'equipment',filtering:false,\r\n  },\r\n  {\r\n      title: 'Hours', field: 'hours',filtering:false,\r\n  },\r\n  {\r\n      title: 'Milage', field: 'milage',filtering:false,\r\n  },\r\n  \r\n  {\r\n      title: 'Notes', field: 'notes',filtering:false,\r\n  },\r\n  ]\r\n    const columns_archived = [{\r\n        title: 'Fuel Tank', field: 'fuelTank',filtering:false,\r\n    },\r\n  \r\n    {\r\n        title: 'Date/Time', field: 'dateTime',filtering:false,\r\n    }, {\r\n        title: 'Operator', field: 'operator',filtering:false,\r\n    },\r\n     {\r\n        title: 'Adjustment', field: 'adjustment',filtering:false,\r\n    },\r\n    {\r\n      title: 'Type', field: 'type',lookup:type,\r\n  },\r\n    {\r\n        title: 'Equipment', field: 'equipment',filtering:false,\r\n    },\r\n    {\r\n        title: 'Hours', field: 'hours',filtering:false,\r\n    },\r\n    {\r\n        title: 'Milage', field: 'milage',filtering:false,\r\n    },\r\n    \r\n    {\r\n        title: 'Notes', field: 'notes',filtering:false,\r\n    },\r\n  {\r\n      title: 'Archived', field: 'archived',filtering:false,\r\n  },];\r\n  useEffect(() => {\r\n    const type = {};\r\n    type_data.map((row) => (type[row.id] = row.title));\r\n    setType(type);\r\n  }, []);\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"OUTGOING\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd: (newRow) =>\r\n            new Promise((resolve, reject) => {\r\n              setData([...data, newRow]);\r\n              setTimeout(() => resolve(), 500);\r\n            }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,filtering:true,  \r\n                }}\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived \"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\StockTake.js",["596"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable,{ MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Export from './export.png';\r\nimport { stocktake_data,type_data } from './Tabledatas';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nexport default function StockTake() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [type, setType] = useState({});\r\n    const [data, setData] = React.useState(stocktake_data)\r\n    const columns = [{\r\n      title: 'Fuel Tank', field: 'fuelTank',filtering:false,\r\n   },\r\n\r\n    {\r\n       title: 'Date/Time', field: 'dateTime',filtering:false,\r\n    }, \r\n    {\r\n      title: 'Operator', field: 'operator',filtering:false,\r\n    },\r\n    \r\n    \r\n    {\r\n        title: 'Reported', field: 'reported',filtering:false,\r\n    },\r\n    {\r\n      title: 'Adjustment', field: 'adjustment',filtering:false,\r\n  },\r\n  {\r\n    title: 'Type', field: 'type',lookup:type,\r\n},\r\n  ]\r\n    const columns_archived = [\r\n      {\r\n        title: 'Fuel Tank', field: 'fuelTank',filtering:false,\r\n     },\r\n  \r\n      {\r\n         title: 'Date/Time', field: 'dateTime',filtering:false,\r\n      }, \r\n      {\r\n        title: 'Operator', field: 'operator',filtering:false,\r\n      },\r\n      \r\n      \r\n      {\r\n          title: 'Reported', field: 'reported',filtering:false,\r\n      },\r\n      {\r\n        title: 'Adjustment', field: 'adjustment',filtering:false,\r\n    },\r\n    {\r\n      title: 'Type', field: 'type',lookup:type\r\n  },\r\n      {\r\n        title: \"Archived\",\r\n        field: \"archived\",\r\n      },];\r\n      useEffect(() => {\r\n        const type = {};\r\n        type_data.map((row) => (type[row.id] = row.title));\r\n        setType(type);\r\n      }, []);\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"STOCKTAKE\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,filtering:true,\r\n                }}\r\n                components={{\r\n                  Toolbar: props => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div className=\"toggle-switch\">\r\n                        <Checkbox\r\n                          toggle\r\n                          onClick={() => toggleselected(!selected)}\r\n                          checked={selected}\r\n                          label=\"Show Archived\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n                icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Ingoing.js",["597","598"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { ingoing_data,type_data } from './Tabledatas';\r\nimport { Checkbox } from \"semantic-ui-react\";\r\nimport Export from './export.png';\r\nimport { DisabledByDefault } from '@mui/icons-material';\r\nexport default function Ingoing() {\r\n    const [selected, toggleselected] = React.useState(false);\r\n    const [type, setType] = useState({});\r\n    const [data, setData] = React.useState(ingoing_data)\r\n    const columns = [{\r\n        title: 'Fuel Tank', field: 'fuelTank',filtering:false,\r\n    },\r\n    \r\n    {\r\n        title: 'Date/Time', field: 'dateTime',filtering:false,\r\n    }, {\r\n        title: 'Operator', field: 'operator',filtering:false,\r\n    },\r\n    {\r\n        title: 'Amount', field: 'amount',filtering:false,\r\n    },\r\n    {\r\n        title: 'Type', field: 'type',lookup:type,\r\n    },\r\n    {\r\n        title: 'Supplier', field: 'supplier',filtering:false,\r\n    },\r\n    \r\n    {\r\n        title: 'Notes', field: 'notes',filtering:false,\r\n    },\r\n    \r\n    \r\n  ]\r\n  const columns_archived = [{\r\n    title: 'Fuel Tank', field: 'fuelTank',filtering:false,\r\n},\r\n\r\n{\r\n    title: 'Date/Time', field: 'dateTime',filtering:false,\r\n}, {\r\n    title: 'Operator', field: 'operator',filtering:false,\r\n},\r\n{\r\n    title: 'Amount', field: 'amount',filtering:false,\r\n},\r\n{\r\n    title: 'Type', field: 'type',lookup:type,\r\n},\r\n{\r\n    title: 'Supplier', field: 'supplier',filtering:false,\r\n},\r\n\r\n{\r\n    title: 'Notes', field: 'notes',filtering:false,\r\n},\r\n{\r\n    title: 'Archived', field: 'archived',filtering:false,\r\n},\r\n  ];\r\n  useEffect(() => {\r\n    const type = {};\r\n    type_data.map((row) => (type[row.id] = row.title));\r\n    setType(type);\r\n  }, []);\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"INGOING\"\r\n                data={data}\r\n                columns={selected ? columns_archived : columns}\r\n                editable={{\r\n                  onRowAdd: (newRow) =>\r\n            new Promise((resolve, reject) => {\r\n              setData([...data, newRow]);\r\n              setTimeout(() => resolve(), 500);\r\n            }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataUpdate = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataUpdate[index] = newData;\r\n                          setData([...dataUpdate]);\r\n          \r\n                          resolve();\r\n                        }, 1000)\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                          const dataDelete = [...data];\r\n                          const index = oldData.tableData.id;\r\n                          dataDelete.splice(index, 1);\r\n                          setData([...dataDelete]);\r\n          \r\n                          resolve()\r\n                        }, 1000)\r\n                      }),\r\n                  }}\r\n                options={{\r\n                    actionsColumnIndex: -1,\r\n                    paging: true,\r\n                    pageSizeOptions: [2, 5, 10, 15, 20],\r\n                    paginationType: \"stepped\",\r\n                    showFirstLastPageButtons: false,\r\n                    exportButton: true,\r\n                    filtering:true\r\n                }}\r\n                components={{\r\n                    Toolbar: (props) => (\r\n                      <div>\r\n                        <MTableToolbar {...props} />\r\n                        <div className=\"toggle-switch\">\r\n                          <Checkbox\r\n                            toggle\r\n                            onClick={() => toggleselected(!selected)}\r\n                            checked={selected}\r\n                            label=\"Show Archived\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ),\r\n                  }}\r\n                icons={{\r\n                    Export: () => <img src={Export}></img>,\r\n                    Edit: () => <CreateIcon color=\"action\" />,\r\n                    Delete: () => <DeleteIcon color=\"action\" />\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\FuelTank.js",["599","600"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable,{ MTableToolbar } from \"material-table\";\r\nimport { Progress } from \"semantic-ui-react\";\r\nimport {Checkbox} from \"semantic-ui-react\";\r\nimport {fuelTank_data,type_data} from \"./Tabledatas\";\r\n\r\nimport \"../Fuel.css\";\r\nimport \"./archived.css\";\r\nimport Export from \"./export.png\";\r\n\r\n\r\nexport default function FuelTank() {\r\n  const [selected, toggleselected] = React.useState(false);\r\n  const [type, setType] = useState({});\r\nconst [data, setData] = React.useState(fuelTank_data );\r\n  const columns = [\r\n    {\r\n      title: \"Farm\",\r\n      field: \"farm\",filtering:false,\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      field: \"name\",filtering:false,\r\n    },\r\n    {\r\n      title: \"Type\",\r\n      field: \"type\",lookup:type,\r\n    },\r\n   \r\n    {\r\n      title: \"Capacity\",\r\n      field: \"capacity\",filtering:false,\r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",filtering:false,\r\n    },\r\n    // {\r\n    //   title: \"Contents\",\r\n    //   field: \"contents\",filtering:false,\r\n    // },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",filtering:false,\r\n      render: rowData => {\r\n        return <Progress percent={rowData.contents} progress color=\"rgb(68, 63, 63)\" />\r\n      }\r\n    },\r\n    \r\n   \r\n  ]\r\n  const columns_archived = [\r\n    {\r\n      title: \"Farm\",\r\n      field: \"farm\",filtering:false,\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      field: \"name\",filtering:false,\r\n    },\r\n    {\r\n      title: \"Type\",\r\n      field: \"type\",lookup:type,\r\n    },\r\n   \r\n    {\r\n      title: \"Capacity\",\r\n      field: \"capacity\",filtering:false,\r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",filtering:false,\r\n      \r\n    },\r\n    {\r\n      title: \"Contents\",\r\n      field: \"contents\",filtering:false,\r\n      render: rowData => {\r\n        return <Progress percent={rowData.contents} progress color=\"rgb(68, 63, 63)\" />\r\n      }\r\n\r\n    },\r\n    {\r\n      title: \"Archived\",\r\n      field: \"archived\",filtering:false,\r\n    },\r\n  ];\r\n  useEffect(() => {\r\n    const type = {};\r\n    type_data.map((row) => (type[row.id] = row.title));\r\n    setType(type);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"FUEL TANK\"\r\n        data={data}\r\n        columns={selected ? columns_archived : columns}\r\n        // columns={columns}\r\n        // detailPanel={(rowData) => {\r\n        //   return <Chart />;\r\n        // }}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          paging: true,\r\n          pageSizeOptions: [2, 5, 10, 15, 20],\r\n          paginationType: \"stepped\",\r\n          showFirstLastPageButtons: false,\r\n          exportButton: true,filtering:true\r\n        }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div>\r\n              <MTableToolbar {...props} />\r\n              <div className=\"toggle-switch\">\r\n                <Checkbox\r\n                  toggle\r\n                  onClick={() => toggleselected(!selected)}\r\n                  checked={selected}\r\n                  label=\"Show Archived\"\r\n                />\r\n              </div>\r\n            </div>\r\n          ),\r\n        }}\r\n        icons={{\r\n          Export: () => <img src={Export}></img>,\r\n          // Edit: () => <CreateIcon color=\"action\" />,\r\n          // Delete: () => <DeleteIcon color=\"action\" />\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","D:\\GFS_Trace\\src\\components\\pages\\Inventory\\FuelInventory\\Tables\\Tabledatas.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Login\\SignUp.js",[],"D:\\GFS_Trace\\src\\components\\pages\\Login\\SignIn.js",["601"],"import React from 'react'\r\nimport './Login.css'\r\nimport farmsimple from '../../../images/logo.jpg'\r\nimport { useState } from \"react\";\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\n\r\nfunction SignIn() {\r\n    const [email,setEmail]=useState('');\r\n    const [password,setPassword]=useState('');\r\n    const mail=\"jesty@gmail.com\";\r\n    const pass=\"jesty\";\r\n    let attempts=3;\r\n    let history= useNavigate();\r\n    const submitfun=()=>{\r\n        if (email===mail && password===pass) {\r\n            history(\"/Loggedin\");\r\n        }\r\n        else if(attempts>=0){\r\n            \r\n            attempts=attempts-1;\r\n            alert(\"invalid user, \"+attempts+\" attempts left\")\r\n        }\r\n    }\r\n\r\n    // const handleClick=()=>{\r\n    //     window.open(\"https://grain.croppaco.com/#/\");\r\n    // };\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {/* <button onClick={handleClick} className=\"btn-grain\">GRAIN CONSOLE</button> */}\r\n        <div className=\"signin-container\">\r\n            <form className=\"input-section\">\r\n               \r\n                <div>\r\n               \r\n                <div class=\"logoNameSignin\" style={{ color: \"rgb(79, 79, 79)\" }}>\r\n                <img className=\"logo\" src={farmsimple} width=\"50\" height=\"50\" />\r\n                 <b>GFS</b> Trace\r\n                </div>\r\n                </div>\r\n                <input type=\"text\" onChange={(e)=>setEmail(e.target.value)} placeholder=\"Email\" />\r\n                <input type=\"password\" onChange={(e)=>setPassword(e.target.value)} placeholder=\"Password\" />\r\n                <div className=\"button-right\">\r\n                    <Link to=\"/Forget\" className=\"forget-button\">Forget Password?</Link>\r\n                </div>\r\n            </form>\r\n            <button onClick={submitfun} className=\"btn-login\" ><strong>LOGIN</strong></button>\r\n            <div className=\"act-style\">Don't have an account?<Link to=\"/SignUp\" className=\"forget-button\">SIGN UP</Link></div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignIn\r\n","D:\\GFS_Trace\\src\\components\\pages\\Login\\Forget.js",["602"],"import React from 'react'\r\nimport './Login.css'\r\nimport farmsimple from '../../../images/logo.jpg'\r\nimport { Link } from 'react-router-dom'\r\nfunction Forget() {\r\n    return (\r\n            <div className=\"signin-container\">\r\n            <form className=\"input-section\">\r\n                \r\n            \r\n               \r\n               <div class=\"logoNameSignin\" style={{ color: \"rgb(79, 79, 79)\" }}>\r\n               <img className=\"logo\" src={farmsimple} width=\"50\" height=\"50\" />\r\n                <b>GFS</b> Trace\r\n               </div>\r\n              \r\n                <h3>Enter your email to request a password reset</h3>\r\n                <input type=\"text\" placeholder=\"Email\" />\r\n                <input type=\"text\" placeholder=\"New Password\" />\r\n                <input type=\"text\" placeholder=\"Confirm Password\" />\r\n            </form>\r\n            <div className=\"v-card__actions\">\r\n                <Link to=\"/\" className=\"btn-cancel\">BACK</Link>\r\n                <Link to=\"/\"><button className=\"btn-signup\">RESET</button></Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Forget\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Cultivars\\Cultivarsmain.js",["603","604","605","606","607","608","609","610","611"],"import { Button, Checkbox, Dialog, DialogActions, DialogContent, Grid, InputLabel, Menu, MenuItem, TextField } from '@material-ui/core'\r\nimport React from 'react'\r\nimport Form from './Useform'\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Box from '@mui/material/Box';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport wheat from './wheat.png';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport Select from '@mui/material/Select';\r\nimport ListItemText from '@mui/material/ListItemText';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 100,\r\n        },\r\n    },\r\n};\r\n\r\nconst grains = [\r\n    { id: 1, title: \"Barley(62 kg/hl)\", kilo: 62 },\r\n    { id: 2, title: \"Canary Seed(70 kg/hl)\", kilo: 70 },\r\n    { id: 3, title: \"Canola(70 kg/hl)\", kilo: 70 },\r\n    { id: 4, title: \"Cereal Rye(71 kg/hl)\", kilo: 71 },\r\n    { id: 5, title: \"Chickpea(75 kg/hl)\", kilo: 75 },\r\n    { id: 6, title: \"Cowpea(75 kg/hl)\", kilo: 75 },\r\n    { id: 7, title: \"Faba Bean(75 kg/hl)\", kilo: 75 },\r\n    { id: 8, title: \"Field Pea(75 kg/hl)\", kilo: 75 },\r\n    { id: 9, title: \"Grain Sorghum(72 kg/hl)\", kilo: 72 },\r\n    { id: 10, title: \"Linseed(72 kg/hl)\", kilo: 72 },\r\n    { id: 11, title: \"Lupin(75 kg/hl)\", kilo: 75 },\r\n    { id: 12, title: \"Maize(72 kg/hl)\", kilo: 72 },\r\n    { id: 13, title: \"Millet(62 kg/hl)\", kilo: 62 },\r\n    { id: 14, title: \"Mungbean(75 kg/hl)\", kilo: 75 },\r\n    { id: 15, title: \"Navy Bean(75 kg/hl)\", kilo: 75 },\r\n    { id: 16, title: \"Oats(45 kg/hl)\", kilo: 45 },\r\n    { id: 17, title: \"Pigeon Pea(75 kg/hl)\", kilo: 75 },\r\n    { id: 18, title: \"Rice(56 kg/hl)\", kilo: 56 },\r\n    { id: 19, title: \"Safflower(53 kg/hl)\", kilo: 53 },\r\n    { id: 20, title: \"Soybean(75 kg/hl)\", kilo: 75 },\r\n    { id: 21, title: \"Sunflower(40 kg/hl)\", kilo: 40 },\r\n    { id: 22, title: \"Triticale(65 kg/hl)\", kilo: 65 },\r\n    { id: 23, title: \"Vetch(75 kg/hl)\", kilo: 75 },\r\n    { id: 24, title: \"Wheat(75 kg/hl)\", kilo: 75 }\r\n];\r\n\r\nconst trait = [\r\n    'Defective Grains',\r\n    'Foreign Material',\r\n    'Heat Damage',\r\n    'Impurities',\r\n    'Moisture',\r\n    'Oil',\r\n    'Protein',\r\n    'Purity',\r\n    'Screenings',\r\n    'Test Weight',\r\n    'Total Damage',\r\n    'Unmillable Material',\r\n    'Vitreous Kernels', \r\n    'Grade',\r\n    'Retention',\r\n    'Scale Reading',\r\n    'Falling Numbers'\r\n];\r\n\r\nexport default function Cultivarsmain(props) {\r\n    console.log(props.data)\r\n    const [grainweight, setgrainweight] = React.useState(props.data.weight);\r\n    const [s, setS] = React.useState(0);\r\n    const [varietyname, setvarietyname] = React.useState();\r\n    const [bool, setbool] = React.useState(false);\r\n    const [bool2, setbool2] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [items, setitems] = React.useState(props.data.Varieties);\r\n    const [name, setname] = React.useState(props.data.name);\r\n    const [dataedit, setdataedit] = React.useState(\"\");\r\n    const [helper, sethelper] = React.useState(\"\");\r\n    const [helper2, sethelper2] = React.useState(\"\");\r\n    const [traits, settraits] = React.useState([]);\r\n    const open = Boolean(anchorEl);\r\n    const [openvariety, setopenvariety] = React.useState(false);\r\n    const [openedit, setopenedit] = React.useState(false);\r\n    const [personName, setPersonName] = React.useState([]);\r\n\r\n    const handleChange = (event) => {\r\n        const {\r\n            target: { value },\r\n        } = event;\r\n        setPersonName(\r\n            // On autofill we get a stringified value.\r\n            typeof value === 'string' ? value.split(',') : value,\r\n        );\r\n    };\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleChange1 = (event) => {\r\n        setgrainweight(event.target.value);\r\n    };\r\n\r\n    const handleChange3 = (event) => {\r\n        setname(event.target.value);\r\n        if (event.target.value == '') {\r\n            setbool(true)\r\n            sethelper(\"Required\")\r\n        }\r\n        else {\r\n            setbool(false)\r\n            sethelper(\"\")\r\n        }\r\n    };\r\n\r\n    const handleChange2 = (event) => {\r\n        setvarietyname(event.target.value);\r\n        setdataedit(event.target.value)\r\n        if (event.target.value == '') {\r\n            setbool2(true)\r\n            sethelper2(\"Required\")\r\n        }\r\n        else {\r\n            setbool2(false)\r\n            sethelper2(\"\")\r\n        }\r\n    };\r\n    const handleChangedata = (event) => {\r\n        setdataedit(event.target.value)\r\n        if (event.target.value == '') {\r\n            setbool2(true)\r\n            sethelper2(\"Required\")\r\n        }\r\n        else {\r\n            setbool2(false)\r\n            sethelper2(\"\")\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n        setopenvariety(false);\r\n        setopenedit(false);\r\n    };\r\n    const handleRemove = (e, d) => {\r\n        setitems(items.filter(item => item !== d))\r\n        setopenedit(false);\r\n    }\r\n\r\n    const handleMenuItemClick = (event, index) => {\r\n        setgrainweight(grains[index].kilo);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleClickVariety = (event) => {\r\n        setopenvariety(true)\r\n    }\r\n\r\n    const handleOk = (event) => {\r\n        if (varietyname != \"\") {\r\n            setitems(values => ([...values, varietyname]));\r\n            setopenvariety(false);\r\n            setvarietyname(\"\")\r\n        }\r\n    }\r\n    const handleOkEdit = (event) => {\r\n        if (dataedit != \"\") {\r\n            let newArr = [...items];\r\n            newArr[s] = dataedit;\r\n            setitems(newArr)\r\n            setopenedit(false);\r\n            setdataedit(\"\")\r\n        }\r\n    }\r\n\r\n    const handleCheck = (event) => {\r\n        if (event.target.checked === true) {\r\n            settraits(values => ([...values, event.target.value]));\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n    }\r\n\r\n    const handleEdit = (e, d, index) => {\r\n        setdataedit(d)\r\n        setS(index)\r\n        setopenedit(true)\r\n    }\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        variant=\"standard\"\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        required=\"true\"\r\n                        value={name}\r\n                        onChange={handleChange3}\r\n                        error={bool}\r\n                        helperText={helper}\r\n                        autocomplete=\"off\"\r\n                    />\r\n                    <Grid container alignItems=\"flex-end\">\r\n                        <Grid item xs={12} md={5}>\r\n                            <TextField\r\n                                variant=\"standard\"\r\n                                name=\"grainweight\"\r\n                                label=\"Grain Weight\"\r\n                                value={grainweight}\r\n                                onChange={handleChange1}\r\n                                InputProps={{\r\n                                    endAdornment: <InputAdornment position=\"end\">kg/hl</InputAdornment>\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={5}>\r\n                            <Button variant=\"text\" color=\"primary\" onClick={handleClick}><b>PRESETS</b></Button>\r\n                            <Menu\r\n                                anchorEl={anchorEl}\r\n                                open={open}\r\n                                onClose={handleClose}\r\n                                anchorOrigin={{\r\n                                    vertical: 'top',\r\n                                    horizontal: 'left',\r\n                                }}\r\n                                transformOrigin={{\r\n                                    vertical: 'top',\r\n                                    horizontal: 'left',\r\n                                }}\r\n                            >\r\n                                <DialogTitle>Preset Grain Weights</DialogTitle>\r\n                                {\r\n                                    grains.map(\r\n                                        (item, index) => (<MenuItem key={item.id} value={item.id} onClick={(event) => handleMenuItemClick(event, index)}>{item.title}</MenuItem>)\r\n                                    )\r\n                                }\r\n                            </Menu>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br />\r\n                    <Grid container>\r\n                        <Grid item xs={12} md={12}>\r\n                            <InputLabel>Varieties</InputLabel>\r\n                            <br />\r\n                            {items.map((data, index) => (\r\n                                <Button onClick={(e) => handleEdit(e, data, index)} fullWidth=\"true\" >\r\n                                    <label style={{ fontSize: 18, paddingLeft: 30 }}><img src={wheat}></img>{data}</label>\r\n                                </Button>\r\n                            ))}\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <div align=\"right\"><Button variant=\"text\" color=\"primary\" onClick={handleClickVariety}><b>ADD</b></Button></div>\r\n                            <Dialog open={openvariety} onClose={handleClose}>\r\n                                <DialogTitle>Variety</DialogTitle>\r\n                                <DialogContent>\r\n                                    <Box component=\"form\" sx={{ display: 'grid' }}>\r\n                                        <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 420 }}>\r\n                                            <TextField\r\n                                                variant=\"standard\"\r\n                                                name=\"name\"\r\n                                                label=\"Name\"\r\n                                                value={varietyname}\r\n                                                onChange={handleChange2}\r\n                                                helperText={helper2}\r\n                                                error={bool2}\r\n                                                required\r\n                                                autocomplete=\"off\"\r\n                                            />\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                </DialogContent>\r\n                                <DialogActions>\r\n                                    <Button onClick={handleClose} color=\"primary\">CANCEL</Button>\r\n                                    <Button onClick={handleOk} color=\"primary\">SAVE</Button>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n                            <Dialog open={openedit} onClose={handleClose}>\r\n                                <DialogTitle>Variety</DialogTitle>\r\n                                <DialogContent>\r\n                                    <Box component=\"form\" sx={{ display: 'grid' }}>\r\n                                        <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 420 }}>\r\n                                            <TextField\r\n                                                variant=\"standard\"\r\n                                                name=\"name\"\r\n                                                label=\"Name\"\r\n                                                value={dataedit}\r\n                                                onChange={handleChangedata}\r\n                                                helperText={helper2}\r\n                                                error={bool2}\r\n                                                required\r\n                                                autocomplete=\"off\"\r\n                                            />\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                </DialogContent>\r\n                                <DialogActions>\r\n                                    <Button onClick={(e) => (handleRemove(e, dataedit))} color=\"secondary\">REMOVE</Button>\r\n                                    <Button onClick={handleClose} color=\"primary\">CANCEL</Button>\r\n                                    <Button onClick={handleOkEdit} color=\"primary\">SAVE</Button>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br />\r\n                    <InputLabel>Traits</InputLabel>\r\n\r\n                    <FormControl sx={{ m: 1, width: 200 }}>\r\n                        {/* <InputLabel id=\"demo-multiple-checkbox-label\">Tag</InputLabel> */}\r\n                        <Select\r\n                            labelId=\"demo-multiple-checkbox-label\"\r\n                            id=\"demo-multiple-checkbox\"\r\n                            multiple\r\n                            value={personName}\r\n                            onChange={handleChange}\r\n                            input={<OutlinedInput label=\"Traits\" />}\r\n                            renderValue={(selected) => selected.join(', ')}\r\n                            MenuProps={MenuProps}\r\n                        >\r\n                            {trait.map((name) => (\r\n                                <MenuItem key={name} value={name}>\r\n                                    <Checkbox checked={personName.indexOf(name) > -1} />\r\n                                    <ListItemText primary={name} />\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                <label><br />*indicates required field</label>\r\n            </Grid>\r\n        </Form >\r\n    )\r\n}\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Cultivars\\Useform.js",["612"],"import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        '& .MuiFormControl-root': {\r\n            width: '90%',\r\n            margin: theme.spacing(1)\r\n        }\r\n    }\r\n}))\r\n\r\nfunction Form(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <form className={classes.root} autoComplete=\"off\">\r\n                {props.children}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n\r\n","D:\\GFS_Trace\\src\\components\\pages\\FarmAssets\\Cultivars\\Table.js",["613","614","615"],"import React from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { Button, Dialog, DialogActions, DialogContent } from '@material-ui/core';\r\nimport { DialogTitle } from '@mui/material';\r\nimport Cultivarsmain from './Cultivarsmain';\r\nimport Icon from '@mui/material/Icon';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\nexport default function Table() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [rowdata,setrowdata]=React.useState({name:\"\",weight:\"\",Varieties:[],Traits:[]});\r\n    const [newedit, setnewedit] = React.useState(true);\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = (event, reason) => {\r\n        setOpen(false);\r\n\r\n    };\r\n\r\n    const handleEdit =(event,rowData)=>{\r\n        setrowdata(rowData)\r\n        setOpen(true);\r\n    };\r\n    const handleAdd =(event)=>{\r\n        setrowdata({name:\"\",weight:\"\",Varieties:[],Traits:\"\"})\r\n        setOpen(true);\r\n    };\r\n\r\n    const [data, setData] = React.useState([\r\n        { name: 'Wheat', weight: '23kg/hl', Varieties: ['abc'], Traits: 'Defective Grains, Foreign Material' },\r\n        { name: 'Barley', weight: '50kg/hl', Varieties: ['dfg'], Traits: 'Defective Grains,Oil, Purity' },\r\n        { name: 'Canary Seed', weight: '400kg/hl', Varieties:['hij'], Traits: 'Heat Damage, Impurities' },\r\n        { name: 'Faba Bean', weight: '100kg/hl', Varieties: ['abc'], Traits: 'Defective Grains, Heat Damage' }\r\n    ])\r\n    const columns = [{\r\n        title: 'Name', field: 'name'\r\n    },\r\n    {\r\n        title: 'Grain Weight', field: 'weight'\r\n    }, {\r\n        title: 'Varieties', field: 'Varieties', sorting: false\r\n    }, {\r\n        title: 'Traits', field: 'Traits', sorting: false\r\n    }]\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"Cultivars\"\r\n                data={data}\r\n                columns={columns}\r\n                editable={{\r\n                    onRowDelete: oldData =>\r\n                        new Promise((resolve, reject) => {\r\n                            setTimeout(() => {\r\n                                const dataDelete = [...data];\r\n                                const index = oldData.tableData.id;\r\n                                dataDelete.splice(index, 1);\r\n                                setData([...dataDelete]);\r\n                                resolve()\r\n                            }, 1000)\r\n                        }),\r\n                }}\r\n                actions={[\r\n                    {\r\n                        icon: () => <Icon sx={{ fontSize: 40 }} color=\"info\">add_circle</Icon>,\r\n                        isFreeAction: true,\r\n                        onClick: (event) => handleAdd(event)\r\n                    },\r\n                    {\r\n                        icon: () => <Icon sx={{ fontSize: 22 }} color=\"action\"><CreateIcon /></Icon>,\r\n                        tooltip: 'Edit User',\r\n                        onClick: (event, rowData) => handleEdit(event,rowData)\r\n                    },\r\n                    //   {\r\n                    //     icon:() => <Icon sx={{ fontSize: 22 }} color=\"action\"><DeleteIcon/></Icon>,\r\n                    //     tooltip: 'Delete User',\r\n                    //     onClick: (event, rowData) => alert(\"You want to delete \" + rowData.name)\r\n                    //   }\r\n                ]}\r\n                options={{\r\n                    actionsColumnIndex: -1\r\n                }}\r\n                icons={{Delete: () => <DeleteIcon color=\"action\" />}}\r\n            />\r\n            <Dialog open={open} onClose={handleClose} maxWidth=\"sm\" scroll=\"paper\">\r\n                <DialogTitle sx={{ fontSize: 24, fontWeight: 'large' }}>New Item</DialogTitle>\r\n                <DialogContent>\r\n                    <Cultivarsmain data={rowdata} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">CANCEL</Button>\r\n                    <Button onClick={handleClose} color=\"primary\">SAVE</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"616","replacedBy":"617"},{"ruleId":"618","replacedBy":"619"},{"ruleId":"620","severity":1,"message":"621","line":1,"column":17,"nodeType":"622","messageId":"623","endLine":1,"endColumn":26},{"ruleId":"616","replacedBy":"624"},{"ruleId":"618","replacedBy":"625"},{"ruleId":"620","severity":1,"message":"626","line":2,"column":8,"nodeType":"622","messageId":"623","endLine":2,"endColumn":18},{"ruleId":"620","severity":1,"message":"627","line":3,"column":8,"nodeType":"622","messageId":"623","endLine":3,"endColumn":17},{"ruleId":"620","severity":1,"message":"628","line":4,"column":8,"nodeType":"622","messageId":"623","endLine":4,"endColumn":22},{"ruleId":"620","severity":1,"message":"629","line":5,"column":8,"nodeType":"622","messageId":"623","endLine":5,"endColumn":28},{"ruleId":"620","severity":1,"message":"630","line":6,"column":8,"nodeType":"622","messageId":"623","endLine":6,"endColumn":23},{"ruleId":"620","severity":1,"message":"631","line":7,"column":8,"nodeType":"622","messageId":"623","endLine":7,"endColumn":11},{"ruleId":"620","severity":1,"message":"632","line":13,"column":10,"nodeType":"622","messageId":"623","endLine":13,"endColumn":15},{"ruleId":"620","severity":1,"message":"633","line":13,"column":17,"nodeType":"622","messageId":"623","endLine":13,"endColumn":25},{"ruleId":"634","severity":1,"message":"635","line":44,"column":7,"nodeType":"636","messageId":"637","endLine":44,"endColumn":13},{"ruleId":"620","severity":1,"message":"638","line":2,"column":25,"nodeType":"622","messageId":"623","endLine":2,"endColumn":31},{"ruleId":"620","severity":1,"message":"639","line":3,"column":10,"nodeType":"622","messageId":"623","endLine":3,"endColumn":18},{"ruleId":"620","severity":1,"message":"640","line":1,"column":16,"nodeType":"622","messageId":"623","endLine":1,"endColumn":24},{"ruleId":"620","severity":1,"message":"640","line":1,"column":16,"nodeType":"622","messageId":"623","endLine":1,"endColumn":24},{"ruleId":"641","severity":1,"message":"642","line":9,"column":7,"nodeType":"643","endLine":9,"endColumn":76},{"ruleId":"644","severity":1,"message":"645","line":45,"column":6,"nodeType":"643","endLine":45,"endColumn":125},{"ruleId":"644","severity":1,"message":"645","line":47,"column":7,"nodeType":"643","endLine":47,"endColumn":126},{"ruleId":"644","severity":1,"message":"645","line":49,"column":7,"nodeType":"643","endLine":49,"endColumn":126},{"ruleId":"620","severity":1,"message":"646","line":5,"column":10,"nodeType":"622","messageId":"623","endLine":5,"endColumn":26},{"ruleId":"620","severity":1,"message":"647","line":10,"column":3,"nodeType":"622","messageId":"623","endLine":10,"endColumn":14},{"ruleId":"620","severity":1,"message":"648","line":11,"column":3,"nodeType":"622","messageId":"623","endLine":11,"endColumn":16},{"ruleId":"620","severity":1,"message":"649","line":18,"column":10,"nodeType":"622","messageId":"623","endLine":18,"endColumn":22},{"ruleId":"620","severity":1,"message":"650","line":24,"column":10,"nodeType":"622","messageId":"623","endLine":24,"endColumn":38},{"ruleId":"620","severity":1,"message":"651","line":16,"column":10,"nodeType":"622","messageId":"623","endLine":16,"endColumn":15},{"ruleId":"620","severity":1,"message":"652","line":22,"column":9,"nodeType":"622","messageId":"623","endLine":22,"endColumn":21},{"ruleId":"653","severity":1,"message":"654","line":108,"column":16,"nodeType":"655","messageId":"637","endLine":108,"endColumn":18},{"ruleId":"653","severity":1,"message":"654","line":111,"column":16,"nodeType":"655","messageId":"637","endLine":111,"endColumn":18},{"ruleId":"653","severity":1,"message":"654","line":111,"column":37,"nodeType":"655","messageId":"637","endLine":111,"endColumn":39},{"ruleId":"653","severity":1,"message":"654","line":114,"column":19,"nodeType":"655","messageId":"637","endLine":114,"endColumn":21},{"ruleId":"653","severity":1,"message":"654","line":114,"column":38,"nodeType":"655","messageId":"637","endLine":114,"endColumn":40},{"ruleId":"653","severity":1,"message":"654","line":117,"column":20,"nodeType":"655","messageId":"637","endLine":117,"endColumn":22},{"ruleId":"653","severity":1,"message":"654","line":117,"column":40,"nodeType":"655","messageId":"637","endLine":117,"endColumn":42},{"ruleId":"653","severity":1,"message":"654","line":120,"column":20,"nodeType":"655","messageId":"637","endLine":120,"endColumn":22},{"ruleId":"653","severity":1,"message":"654","line":120,"column":40,"nodeType":"655","messageId":"637","endLine":120,"endColumn":42},{"ruleId":"653","severity":1,"message":"654","line":136,"column":104,"nodeType":"655","messageId":"637","endLine":136,"endColumn":106},{"ruleId":"641","severity":1,"message":"642","line":188,"column":25,"nodeType":"643","endLine":188,"endColumn":43},{"ruleId":"620","severity":1,"message":"656","line":6,"column":18,"nodeType":"622","messageId":"623","endLine":6,"endColumn":25},{"ruleId":"641","severity":1,"message":"642","line":30,"column":27,"nodeType":"643","endLine":30,"endColumn":45},{"ruleId":"620","severity":1,"message":"656","line":6,"column":18,"nodeType":"622","messageId":"623","endLine":6,"endColumn":25},{"ruleId":"641","severity":1,"message":"642","line":30,"column":25,"nodeType":"643","endLine":30,"endColumn":43},{"ruleId":"620","severity":1,"message":"656","line":6,"column":18,"nodeType":"622","messageId":"623","endLine":6,"endColumn":25},{"ruleId":"641","severity":1,"message":"642","line":33,"column":25,"nodeType":"643","endLine":33,"endColumn":43},{"ruleId":"620","severity":1,"message":"656","line":7,"column":16,"nodeType":"622","messageId":"623","endLine":7,"endColumn":23},{"ruleId":"653","severity":1,"message":"654","line":11,"column":16,"nodeType":"655","messageId":"637","endLine":11,"endColumn":18},{"ruleId":"641","severity":1,"message":"642","line":77,"column":25,"nodeType":"643","endLine":77,"endColumn":43},{"ruleId":"620","severity":1,"message":"656","line":6,"column":18,"nodeType":"622","messageId":"623","endLine":6,"endColumn":25},{"ruleId":"641","severity":1,"message":"642","line":33,"column":25,"nodeType":"643","endLine":33,"endColumn":43},{"ruleId":"620","severity":1,"message":"656","line":7,"column":18,"nodeType":"622","messageId":"623","endLine":7,"endColumn":25},{"ruleId":"620","severity":1,"message":"651","line":8,"column":12,"nodeType":"622","messageId":"623","endLine":8,"endColumn":17},{"ruleId":"653","severity":1,"message":"654","line":87,"column":19,"nodeType":"655","messageId":"637","endLine":87,"endColumn":21},{"ruleId":"653","severity":1,"message":"654","line":90,"column":24,"nodeType":"655","messageId":"637","endLine":90,"endColumn":26},{"ruleId":"653","severity":1,"message":"654","line":90,"column":42,"nodeType":"655","messageId":"637","endLine":90,"endColumn":44},{"ruleId":"653","severity":1,"message":"654","line":93,"column":24,"nodeType":"655","messageId":"637","endLine":93,"endColumn":26},{"ruleId":"641","severity":1,"message":"642","line":132,"column":25,"nodeType":"643","endLine":132,"endColumn":43},{"ruleId":"657","severity":1,"message":"658","line":72,"column":6,"nodeType":"659","endLine":72,"endColumn":8,"suggestions":"660"},{"ruleId":"620","severity":1,"message":"661","line":9,"column":9,"nodeType":"622","messageId":"623","endLine":9,"endColumn":13},{"ruleId":"620","severity":1,"message":"661","line":8,"column":11,"nodeType":"622","messageId":"623","endLine":8,"endColumn":15},{"ruleId":"620","severity":1,"message":"661","line":9,"column":11,"nodeType":"622","messageId":"623","endLine":9,"endColumn":15},{"ruleId":"620","severity":1,"message":"661","line":8,"column":11,"nodeType":"622","messageId":"623","endLine":8,"endColumn":15},{"ruleId":"641","severity":1,"message":"642","line":107,"column":25,"nodeType":"643","endLine":107,"endColumn":43},{"ruleId":"641","severity":1,"message":"642","line":96,"column":33,"nodeType":"643","endLine":96,"endColumn":51},{"ruleId":"641","severity":1,"message":"642","line":107,"column":33,"nodeType":"643","endLine":107,"endColumn":51},{"ruleId":"620","severity":1,"message":"656","line":12,"column":18,"nodeType":"622","messageId":"623","endLine":12,"endColumn":25},{"ruleId":"641","severity":1,"message":"642","line":77,"column":35,"nodeType":"643","endLine":77,"endColumn":53},{"ruleId":"641","severity":1,"message":"642","line":101,"column":35,"nodeType":"643","endLine":101,"endColumn":53},{"ruleId":"641","severity":1,"message":"642","line":109,"column":25,"nodeType":"643","endLine":109,"endColumn":43},{"ruleId":"641","severity":1,"message":"642","line":69,"column":35,"nodeType":"643","endLine":69,"endColumn":53},{"ruleId":"634","severity":1,"message":"662","line":4,"column":9,"nodeType":"636","messageId":"637","endLine":4,"endColumn":13},{"ruleId":"634","severity":1,"message":"663","line":4,"column":22,"nodeType":"636","messageId":"637","endLine":4,"endColumn":26},{"ruleId":"634","severity":1,"message":"664","line":4,"column":35,"nodeType":"636","messageId":"637","endLine":4,"endColumn":43},{"ruleId":"634","severity":1,"message":"665","line":4,"column":53,"nodeType":"636","messageId":"637","endLine":4,"endColumn":61},{"ruleId":"620","severity":1,"message":"640","line":1,"column":16,"nodeType":"622","messageId":"623","endLine":1,"endColumn":24},{"ruleId":"620","severity":1,"message":"656","line":8,"column":18,"nodeType":"622","messageId":"623","endLine":8,"endColumn":25},{"ruleId":"620","severity":1,"message":"640","line":1,"column":16,"nodeType":"622","messageId":"623","endLine":1,"endColumn":24},{"ruleId":"620","severity":1,"message":"666","line":51,"column":9,"nodeType":"622","messageId":"623","endLine":51,"endColumn":25},{"ruleId":"641","severity":1,"message":"642","line":148,"column":35,"nodeType":"643","endLine":148,"endColumn":53},{"ruleId":"641","severity":1,"message":"642","line":113,"column":33,"nodeType":"643","endLine":113,"endColumn":51},{"ruleId":"620","severity":1,"message":"667","line":9,"column":10,"nodeType":"622","messageId":"623","endLine":9,"endColumn":27},{"ruleId":"641","severity":1,"message":"642","line":165,"column":35,"nodeType":"643","endLine":165,"endColumn":53},{"ruleId":"620","severity":1,"message":"656","line":17,"column":14,"nodeType":"622","messageId":"623","endLine":17,"endColumn":21},{"ruleId":"641","severity":1,"message":"642","line":130,"column":25,"nodeType":"643","endLine":130,"endColumn":43},{"ruleId":"641","severity":1,"message":"642","line":171,"column":35,"nodeType":"643","endLine":171,"endColumn":53},{"ruleId":"641","severity":1,"message":"642","line":127,"column":35,"nodeType":"643","endLine":127,"endColumn":53},{"ruleId":"620","severity":1,"message":"668","line":1,"column":10,"nodeType":"622","messageId":"623","endLine":1,"endColumn":18},{"ruleId":"620","severity":1,"message":"656","line":15,"column":18,"nodeType":"622","messageId":"623","endLine":15,"endColumn":25},{"ruleId":"620","severity":1,"message":"656","line":12,"column":16,"nodeType":"622","messageId":"623","endLine":12,"endColumn":23},{"ruleId":"620","severity":1,"message":"640","line":1,"column":17,"nodeType":"622","messageId":"623","endLine":1,"endColumn":25},{"ruleId":"620","severity":1,"message":"669","line":8,"column":10,"nodeType":"622","messageId":"623","endLine":8,"endColumn":18},{"ruleId":"620","severity":1,"message":"670","line":8,"column":20,"nodeType":"622","messageId":"623","endLine":8,"endColumn":26},{"ruleId":"641","severity":1,"message":"642","line":131,"column":35,"nodeType":"643","endLine":131,"endColumn":53},{"ruleId":"641","severity":1,"message":"642","line":135,"column":35,"nodeType":"643","endLine":135,"endColumn":53},{"ruleId":"641","severity":1,"message":"642","line":118,"column":35,"nodeType":"643","endLine":118,"endColumn":53},{"ruleId":"620","severity":1,"message":"667","line":8,"column":10,"nodeType":"622","messageId":"623","endLine":8,"endColumn":27},{"ruleId":"641","severity":1,"message":"642","line":128,"column":35,"nodeType":"643","endLine":128,"endColumn":53},{"ruleId":"620","severity":1,"message":"656","line":15,"column":14,"nodeType":"622","messageId":"623","endLine":15,"endColumn":21},{"ruleId":"641","severity":1,"message":"642","line":127,"column":25,"nodeType":"643","endLine":127,"endColumn":43},{"ruleId":"641","severity":1,"message":"642","line":40,"column":17,"nodeType":"643","endLine":40,"endColumn":81},{"ruleId":"641","severity":1,"message":"642","line":13,"column":16,"nodeType":"643","endLine":13,"endColumn":80},{"ruleId":"620","severity":1,"message":"671","line":8,"column":8,"nodeType":"622","messageId":"623","endLine":8,"endColumn":24},{"ruleId":"620","severity":1,"message":"672","line":85,"column":12,"nodeType":"622","messageId":"623","endLine":85,"endColumn":18},{"ruleId":"653","severity":1,"message":"654","line":111,"column":32,"nodeType":"655","messageId":"637","endLine":111,"endColumn":34},{"ruleId":"653","severity":1,"message":"654","line":124,"column":32,"nodeType":"655","messageId":"637","endLine":124,"endColumn":34},{"ruleId":"653","severity":1,"message":"654","line":135,"column":32,"nodeType":"655","messageId":"637","endLine":135,"endColumn":34},{"ruleId":"653","severity":1,"message":"673","line":165,"column":25,"nodeType":"655","messageId":"637","endLine":165,"endColumn":27},{"ruleId":"653","severity":1,"message":"673","line":172,"column":22,"nodeType":"655","messageId":"637","endLine":172,"endColumn":24},{"ruleId":"620","severity":1,"message":"674","line":181,"column":11,"nodeType":"622","messageId":"623","endLine":181,"endColumn":22},{"ruleId":"641","severity":1,"message":"642","line":255,"column":86,"nodeType":"643","endLine":255,"endColumn":103},{"ruleId":"620","severity":1,"message":"640","line":1,"column":17,"nodeType":"622","messageId":"623","endLine":1,"endColumn":25},{"ruleId":"620","severity":1,"message":"675","line":13,"column":12,"nodeType":"622","messageId":"623","endLine":13,"endColumn":19},{"ruleId":"620","severity":1,"message":"676","line":13,"column":21,"nodeType":"622","messageId":"623","endLine":13,"endColumn":31},{"ruleId":"620","severity":1,"message":"677","line":14,"column":11,"nodeType":"622","messageId":"623","endLine":14,"endColumn":26},"no-native-reassign",["678"],"no-negated-in-lhs",["679"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar",["678"],["679"],"'Typography' is defined but never used.","'TextField' is defined but never used.","'AdapterDateFns' is defined but never used.","'LocalizationProvider' is defined but never used.","'DateRangePicker' is defined but never used.","'Box' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","no-dupe-keys","Duplicate key 'render'.","ObjectExpression","unexpected","'Column' is defined but never used.","'FaFilter' is defined but never used.","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'MdSpaceDashboard' is defined but never used.","'FaUserClock' is defined but never used.","'FaCalendarAlt' is defined but never used.","'BsPeopleFill' is defined but never used.","'BsFillCloudLightningRainFill' is defined but never used.","'field' is assigned a value but never used.","'handleChange' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'setData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lsType'. Either include it or remove the dependency array.","ArrayExpression",["680"],"'farm' is assigned a value but never used.","Duplicate key 'farm'.","Duplicate key 'name'.","Duplicate key 'capacity'.","Duplicate key 'contents'.","'columns_archived' is assigned a value but never used.","'DisabledByDefault' is defined but never used.","'Progress' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'FormControlLabel' is defined but never used.","'traits' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'handleCheck' is assigned a value but never used.","'newedit' is assigned a value but never used.","'setnewedit' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"681","fix":"682"},"Update the dependencies array to be: [lsType]",{"range":"683","text":"684"},[1657,1659],"[lsType]"]